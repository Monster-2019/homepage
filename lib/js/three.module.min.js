const REVISION="126";const MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2};const TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3};const CullFaceNone=0;const CullFaceBack=1;const CullFaceFront=2;const CullFaceFrontBack=3;const BasicShadowMap=0;const PCFShadowMap=1;const PCFSoftShadowMap=2;const VSMShadowMap=3;const FrontSide=0;const BackSide=1;const DoubleSide=2;const FlatShading=1;const SmoothShading=2;const NoBlending=0;const NormalBlending=1;const AdditiveBlending=2;const SubtractiveBlending=3;const MultiplyBlending=4;const CustomBlending=5;const AddEquation=100;const SubtractEquation=101;const ReverseSubtractEquation=102;const MinEquation=103;const MaxEquation=104;const ZeroFactor=200;const OneFactor=201;const SrcColorFactor=202;const OneMinusSrcColorFactor=203;const SrcAlphaFactor=204;const OneMinusSrcAlphaFactor=205;const DstAlphaFactor=206;const OneMinusDstAlphaFactor=207;const DstColorFactor=208;const OneMinusDstColorFactor=209;const SrcAlphaSaturateFactor=210;const NeverDepth=0;const AlwaysDepth=1;const LessDepth=2;const LessEqualDepth=3;const EqualDepth=4;const GreaterEqualDepth=5;const GreaterDepth=6;const NotEqualDepth=7;const MultiplyOperation=0;const MixOperation=1;const AddOperation=2;const NoToneMapping=0;const LinearToneMapping=1;const ReinhardToneMapping=2;const CineonToneMapping=3;const ACESFilmicToneMapping=4;const CustomToneMapping=5;const UVMapping=300;const CubeReflectionMapping=301;const CubeRefractionMapping=302;const EquirectangularReflectionMapping=303;const EquirectangularRefractionMapping=304;const CubeUVReflectionMapping=306;const CubeUVRefractionMapping=307;const RepeatWrapping=1e3;const ClampToEdgeWrapping=1001;const MirroredRepeatWrapping=1002;const NearestFilter=1003;const NearestMipmapNearestFilter=1004;const NearestMipMapNearestFilter=1004;const NearestMipmapLinearFilter=1005;const NearestMipMapLinearFilter=1005;const LinearFilter=1006;const LinearMipmapNearestFilter=1007;const LinearMipMapNearestFilter=1007;const LinearMipmapLinearFilter=1008;const LinearMipMapLinearFilter=1008;const UnsignedByteType=1009;const ByteType=1010;const ShortType=1011;const UnsignedShortType=1012;const IntType=1013;const UnsignedIntType=1014;const FloatType=1015;const HalfFloatType=1016;const UnsignedShort4444Type=1017;const UnsignedShort5551Type=1018;const UnsignedShort565Type=1019;const UnsignedInt248Type=1020;const AlphaFormat=1021;const RGBFormat=1022;const RGBAFormat=1023;const LuminanceFormat=1024;const LuminanceAlphaFormat=1025;const RGBEFormat=RGBAFormat;const DepthFormat=1026;const DepthStencilFormat=1027;const RedFormat=1028;const RedIntegerFormat=1029;const RGFormat=1030;const RGIntegerFormat=1031;const RGBIntegerFormat=1032;const RGBAIntegerFormat=1033;const RGB_S3TC_DXT1_Format=33776;const RGBA_S3TC_DXT1_Format=33777;const RGBA_S3TC_DXT3_Format=33778;const RGBA_S3TC_DXT5_Format=33779;const RGB_PVRTC_4BPPV1_Format=35840;const RGB_PVRTC_2BPPV1_Format=35841;const RGBA_PVRTC_4BPPV1_Format=35842;const RGBA_PVRTC_2BPPV1_Format=35843;const RGB_ETC1_Format=36196;const RGB_ETC2_Format=37492;const RGBA_ETC2_EAC_Format=37496;const RGBA_ASTC_4x4_Format=37808;const RGBA_ASTC_5x4_Format=37809;const RGBA_ASTC_5x5_Format=37810;const RGBA_ASTC_6x5_Format=37811;const RGBA_ASTC_6x6_Format=37812;const RGBA_ASTC_8x5_Format=37813;const RGBA_ASTC_8x6_Format=37814;const RGBA_ASTC_8x8_Format=37815;const RGBA_ASTC_10x5_Format=37816;const RGBA_ASTC_10x6_Format=37817;const RGBA_ASTC_10x8_Format=37818;const RGBA_ASTC_10x10_Format=37819;const RGBA_ASTC_12x10_Format=37820;const RGBA_ASTC_12x12_Format=37821;const RGBA_BPTC_Format=36492;const SRGB8_ALPHA8_ASTC_4x4_Format=37840;const SRGB8_ALPHA8_ASTC_5x4_Format=37841;const SRGB8_ALPHA8_ASTC_5x5_Format=37842;const SRGB8_ALPHA8_ASTC_6x5_Format=37843;const SRGB8_ALPHA8_ASTC_6x6_Format=37844;const SRGB8_ALPHA8_ASTC_8x5_Format=37845;const SRGB8_ALPHA8_ASTC_8x6_Format=37846;const SRGB8_ALPHA8_ASTC_8x8_Format=37847;const SRGB8_ALPHA8_ASTC_10x5_Format=37848;const SRGB8_ALPHA8_ASTC_10x6_Format=37849;const SRGB8_ALPHA8_ASTC_10x8_Format=37850;const SRGB8_ALPHA8_ASTC_10x10_Format=37851;const SRGB8_ALPHA8_ASTC_12x10_Format=37852;const SRGB8_ALPHA8_ASTC_12x12_Format=37853;const LoopOnce=2200;const LoopRepeat=2201;const LoopPingPong=2202;const InterpolateDiscrete=2300;const InterpolateLinear=2301;const InterpolateSmooth=2302;const ZeroCurvatureEnding=2400;const ZeroSlopeEnding=2401;const WrapAroundEnding=2402;const NormalAnimationBlendMode=2500;const AdditiveAnimationBlendMode=2501;const TrianglesDrawMode=0;const TriangleStripDrawMode=1;const TriangleFanDrawMode=2;const LinearEncoding=3e3;const sRGBEncoding=3001;const GammaEncoding=3007;const RGBEEncoding=3002;const LogLuvEncoding=3003;const RGBM7Encoding=3004;const RGBM16Encoding=3005;const RGBDEncoding=3006;const BasicDepthPacking=3200;const RGBADepthPacking=3201;const TangentSpaceNormalMap=0;const ObjectSpaceNormalMap=1;const ZeroStencilOp=0;const KeepStencilOp=7680;const ReplaceStencilOp=7681;const IncrementStencilOp=7682;const DecrementStencilOp=7683;const IncrementWrapStencilOp=34055;const DecrementWrapStencilOp=34056;const InvertStencilOp=5386;const NeverStencilFunc=512;const LessStencilFunc=513;const EqualStencilFunc=514;const LessEqualStencilFunc=515;const GreaterStencilFunc=516;const NotEqualStencilFunc=517;const GreaterEqualStencilFunc=518;const AlwaysStencilFunc=519;const StaticDrawUsage=35044;const DynamicDrawUsage=35048;const StreamDrawUsage=35040;const StaticReadUsage=35045;const DynamicReadUsage=35049;const StreamReadUsage=35041;const StaticCopyUsage=35046;const DynamicCopyUsage=35050;const StreamCopyUsage=35042;const GLSL1="100";const GLSL3="300 es";function EventDispatcher(){}Object.assign(EventDispatcher.prototype,{addEventListener:function(e,t){if(this._listeners===undefined)this._listeners={};const n=this._listeners;if(n[e]===undefined){n[e]=[]}if(n[e].indexOf(t)===-1){n[e].push(t)}},hasEventListener:function(e,t){if(this._listeners===undefined)return false;const n=this._listeners;return n[e]!==undefined&&n[e].indexOf(t)!==-1},removeEventListener:function(e,t){if(this._listeners===undefined)return;const n=this._listeners;const r=n[e];if(r!==undefined){const i=r.indexOf(t);if(i!==-1){r.splice(i,1)}}},dispatchEvent:function(n){if(this._listeners===undefined)return;const e=this._listeners;const t=e[n.type];if(t!==undefined){n.target=this;const r=t.slice(0);for(let e=0,t=r.length;e<t;e++){r[e].call(this,n)}}}});const _lut=[];for(let e=0;e<256;e++){_lut[e]=(e<16?"0":"")+e.toString(16)}let _seed=1234567;const MathUtils={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){const e=Math.random()*4294967295|0;const t=Math.random()*4294967295|0;const n=Math.random()*4294967295|0;const r=Math.random()*4294967295|0;const i=_lut[e&255]+_lut[e>>8&255]+_lut[e>>16&255]+_lut[e>>24&255]+"-"+_lut[t&255]+_lut[t>>8&255]+"-"+_lut[t>>16&15|64]+_lut[t>>24&255]+"-"+_lut[n&63|128]+_lut[n>>8&255]+"-"+_lut[n>>16&255]+_lut[n>>24&255]+_lut[r&255]+_lut[r>>8&255]+_lut[r>>16&255]+_lut[r>>24&255];return i.toUpperCase()},clamp:function(e,t,n){return Math.max(t,Math.min(n,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,n,r,i){return r+(e-t)*(i-r)/(n-t)},lerp:function(e,t,n){return(1-n)*e+n*t},damp:function(e,t,n,r){return MathUtils.lerp(e,t,1-Math.exp(-n*r))},pingpong:function(e,t=1){return t-Math.abs(MathUtils.euclideanModulo(e,t*2)-t)},smoothstep:function(e,t,n){if(e<=t)return 0;if(e>=n)return 1;e=(e-t)/(n-t);return e*e*(3-2*e)},smootherstep:function(e,t,n){if(e<=t)return 0;if(e>=n)return 1;e=(e-t)/(n-t);return e*e*e*(e*(e*6-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},seededRandom:function(e){if(e!==undefined)_seed=e%2147483647;_seed=_seed*16807%2147483647;return(_seed-1)/2147483646},degToRad:function(e){return e*MathUtils.DEG2RAD},radToDeg:function(e){return e*MathUtils.RAD2DEG},isPowerOfTwo:function(e){return(e&e-1)===0&&e!==0},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))},setQuaternionFromProperEuler:function(e,t,n,r,i){const a=Math.cos;const s=Math.sin;const o=a(n/2);const c=s(n/2);const l=a((t+r)/2);const u=s((t+r)/2);const h=a((t-r)/2);const d=s((t-r)/2);const f=a((r-t)/2);const p=s((r-t)/2);switch(i){case"XYX":e.set(o*u,c*h,c*d,o*l);break;case"YZY":e.set(c*d,o*u,c*h,o*l);break;case"ZXZ":e.set(c*h,c*d,o*u,o*l);break;case"XZX":e.set(o*u,c*p,c*f,o*l);break;case"YXY":e.set(c*f,o*u,c*p,o*l);break;case"ZYZ":e.set(c*p,c*f,o*u,o*l);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}};class Vector2{constructor(e=0,t=0){this.x=e;this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){this.x=e;this.y=t;return this}setScalar(e){this.x=e;this.y=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){this.x=e.x;this.y=e.y;return this}add(e,t){if(t!==undefined){console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");return this.addVectors(e,t)}this.x+=e.x;this.y+=e.y;return this}addScalar(e){this.x+=e;this.y+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;return this}sub(e,t){if(t!==undefined){console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");return this.subVectors(e,t)}this.x-=e.x;this.y-=e.y;return this}subScalar(e){this.x-=e;this.y-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;return this}multiply(e){this.x*=e.x;this.y*=e.y;return this}multiplyScalar(e){this.x*=e;this.y*=e;return this}divide(e){this.x/=e.x;this.y/=e.y;return this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y;const r=e.elements;this.x=r[0]*t+r[3]*n+r[6];this.y=r[1]*t+r[4]*n+r[7];return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);return this}negate(){this.x=-this.x;this.y=-this.y;return this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;return this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;return e}fromBufferAttribute(e,t,n){if(n!==undefined){console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().")}this.x=e.getX(t);this.y=e.getY(t);return this}rotateAround(e,t){const n=Math.cos(t),r=Math.sin(t);const i=this.x-e.x;const a=this.y-e.y;this.x=i*n-a*r+e.x;this.y=i*r+a*n+e.y;return this}random(){this.x=Math.random();this.y=Math.random();return this}}Vector2.prototype.isVector2=true;class Matrix3{constructor(){this.elements=[1,0,0,0,1,0,0,0,1];if(arguments.length>0){console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}}set(e,t,n,r,i,a,s,o,c){const l=this.elements;l[0]=e;l[1]=r;l[2]=s;l[3]=t;l[4]=i;l[5]=o;l[6]=n;l[7]=a;l[8]=c;return this}identity(){this.set(1,0,0,0,1,0,0,0,1);return this}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];return this}extractBasis(e,t,n){e.setFromMatrix3Column(this,0);t.setFromMatrix3Column(this,1);n.setFromMatrix3Column(this,2);return this}setFromMatrix4(e){const t=e.elements;this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]);return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const r=t.elements;const i=this.elements;const a=n[0],s=n[3],o=n[6];const c=n[1],l=n[4],u=n[7];const h=n[2],d=n[5],f=n[8];const p=r[0],m=r[3],g=r[6];const _=r[1],y=r[4],v=r[7];const x=r[2],b=r[5],M=r[8];i[0]=a*p+s*_+o*x;i[3]=a*m+s*y+o*b;i[6]=a*g+s*v+o*M;i[1]=c*p+l*_+u*x;i[4]=c*m+l*y+u*b;i[7]=c*g+l*v+u*M;i[2]=h*p+d*_+f*x;i[5]=h*m+d*y+f*b;i[8]=h*g+d*v+f*M;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[3]*=e;t[6]*=e;t[1]*=e;t[4]*=e;t[7]*=e;t[2]*=e;t[5]*=e;t[8]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[1],r=e[2],i=e[3],a=e[4],s=e[5],o=e[6],c=e[7],l=e[8];return t*a*l-t*s*c-n*i*l+n*s*o+r*i*c-r*a*o}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],i=e[3],a=e[4],s=e[5],o=e[6],c=e[7],l=e[8],u=l*a-s*c,h=s*o-l*i,d=c*i-a*o,f=t*u+n*h+r*d;if(f===0)return this.set(0,0,0,0,0,0,0,0,0);const p=1/f;e[0]=u*p;e[1]=(r*c-l*n)*p;e[2]=(s*n-r*a)*p;e[3]=h*p;e[4]=(l*t-r*o)*p;e[5]=(r*i-s*t)*p;e[6]=d*p;e[7]=(n*o-c*t)*p;e[8]=(a*t-n*i)*p;return this}transpose(){let e;const t=this.elements;e=t[1];t[1]=t[3];t[3]=e;e=t[2];t[2]=t[6];t[6]=e;e=t[5];t[5]=t[7];t[7]=e;return this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;e[0]=t[0];e[1]=t[3];e[2]=t[6];e[3]=t[1];e[4]=t[4];e[5]=t[7];e[6]=t[2];e[7]=t[5];e[8]=t[8];return this}setUvTransform(e,t,n,r,i,a,s){const o=Math.cos(i);const c=Math.sin(i);this.set(n*o,n*c,-n*(o*a+c*s)+a+e,-r*c,r*o,-r*(-c*a+o*s)+s+t,0,0,1);return this}scale(e,t){const n=this.elements;n[0]*=e;n[3]*=e;n[6]*=e;n[1]*=t;n[4]*=t;n[7]*=t;return this}rotate(e){const t=Math.cos(e);const n=Math.sin(e);const r=this.elements;const i=r[0],a=r[3],s=r[6];const o=r[1],c=r[4],l=r[7];r[0]=t*i+n*o;r[3]=t*a+n*c;r[6]=t*s+n*l;r[1]=-n*i+t*o;r[4]=-n*a+t*c;r[7]=-n*s+t*l;return this}translate(e,t){const n=this.elements;n[0]+=e*n[2];n[3]+=e*n[5];n[6]+=e*n[8];n[1]+=t*n[2];n[4]+=t*n[5];n[7]+=t*n[8];return this}equals(e){const t=this.elements;const n=e.elements;for(let e=0;e<9;e++){if(t[e]!==n[e])return false}return true}fromArray(t,n=0){for(let e=0;e<9;e++){this.elements[e]=t[e+n]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];return e}clone(){return(new this.constructor).fromArray(this.elements)}}Matrix3.prototype.isMatrix3=true;let _canvas;const ImageUtils={getDataURL:function(e){if(/^data:/i.test(e.src)){return e.src}if(typeof HTMLCanvasElement=="undefined"){return e.src}let t;if(e instanceof HTMLCanvasElement){t=e}else{if(_canvas===undefined)_canvas=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");_canvas.width=e.width;_canvas.height=e.height;const n=_canvas.getContext("2d");if(e instanceof ImageData){n.putImageData(e,0,0)}else{n.drawImage(e,0,0,e.width,e.height)}t=_canvas}if(t.width>2048||t.height>2048){return t.toDataURL("image/jpeg",.6)}else{return t.toDataURL("image/png")}}};let textureId=0;class Texture extends EventDispatcher{constructor(e=Texture.DEFAULT_IMAGE,t=Texture.DEFAULT_MAPPING,n=ClampToEdgeWrapping,r=ClampToEdgeWrapping,i=LinearFilter,a=LinearMipmapLinearFilter,s=RGBAFormat,o=UnsignedByteType,c=1,l=LinearEncoding){super();Object.defineProperty(this,"id",{value:textureId++});this.uuid=MathUtils.generateUUID();this.name="";this.image=e;this.mipmaps=[];this.mapping=t;this.wrapS=n;this.wrapT=r;this.magFilter=i;this.minFilter=a;this.anisotropy=c;this.format=s;this.internalFormat=null;this.type=o;this.offset=new Vector2(0,0);this.repeat=new Vector2(1,1);this.center=new Vector2(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Matrix3;this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;this.encoding=l;this.version=0;this.onUpdate=null}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name;this.image=e.image;this.mipmaps=e.mipmaps.slice(0);this.mapping=e.mapping;this.wrapS=e.wrapS;this.wrapT=e.wrapT;this.magFilter=e.magFilter;this.minFilter=e.minFilter;this.anisotropy=e.anisotropy;this.format=e.format;this.internalFormat=e.internalFormat;this.type=e.type;this.offset.copy(e.offset);this.repeat.copy(e.repeat);this.center.copy(e.center);this.rotation=e.rotation;this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrix.copy(e.matrix);this.generateMipmaps=e.generateMipmaps;this.premultiplyAlpha=e.premultiplyAlpha;this.flipY=e.flipY;this.unpackAlignment=e.unpackAlignment;this.encoding=e.encoding;return this}toJSON(e){const t=e===undefined||typeof e==="string";if(!t&&e.textures[this.uuid]!==undefined){return e.textures[this.uuid]}const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==undefined){const r=this.image;if(r.uuid===undefined){r.uuid=MathUtils.generateUUID()}if(!t&&e.images[r.uuid]===undefined){let n;if(Array.isArray(r)){n=[];for(let e=0,t=r.length;e<t;e++){if(r[e].isDataTexture){n.push(serializeImage(r[e].image))}else{n.push(serializeImage(r[e]))}}}else{n=serializeImage(r)}e.images[r.uuid]={uuid:r.uuid,url:n}}n.image=r.uuid}if(!t){e.textures[this.uuid]=n}return n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==UVMapping)return e;e.applyMatrix3(this.matrix);if(e.x<0||e.x>1){switch(this.wrapS){case RepeatWrapping:e.x=e.x-Math.floor(e.x);break;case ClampToEdgeWrapping:e.x=e.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(e.x)%2)===1){e.x=Math.ceil(e.x)-e.x}else{e.x=e.x-Math.floor(e.x)}break}}if(e.y<0||e.y>1){switch(this.wrapT){case RepeatWrapping:e.y=e.y-Math.floor(e.y);break;case ClampToEdgeWrapping:e.y=e.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(e.y)%2)===1){e.y=Math.ceil(e.y)-e.y}else{e.y=e.y-Math.floor(e.y)}break}}if(this.flipY){e.y=1-e.y}return e}set needsUpdate(e){if(e===true)this.version++}}Texture.DEFAULT_IMAGE=undefined;Texture.DEFAULT_MAPPING=UVMapping;Texture.prototype.isTexture=true;function serializeImage(e){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap){return ImageUtils.getDataURL(e)}else{if(e.data){return{data:Array.prototype.slice.call(e.data),width:e.width,height:e.height,type:e.data.constructor.name}}else{console.warn("THREE.Texture: Unable to serialize Texture.");return{}}}}class Vector4{constructor(e=0,t=0,n=0,r=1){this.x=e;this.y=t;this.z=n;this.w=r}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,r){this.x=e;this.y=t;this.z=n;this.w=r;return this}setScalar(e){this.x=e;this.y=e;this.z=e;this.w=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setW(e){this.w=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;this.w=e.w!==undefined?e.w:1;return this}add(e,t){if(t!==undefined){console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");return this.addVectors(e,t)}this.x+=e.x;this.y+=e.y;this.z+=e.z;this.w+=e.w;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;this.w+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;this.w=e.w+t.w;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;this.w+=e.w*t;return this}sub(e,t){if(t!==undefined){console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");return this.subVectors(e,t)}this.x-=e.x;this.y-=e.y;this.z-=e.z;this.w-=e.w;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;this.w-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;this.w=e.w-t.w;return this}multiply(e){this.x*=e.x;this.y*=e.y;this.z*=e.z;this.w*=e.w;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;this.w*=e;return this}applyMatrix4(e){const t=this.x,n=this.y,r=this.z,i=this.w;const a=e.elements;this.x=a[0]*t+a[4]*n+a[8]*r+a[12]*i;this.y=a[1]*t+a[5]*n+a[9]*r+a[13]*i;this.z=a[2]*t+a[6]*n+a[10]*r+a[14]*i;this.w=a[3]*t+a[7]*n+a[11]*r+a[15]*i;return this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);if(t<1e-4){this.x=1;this.y=0;this.z=0}else{this.x=e.x/t;this.y=e.y/t;this.z=e.z/t}return this}setAxisAngleFromRotationMatrix(e){let t,n,r,i;const a=.01,s=.1,o=e.elements,c=o[0],l=o[4],u=o[8],h=o[1],d=o[5],f=o[9],p=o[2],m=o[6],g=o[10];if(Math.abs(l-h)<a&&Math.abs(u-p)<a&&Math.abs(f-m)<a){if(Math.abs(l+h)<s&&Math.abs(u+p)<s&&Math.abs(f+m)<s&&Math.abs(c+d+g-3)<s){this.set(1,0,0,0);return this}t=Math.PI;const y=(c+1)/2;const v=(d+1)/2;const x=(g+1)/2;const b=(l+h)/4;const M=(u+p)/4;const w=(f+m)/4;if(y>v&&y>x){if(y<a){n=0;r=.707106781;i=.707106781}else{n=Math.sqrt(y);r=b/n;i=M/n}}else if(v>x){if(v<a){n=.707106781;r=0;i=.707106781}else{r=Math.sqrt(v);n=b/r;i=w/r}}else{if(x<a){n=.707106781;r=.707106781;i=0}else{i=Math.sqrt(x);n=M/i;r=w/i}}this.set(n,r,i,t);return this}let _=Math.sqrt((m-f)*(m-f)+(u-p)*(u-p)+(h-l)*(h-l));if(Math.abs(_)<.001)_=1;this.x=(m-f)/_;this.y=(u-p)/_;this.z=(h-l)/_;this.w=Math.acos((c+d+g-1)/2);return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);this.w=Math.min(this.w,e.w);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);this.w=Math.max(this.w,e.w);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));this.w=Math.max(e.w,Math.min(t.w,this.w));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));this.w=Math.max(e,Math.min(t,this.w));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;this.w+=(e.w-this.w)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;this.w=e.w+(t.w-e.w)*n;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];this.w=e[t+3];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;e[t+3]=this.w;return e}fromBufferAttribute(e,t,n){if(n!==undefined){console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().")}this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);this.w=e.getW(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this}}Vector4.prototype.isVector4=true;class WebGLRenderTarget extends EventDispatcher{constructor(e,t,n){super();this.width=e;this.height=t;this.depth=1;this.scissor=new Vector4(0,0,e,t);this.scissorTest=false;this.viewport=new Vector4(0,0,e,t);n=n||{};this.texture=new Texture(undefined,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding);this.texture.image={};this.texture.image.width=e;this.texture.image.height=t;this.texture.image.depth=1;this.texture.generateMipmaps=n.generateMipmaps!==undefined?n.generateMipmaps:false;this.texture.minFilter=n.minFilter!==undefined?n.minFilter:LinearFilter;this.depthBuffer=n.depthBuffer!==undefined?n.depthBuffer:true;this.stencilBuffer=n.stencilBuffer!==undefined?n.stencilBuffer:false;this.depthTexture=n.depthTexture!==undefined?n.depthTexture:null}setTexture(e){e.image={width:this.width,height:this.height,depth:this.depth};this.texture=e}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e;this.height=t;this.depth=n;this.texture.image.width=e;this.texture.image.height=t;this.texture.image.depth=n;this.dispose()}this.viewport.set(0,0,e,t);this.scissor.set(0,0,e,t)}clone(){return(new this.constructor).copy(this)}copy(e){this.width=e.width;this.height=e.height;this.depth=e.depth;this.viewport.copy(e.viewport);this.texture=e.texture.clone();this.depthBuffer=e.depthBuffer;this.stencilBuffer=e.stencilBuffer;this.depthTexture=e.depthTexture;return this}dispose(){this.dispatchEvent({type:"dispose"})}}WebGLRenderTarget.prototype.isWebGLRenderTarget=true;class WebGLMultisampleRenderTarget extends WebGLRenderTarget{constructor(e,t,n){super(e,t,n);this.samples=4}copy(e){super.copy.call(this,e);this.samples=e.samples;return this}}WebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget=true;class Quaternion{constructor(e=0,t=0,n=0,r=1){this._x=e;this._y=t;this._z=n;this._w=r}static slerp(e,t,n,r){return n.copy(e).slerp(t,r)}static slerpFlat(e,t,n,r,i,a,s){let o=n[r+0],c=n[r+1],l=n[r+2],u=n[r+3];const h=i[a+0],d=i[a+1],f=i[a+2],p=i[a+3];if(s===0){e[t+0]=o;e[t+1]=c;e[t+2]=l;e[t+3]=u;return}if(s===1){e[t+0]=h;e[t+1]=d;e[t+2]=f;e[t+3]=p;return}if(u!==p||o!==h||c!==d||l!==f){let e=1-s;const m=o*h+c*d+l*f+u*p,g=m>=0?1:-1,_=1-m*m;if(_>Number.EPSILON){const v=Math.sqrt(_),x=Math.atan2(v,m*g);e=Math.sin(e*x)/v;s=Math.sin(s*x)/v}const y=s*g;o=o*e+h*y;c=c*e+d*y;l=l*e+f*y;u=u*e+p*y;if(e===1-s){const b=1/Math.sqrt(o*o+c*c+l*l+u*u);o*=b;c*=b;l*=b;u*=b}}e[t]=o;e[t+1]=c;e[t+2]=l;e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,r,i,a){const s=n[r];const o=n[r+1];const c=n[r+2];const l=n[r+3];const u=i[a];const h=i[a+1];const d=i[a+2];const f=i[a+3];e[t]=s*f+l*u+o*d-c*h;e[t+1]=o*f+l*h+c*u-s*d;e[t+2]=c*f+l*d+s*h-o*u;e[t+3]=l*f-s*u-o*h-c*d;return e}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e;this._onChangeCallback()}set(e,t,n,r){this._x=e;this._y=t;this._z=n;this._w=r;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){this._x=e.x;this._y=e.y;this._z=e.z;this._w=e.w;this._onChangeCallback();return this}setFromEuler(e,t){if(!(e&&e.isEuler)){throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.")}const n=e._x,r=e._y,i=e._z,a=e._order;const s=Math.cos;const o=Math.sin;const c=s(n/2);const l=s(r/2);const u=s(i/2);const h=o(n/2);const d=o(r/2);const f=o(i/2);switch(a){case"XYZ":this._x=h*l*u+c*d*f;this._y=c*d*u-h*l*f;this._z=c*l*f+h*d*u;this._w=c*l*u-h*d*f;break;case"YXZ":this._x=h*l*u+c*d*f;this._y=c*d*u-h*l*f;this._z=c*l*f-h*d*u;this._w=c*l*u+h*d*f;break;case"ZXY":this._x=h*l*u-c*d*f;this._y=c*d*u+h*l*f;this._z=c*l*f+h*d*u;this._w=c*l*u-h*d*f;break;case"ZYX":this._x=h*l*u-c*d*f;this._y=c*d*u+h*l*f;this._z=c*l*f-h*d*u;this._w=c*l*u+h*d*f;break;case"YZX":this._x=h*l*u+c*d*f;this._y=c*d*u+h*l*f;this._z=c*l*f-h*d*u;this._w=c*l*u-h*d*f;break;case"XZY":this._x=h*l*u-c*d*f;this._y=c*d*u-h*l*f;this._z=c*l*f+h*d*u;this._w=c*l*u+h*d*f;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}if(t!==false)this._onChangeCallback();return this}setFromAxisAngle(e,t){const n=t/2,r=Math.sin(n);this._x=e.x*r;this._y=e.y*r;this._z=e.z*r;this._w=Math.cos(n);this._onChangeCallback();return this}setFromRotationMatrix(e){const t=e.elements,n=t[0],r=t[4],i=t[8],a=t[1],s=t[5],o=t[9],c=t[2],l=t[6],u=t[10],h=n+s+u;if(h>0){const d=.5/Math.sqrt(h+1);this._w=.25/d;this._x=(l-o)*d;this._y=(i-c)*d;this._z=(a-r)*d}else if(n>s&&n>u){const d=2*Math.sqrt(1+n-s-u);this._w=(l-o)/d;this._x=.25*d;this._y=(r+a)/d;this._z=(i+c)/d}else if(s>u){const d=2*Math.sqrt(1+s-n-u);this._w=(i-c)/d;this._x=(r+a)/d;this._y=.25*d;this._z=(o+l)/d}else{const d=2*Math.sqrt(1+u-n-s);this._w=(a-r)/d;this._x=(i+c)/d;this._y=(o+l)/d;this._z=.25*d}this._onChangeCallback();return this}setFromUnitVectors(e,t){const n=1e-6;let r=e.dot(t)+1;if(r<n){r=0;if(Math.abs(e.x)>Math.abs(e.z)){this._x=-e.y;this._y=e.x;this._z=0;this._w=r}else{this._x=0;this._y=-e.z;this._z=e.y;this._w=r}}else{this._x=e.y*t.z-e.z*t.y;this._y=e.z*t.x-e.x*t.z;this._z=e.x*t.y-e.y*t.x;this._w=r}return this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(MathUtils.clamp(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const r=Math.min(1,t/n);this.slerp(e,r);return this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();if(e===0){this._x=0;this._y=0;this._z=0;this._w=1}else{e=1/e;this._x=this._x*e;this._y=this._y*e;this._z=this._z*e;this._w=this._w*e}this._onChangeCallback();return this}multiply(e,t){if(t!==undefined){console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");return this.multiplyQuaternions(e,t)}return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,r=e._y,i=e._z,a=e._w;const s=t._x,o=t._y,c=t._z,l=t._w;this._x=n*l+a*s+r*c-i*o;this._y=r*l+a*o+i*s-n*c;this._z=i*l+a*c+n*o-r*s;this._w=a*l-n*s-r*o-i*c;this._onChangeCallback();return this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,r=this._y,i=this._z,a=this._w;let s=a*e._w+n*e._x+r*e._y+i*e._z;if(s<0){this._w=-e._w;this._x=-e._x;this._y=-e._y;this._z=-e._z;s=-s}else{this.copy(e)}if(s>=1){this._w=a;this._x=n;this._y=r;this._z=i;return this}const o=1-s*s;if(o<=Number.EPSILON){const d=1-t;this._w=d*a+t*this._w;this._x=d*n+t*this._x;this._y=d*r+t*this._y;this._z=d*i+t*this._z;this.normalize();this._onChangeCallback();return this}const c=Math.sqrt(o);const l=Math.atan2(c,s);const u=Math.sin((1-t)*l)/c,h=Math.sin(t*l)/c;this._w=a*u+this._w*h;this._x=n*u+this._x*h;this._y=r*u+this._y*h;this._z=i*u+this._z*h;this._onChangeCallback();return this}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){this._x=e[t];this._y=e[t+1];this._z=e[t+2];this._w=e[t+3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._w;return e}fromBufferAttribute(e,t){this._x=e.getX(t);this._y=e.getY(t);this._z=e.getZ(t);this._w=e.getW(t);return this}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}}Quaternion.prototype.isQuaternion=true;class Vector3{constructor(e=0,t=0,n=0){this.x=e;this.y=t;this.z=n}set(e,t,n){if(n===undefined)n=this.z;this.x=e;this.y=t;this.z=n;return this}setScalar(e){this.x=e;this.y=e;this.z=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;return this}add(e,t){if(t!==undefined){console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");return this.addVectors(e,t)}this.x+=e.x;this.y+=e.y;this.z+=e.z;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;return this}sub(e,t){if(t!==undefined){console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");return this.subVectors(e,t)}this.x-=e.x;this.y-=e.y;this.z-=e.z;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;return this}multiply(e,t){if(t!==undefined){console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");return this.multiplyVectors(e,t)}this.x*=e.x;this.y*=e.y;this.z*=e.z;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;return this}multiplyVectors(e,t){this.x=e.x*t.x;this.y=e.y*t.y;this.z=e.z*t.z;return this}applyEuler(e){if(!(e&&e.isEuler)){console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.")}return this.applyQuaternion(_quaternion.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(_quaternion.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,r=this.z;const i=e.elements;this.x=i[0]*t+i[3]*n+i[6]*r;this.y=i[1]*t+i[4]*n+i[7]*r;this.z=i[2]*t+i[5]*n+i[8]*r;return this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,r=this.z;const i=e.elements;const a=1/(i[3]*t+i[7]*n+i[11]*r+i[15]);this.x=(i[0]*t+i[4]*n+i[8]*r+i[12])*a;this.y=(i[1]*t+i[5]*n+i[9]*r+i[13])*a;this.z=(i[2]*t+i[6]*n+i[10]*r+i[14])*a;return this}applyQuaternion(e){const t=this.x,n=this.y,r=this.z;const i=e.x,a=e.y,s=e.z,o=e.w;const c=o*t+a*r-s*n;const l=o*n+s*t-i*r;const u=o*r+i*n-a*t;const h=-i*t-a*n-s*r;this.x=c*o+h*-i+l*-s-u*-a;this.y=l*o+h*-a+u*-i-c*-s;this.z=u*o+h*-s+c*-a-l*-i;return this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,r=this.z;const i=e.elements;this.x=i[0]*t+i[4]*n+i[8]*r;this.y=i[1]*t+i[5]*n+i[9]*r;this.z=i[2]*t+i[6]*n+i[10]*r;return this.normalize()}divide(e){this.x/=e.x;this.y/=e.y;this.z/=e.z;return this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;return this}cross(e,t){if(t!==undefined){console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");return this.crossVectors(e,t)}return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,r=e.y,i=e.z;const a=t.x,s=t.y,o=t.z;this.x=r*o-i*s;this.y=i*a-n*o;this.z=n*s-r*a;return this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){_vector.copy(this).projectOnVector(e);return this.sub(_vector)}reflect(e){return this.sub(_vector.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(MathUtils.clamp(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,r=this.z-e.z;return t*t+n*n+r*r}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const r=Math.sin(t)*e;this.x=r*Math.sin(n);this.y=Math.cos(t)*e;this.z=r*Math.cos(n);return this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){this.x=e*Math.sin(t);this.y=n;this.z=e*Math.cos(t);return this}setFromMatrixPosition(e){const t=e.elements;this.x=t[12];this.y=t[13];this.z=t[14];return this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length();const n=this.setFromMatrixColumn(e,1).length();const r=this.setFromMatrixColumn(e,2).length();this.x=t;this.y=n;this.z=r;return this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;return e}fromBufferAttribute(e,t,n){if(n!==undefined){console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().")}this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this}}Vector3.prototype.isVector3=true;const _vector=new Vector3;const _quaternion=new Quaternion;class Box3{constructor(e=new Vector3(+Infinity,+Infinity,+Infinity),t=new Vector3(-Infinity,-Infinity,-Infinity)){this.min=e;this.max=t}set(e,t){this.min.copy(e);this.max.copy(t);return this}setFromArray(n){let r=+Infinity;let i=+Infinity;let a=+Infinity;let s=-Infinity;let o=-Infinity;let c=-Infinity;for(let e=0,t=n.length;e<t;e+=3){const l=n[e];const u=n[e+1];const h=n[e+2];if(l<r)r=l;if(u<i)i=u;if(h<a)a=h;if(l>s)s=l;if(u>o)o=u;if(h>c)c=h}this.min.set(r,i,a);this.max.set(s,o,c);return this}setFromBufferAttribute(n){let r=+Infinity;let i=+Infinity;let a=+Infinity;let s=-Infinity;let o=-Infinity;let c=-Infinity;for(let e=0,t=n.count;e<t;e++){const l=n.getX(e);const u=n.getY(e);const h=n.getZ(e);if(l<r)r=l;if(u<i)i=u;if(h<a)a=h;if(l>s)s=l;if(u>o)o=u;if(h>c)c=h}this.min.set(r,i,a);this.max.set(s,o,c);return this}setFromPoints(n){this.makeEmpty();for(let e=0,t=n.length;e<t;e++){this.expandByPoint(n[e])}return this}setFromCenterAndSize(e,t){const n=_vector$1.copy(t).multiplyScalar(.5);this.min.copy(e).sub(n);this.max.copy(e).add(n);return this}setFromObject(e){this.makeEmpty();return this.expandByObject(e)}clone(){return(new this.constructor).copy(this)}copy(e){this.min.copy(e.min);this.max.copy(e.max);return this}makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){if(e===undefined){console.warn("THREE.Box3: .getCenter() target is now required");e=new Vector3}return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){if(e===undefined){console.warn("THREE.Box3: .getSize() target is now required");e=new Vector3}return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){this.min.min(e);this.max.max(e);return this}expandByVector(e){this.min.sub(e);this.max.add(e);return this}expandByScalar(e){this.min.addScalar(-e);this.max.addScalar(e);return this}expandByObject(e){e.updateWorldMatrix(false,false);const t=e.geometry;if(t!==undefined){if(t.boundingBox===null){t.computeBoundingBox()}_box.copy(t.boundingBox);_box.applyMatrix4(e.matrixWorld);this.union(_box)}const n=e.children;for(let e=0,t=n.length;e<t;e++){this.expandByObject(n[e])}return this}containsPoint(e){return e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z?false:true}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){if(t===undefined){console.warn("THREE.Box3: .getParameter() target is now required");t=new Vector3}return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z?false:true}intersectsSphere(e){this.clampPoint(e.center,_vector$1);return _vector$1.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;if(e.normal.x>0){t=e.normal.x*this.min.x;n=e.normal.x*this.max.x}else{t=e.normal.x*this.max.x;n=e.normal.x*this.min.x}if(e.normal.y>0){t+=e.normal.y*this.min.y;n+=e.normal.y*this.max.y}else{t+=e.normal.y*this.max.y;n+=e.normal.y*this.min.y}if(e.normal.z>0){t+=e.normal.z*this.min.z;n+=e.normal.z*this.max.z}else{t+=e.normal.z*this.max.z;n+=e.normal.z*this.min.z}return t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty()){return false}this.getCenter(_center);_extents.subVectors(this.max,_center);_v0.subVectors(e.a,_center);_v1.subVectors(e.b,_center);_v2.subVectors(e.c,_center);_f0.subVectors(_v1,_v0);_f1.subVectors(_v2,_v1);_f2.subVectors(_v0,_v2);let t=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];if(!satForAxes(t,_v0,_v1,_v2,_extents)){return false}t=[1,0,0,0,1,0,0,0,1];if(!satForAxes(t,_v0,_v1,_v2,_extents)){return false}_triangleNormal.crossVectors(_f0,_f1);t=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z];return satForAxes(t,_v0,_v1,_v2,_extents)}clampPoint(e,t){if(t===undefined){console.warn("THREE.Box3: .clampPoint() target is now required");t=new Vector3}return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){const t=_vector$1.copy(e).clamp(this.min,this.max);return t.sub(e).length()}getBoundingSphere(e){if(e===undefined){console.error("THREE.Box3: .getBoundingSphere() target is now required")}this.getCenter(e.center);e.radius=this.getSize(_vector$1).length()*.5;return e}intersect(e){this.min.max(e.min);this.max.min(e.max);if(this.isEmpty())this.makeEmpty();return this}union(e){this.min.min(e.min);this.max.max(e.max);return this}applyMatrix4(e){if(this.isEmpty())return this;_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e);_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e);_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e);_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e);_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e);_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e);_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e);_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e);this.setFromPoints(_points);return this}translate(e){this.min.add(e);this.max.add(e);return this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}Box3.prototype.isBox3=true;const _points=[new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3];const _vector$1=new Vector3;const _box=new Box3;const _v0=new Vector3;const _v1=new Vector3;const _v2=new Vector3;const _f0=new Vector3;const _f1=new Vector3;const _f2=new Vector3;const _center=new Vector3;const _extents=new Vector3;const _triangleNormal=new Vector3;const _testAxis=new Vector3;function satForAxes(n,r,i,a,s){for(let e=0,t=n.length-3;e<=t;e+=3){_testAxis.fromArray(n,e);const o=s.x*Math.abs(_testAxis.x)+s.y*Math.abs(_testAxis.y)+s.z*Math.abs(_testAxis.z);const c=r.dot(_testAxis);const l=i.dot(_testAxis);const u=a.dot(_testAxis);if(Math.max(-Math.max(c,l,u),Math.min(c,l,u))>o){return false}}return true}const _box$1=new Box3;class Sphere{constructor(e=new Vector3,t=-1){this.center=e;this.radius=t}set(e,t){this.center.copy(e);this.radius=t;return this}setFromPoints(n,e){const r=this.center;if(e!==undefined){r.copy(e)}else{_box$1.setFromPoints(n).getCenter(r)}let i=0;for(let e=0,t=n.length;e<t;e++){i=Math.max(i,r.distanceToSquared(n[e]))}this.radius=Math.sqrt(i);return this}copy(e){this.center.copy(e.center);this.radius=e.radius;return this}isEmpty(){return this.radius<0}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);if(t===undefined){console.warn("THREE.Sphere: .clampPoint() target is now required");t=new Vector3}t.copy(e);if(n>this.radius*this.radius){t.sub(this.center).normalize();t.multiplyScalar(this.radius).add(this.center)}return t}getBoundingBox(e){if(e===undefined){console.warn("THREE.Sphere: .getBoundingBox() target is now required");e=new Box3}if(this.isEmpty()){e.makeEmpty();return e}e.set(this.center,this.center);e.expandByScalar(this.radius);return e}applyMatrix4(e){this.center.applyMatrix4(e);this.radius=this.radius*e.getMaxScaleOnAxis();return this}translate(e){this.center.add(e);return this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const _vector$2=new Vector3;const _segCenter=new Vector3;const _segDir=new Vector3;const _diff=new Vector3;const _edge1=new Vector3;const _edge2=new Vector3;const _normal=new Vector3;class Ray{constructor(e=new Vector3,t=new Vector3(0,0,-1)){this.origin=e;this.direction=t}set(e,t){this.origin.copy(e);this.direction.copy(t);return this}copy(e){this.origin.copy(e.origin);this.direction.copy(e.direction);return this}at(e,t){if(t===undefined){console.warn("THREE.Ray: .at() target is now required");t=new Vector3}return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){this.direction.copy(e).sub(this.origin).normalize();return this}recast(e){this.origin.copy(this.at(e,_vector$2));return this}closestPointToPoint(e,t){if(t===undefined){console.warn("THREE.Ray: .closestPointToPoint() target is now required");t=new Vector3}t.subVectors(e,this.origin);const n=t.dot(this.direction);if(n<0){return t.copy(this.origin)}return t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=_vector$2.subVectors(e,this.origin).dot(this.direction);if(t<0){return this.origin.distanceToSquared(e)}_vector$2.copy(this.direction).multiplyScalar(t).add(this.origin);return _vector$2.distanceToSquared(e)}distanceSqToSegment(e,t,n,r){_segCenter.copy(e).add(t).multiplyScalar(.5);_segDir.copy(t).sub(e).normalize();_diff.copy(this.origin).sub(_segCenter);const i=e.distanceTo(t)*.5;const a=-this.direction.dot(_segDir);const s=_diff.dot(this.direction);const o=-_diff.dot(_segDir);const c=_diff.lengthSq();const l=Math.abs(1-a*a);let u,h,d,f;if(l>0){u=a*o-s;h=a*s-o;f=i*l;if(u>=0){if(h>=-f){if(h<=f){const p=1/l;u*=p;h*=p;d=u*(u+a*h+2*s)+h*(a*u+h+2*o)+c}else{h=i;u=Math.max(0,-(a*h+s));d=-u*u+h*(h+2*o)+c}}else{h=-i;u=Math.max(0,-(a*h+s));d=-u*u+h*(h+2*o)+c}}else{if(h<=-f){u=Math.max(0,-(-a*i+s));h=u>0?-i:Math.min(Math.max(-i,-o),i);d=-u*u+h*(h+2*o)+c}else if(h<=f){u=0;h=Math.min(Math.max(-i,-o),i);d=h*(h+2*o)+c}else{u=Math.max(0,-(a*i+s));h=u>0?i:Math.min(Math.max(-i,-o),i);d=-u*u+h*(h+2*o)+c}}}else{h=a>0?-i:i;u=Math.max(0,-(a*h+s));d=-u*u+h*(h+2*o)+c}if(n){n.copy(this.direction).multiplyScalar(u).add(this.origin)}if(r){r.copy(_segDir).multiplyScalar(h).add(_segCenter)}return d}intersectSphere(e,t){_vector$2.subVectors(e.center,this.origin);const n=_vector$2.dot(this.direction);const r=_vector$2.dot(_vector$2)-n*n;const i=e.radius*e.radius;if(r>i)return null;const a=Math.sqrt(i-r);const s=n-a;const o=n+a;if(s<0&&o<0)return null;if(s<0)return this.at(o,t);return this.at(s,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0){if(e.distanceToPoint(this.origin)===0){return 0}return null}const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);if(n===null){return null}return this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0){return true}const n=e.normal.dot(this.direction);if(n*t<0){return true}return false}intersectBox(e,t){let n,r,i,a,s,o;const c=1/this.direction.x,l=1/this.direction.y,u=1/this.direction.z;const h=this.origin;if(c>=0){n=(e.min.x-h.x)*c;r=(e.max.x-h.x)*c}else{n=(e.max.x-h.x)*c;r=(e.min.x-h.x)*c}if(l>=0){i=(e.min.y-h.y)*l;a=(e.max.y-h.y)*l}else{i=(e.max.y-h.y)*l;a=(e.min.y-h.y)*l}if(n>a||i>r)return null;if(i>n||n!==n)n=i;if(a<r||r!==r)r=a;if(u>=0){s=(e.min.z-h.z)*u;o=(e.max.z-h.z)*u}else{s=(e.max.z-h.z)*u;o=(e.min.z-h.z)*u}if(n>o||s>r)return null;if(s>n||n!==n)n=s;if(o<r||r!==r)r=o;if(r<0)return null;return this.at(n>=0?n:r,t)}intersectsBox(e){return this.intersectBox(e,_vector$2)!==null}intersectTriangle(e,t,n,r,i){_edge1.subVectors(t,e);_edge2.subVectors(n,e);_normal.crossVectors(_edge1,_edge2);let a=this.direction.dot(_normal);let s;if(a>0){if(r)return null;s=1}else if(a<0){s=-1;a=-a}else{return null}_diff.subVectors(this.origin,e);const o=s*this.direction.dot(_edge2.crossVectors(_diff,_edge2));if(o<0){return null}const c=s*this.direction.dot(_edge1.cross(_diff));if(c<0){return null}if(o+c>a){return null}const l=-s*_diff.dot(_normal);if(l<0){return null}return this.at(l/a,i)}applyMatrix4(e){this.origin.applyMatrix4(e);this.direction.transformDirection(e);return this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Matrix4{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(arguments.length>0){console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}}set(e,t,n,r,i,a,s,o,c,l,u,h,d,f,p,m){const g=this.elements;g[0]=e;g[4]=t;g[8]=n;g[12]=r;g[1]=i;g[5]=a;g[9]=s;g[13]=o;g[2]=c;g[6]=l;g[10]=u;g[14]=h;g[3]=d;g[7]=f;g[11]=p;g[15]=m;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}clone(){return(new Matrix4).fromArray(this.elements)}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];t[9]=n[9];t[10]=n[10];t[11]=n[11];t[12]=n[12];t[13]=n[13];t[14]=n[14];t[15]=n[15];return this}copyPosition(e){const t=this.elements,n=e.elements;t[12]=n[12];t[13]=n[13];t[14]=n[14];return this}setFromMatrix3(e){const t=e.elements;this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1);return this}extractBasis(e,t,n){e.setFromMatrixColumn(this,0);t.setFromMatrixColumn(this,1);n.setFromMatrixColumn(this,2);return this}makeBasis(e,t,n){this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1);return this}extractRotation(e){const t=this.elements;const n=e.elements;const r=1/_v1$1.setFromMatrixColumn(e,0).length();const i=1/_v1$1.setFromMatrixColumn(e,1).length();const a=1/_v1$1.setFromMatrixColumn(e,2).length();t[0]=n[0]*r;t[1]=n[1]*r;t[2]=n[2]*r;t[3]=0;t[4]=n[4]*i;t[5]=n[5]*i;t[6]=n[6]*i;t[7]=0;t[8]=n[8]*a;t[9]=n[9]*a;t[10]=n[10]*a;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromEuler(e){if(!(e&&e.isEuler)){console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.")}const t=this.elements;const n=e.x,r=e.y,i=e.z;const a=Math.cos(n),s=Math.sin(n);const o=Math.cos(r),c=Math.sin(r);const l=Math.cos(i),u=Math.sin(i);if(e.order==="XYZ"){const h=a*l,d=a*u,f=s*l,p=s*u;t[0]=o*l;t[4]=-o*u;t[8]=c;t[1]=d+f*c;t[5]=h-p*c;t[9]=-s*o;t[2]=p-h*c;t[6]=f+d*c;t[10]=a*o}else if(e.order==="YXZ"){const m=o*l,g=o*u,_=c*l,y=c*u;t[0]=m+y*s;t[4]=_*s-g;t[8]=a*c;t[1]=a*u;t[5]=a*l;t[9]=-s;t[2]=g*s-_;t[6]=y+m*s;t[10]=a*o}else if(e.order==="ZXY"){const m=o*l,g=o*u,_=c*l,y=c*u;t[0]=m-y*s;t[4]=-a*u;t[8]=_+g*s;t[1]=g+_*s;t[5]=a*l;t[9]=y-m*s;t[2]=-a*c;t[6]=s;t[10]=a*o}else if(e.order==="ZYX"){const h=a*l,d=a*u,f=s*l,p=s*u;t[0]=o*l;t[4]=f*c-d;t[8]=h*c+p;t[1]=o*u;t[5]=p*c+h;t[9]=d*c-f;t[2]=-c;t[6]=s*o;t[10]=a*o}else if(e.order==="YZX"){const v=a*o,x=a*c,b=s*o,M=s*c;t[0]=o*l;t[4]=M-v*u;t[8]=b*u+x;t[1]=u;t[5]=a*l;t[9]=-s*l;t[2]=-c*l;t[6]=x*u+b;t[10]=v-M*u}else if(e.order==="XZY"){const v=a*o,x=a*c,b=s*o,M=s*c;t[0]=o*l;t[4]=-u;t[8]=c*l;t[1]=v*u+M;t[5]=a*l;t[9]=x*u-b;t[2]=b*u-x;t[6]=s*l;t[10]=M*u+v}t[3]=0;t[7]=0;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromQuaternion(e){return this.compose(_zero,e,_one)}lookAt(e,t,n){const r=this.elements;_z.subVectors(e,t);if(_z.lengthSq()===0){_z.z=1}_z.normalize();_x.crossVectors(n,_z);if(_x.lengthSq()===0){if(Math.abs(n.z)===1){_z.x+=1e-4}else{_z.z+=1e-4}_z.normalize();_x.crossVectors(n,_z)}_x.normalize();_y.crossVectors(_z,_x);r[0]=_x.x;r[4]=_y.x;r[8]=_z.x;r[1]=_x.y;r[5]=_y.y;r[9]=_z.y;r[2]=_x.z;r[6]=_y.z;r[10]=_z.z;return this}multiply(e,t){if(t!==undefined){console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");return this.multiplyMatrices(e,t)}return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,F){const t=e.elements;const n=F.elements;const r=this.elements;const i=t[0],a=t[4],s=t[8],o=t[12];const c=t[1],l=t[5],u=t[9],h=t[13];const d=t[2],f=t[6],p=t[10],m=t[14];const g=t[3],_=t[7],y=t[11],v=t[15];const x=n[0],b=n[4],M=n[8],w=n[12];const S=n[1],T=n[5],E=n[9],A=n[13];const L=n[2],C=n[6],R=n[10],P=n[14];const B=n[3],D=n[7],I=n[11],G=n[15];r[0]=i*x+a*S+s*L+o*B;r[4]=i*b+a*T+s*C+o*D;r[8]=i*M+a*E+s*R+o*I;r[12]=i*w+a*A+s*P+o*G;r[1]=c*x+l*S+u*L+h*B;r[5]=c*b+l*T+u*C+h*D;r[9]=c*M+l*E+u*R+h*I;r[13]=c*w+l*A+u*P+h*G;r[2]=d*x+f*S+p*L+m*B;r[6]=d*b+f*T+p*C+m*D;r[10]=d*M+f*E+p*R+m*I;r[14]=d*w+f*A+p*P+m*G;r[3]=g*x+_*S+y*L+v*B;r[7]=g*b+_*T+y*C+v*D;r[11]=g*M+_*E+y*R+v*I;r[15]=g*w+_*A+y*P+v*G;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[4]*=e;t[8]*=e;t[12]*=e;t[1]*=e;t[5]*=e;t[9]*=e;t[13]*=e;t[2]*=e;t[6]*=e;t[10]*=e;t[14]*=e;t[3]*=e;t[7]*=e;t[11]*=e;t[15]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[4],r=e[8],i=e[12];const a=e[1],s=e[5],o=e[9],c=e[13];const l=e[2],u=e[6],h=e[10],d=e[14];const f=e[3],p=e[7],m=e[11],g=e[15];return f*(+i*o*u-r*c*u-i*s*h+n*c*h+r*s*d-n*o*d)+p*(+t*o*d-t*c*h+i*a*h-r*a*d+r*c*l-i*o*l)+m*(+t*c*u-t*s*d-i*a*u+n*a*d+i*s*l-n*c*l)+g*(-r*s*l-t*o*u+t*s*h+r*a*u-n*a*h+n*o*l)}transpose(){const e=this.elements;let t;t=e[1];e[1]=e[4];e[4]=t;t=e[2];e[2]=e[8];e[8]=t;t=e[6];e[6]=e[9];e[9]=t;t=e[3];e[3]=e[12];e[12]=t;t=e[7];e[7]=e[13];e[13]=t;t=e[11];e[11]=e[14];e[14]=t;return this}setPosition(e,t,n){const r=this.elements;if(e.isVector3){r[12]=e.x;r[13]=e.y;r[14]=e.z}else{r[12]=e;r[13]=t;r[14]=n}return this}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],i=e[3],a=e[4],s=e[5],o=e[6],c=e[7],l=e[8],u=e[9],h=e[10],d=e[11],f=e[12],p=e[13],m=e[14],g=e[15],_=u*m*c-p*h*c+p*o*d-s*m*d-u*o*g+s*h*g,y=f*h*c-l*m*c-f*o*d+a*m*d+l*o*g-a*h*g,v=l*p*c-f*u*c+f*s*d-a*p*d-l*s*g+a*u*g,x=f*u*o-l*p*o-f*s*h+a*p*h+l*s*m-a*u*m;const b=t*_+n*y+r*v+i*x;if(b===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const M=1/b;e[0]=_*M;e[1]=(p*h*i-u*m*i-p*r*d+n*m*d+u*r*g-n*h*g)*M;e[2]=(s*m*i-p*o*i+p*r*c-n*m*c-s*r*g+n*o*g)*M;e[3]=(u*o*i-s*h*i-u*r*c+n*h*c+s*r*d-n*o*d)*M;e[4]=y*M;e[5]=(l*m*i-f*h*i+f*r*d-t*m*d-l*r*g+t*h*g)*M;e[6]=(f*o*i-a*m*i-f*r*c+t*m*c+a*r*g-t*o*g)*M;e[7]=(a*h*i-l*o*i+l*r*c-t*h*c-a*r*d+t*o*d)*M;e[8]=v*M;e[9]=(f*u*i-l*p*i-f*n*d+t*p*d+l*n*g-t*u*g)*M;e[10]=(a*p*i-f*s*i+f*n*c-t*p*c-a*n*g+t*s*g)*M;e[11]=(l*s*i-a*u*i-l*n*c+t*u*c+a*n*d-t*s*d)*M;e[12]=x*M;e[13]=(l*p*r-f*u*r+f*n*h-t*p*h-l*n*m+t*u*m)*M;e[14]=(f*s*r-a*p*r-f*n*o+t*p*o+a*n*m-t*s*m)*M;e[15]=(a*u*r-l*s*r+l*n*o-t*u*o-a*n*h+t*s*h)*M;return this}scale(e){const t=this.elements;const n=e.x,r=e.y,i=e.z;t[0]*=n;t[4]*=r;t[8]*=i;t[1]*=n;t[5]*=r;t[9]*=i;t[2]*=n;t[6]*=r;t[10]*=i;t[3]*=n;t[7]*=r;t[11]*=i;return this}getMaxScaleOnAxis(){const e=this.elements;const t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];const n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6];const r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,r))}makeTranslation(e,t,n){this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1);return this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1);return this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1);return this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1);return this}makeRotationAxis(e,t){const n=Math.cos(t);const r=Math.sin(t);const i=1-n;const a=e.x,s=e.y,o=e.z;const c=i*a,l=i*s;this.set(c*a+n,c*s-r*o,c*o+r*s,0,c*s+r*o,l*s+n,l*o-r*a,0,c*o-r*s,l*o+r*a,i*o*o+n,0,0,0,0,1);return this}makeScale(e,t,n){this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1);return this}makeShear(e,t,n){this.set(1,t,n,0,e,1,n,0,e,t,1,0,0,0,0,1);return this}compose(e,t,n){const r=this.elements;const i=t._x,a=t._y,s=t._z,o=t._w;const c=i+i,l=a+a,u=s+s;const h=i*c,d=i*l,f=i*u;const p=a*l,m=a*u,g=s*u;const _=o*c,y=o*l,v=o*u;const x=n.x,b=n.y,M=n.z;r[0]=(1-(p+g))*x;r[1]=(d+v)*x;r[2]=(f-y)*x;r[3]=0;r[4]=(d-v)*b;r[5]=(1-(h+g))*b;r[6]=(m+_)*b;r[7]=0;r[8]=(f+y)*M;r[9]=(m-_)*M;r[10]=(1-(h+p))*M;r[11]=0;r[12]=e.x;r[13]=e.y;r[14]=e.z;r[15]=1;return this}decompose(e,t,n){const r=this.elements;let i=_v1$1.set(r[0],r[1],r[2]).length();const a=_v1$1.set(r[4],r[5],r[6]).length();const s=_v1$1.set(r[8],r[9],r[10]).length();const o=this.determinant();if(o<0)i=-i;e.x=r[12];e.y=r[13];e.z=r[14];_m1.copy(this);const c=1/i;const l=1/a;const u=1/s;_m1.elements[0]*=c;_m1.elements[1]*=c;_m1.elements[2]*=c;_m1.elements[4]*=l;_m1.elements[5]*=l;_m1.elements[6]*=l;_m1.elements[8]*=u;_m1.elements[9]*=u;_m1.elements[10]*=u;t.setFromRotationMatrix(_m1);n.x=i;n.y=a;n.z=s;return this}makePerspective(e,t,n,r,i,a){if(a===undefined){console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.")}const s=this.elements;const o=2*i/(t-e);const c=2*i/(n-r);const l=(t+e)/(t-e);const u=(n+r)/(n-r);const h=-(a+i)/(a-i);const d=-2*a*i/(a-i);s[0]=o;s[4]=0;s[8]=l;s[12]=0;s[1]=0;s[5]=c;s[9]=u;s[13]=0;s[2]=0;s[6]=0;s[10]=h;s[14]=d;s[3]=0;s[7]=0;s[11]=-1;s[15]=0;return this}makeOrthographic(e,t,n,r,i,a){const s=this.elements;const o=1/(t-e);const c=1/(n-r);const l=1/(a-i);const u=(t+e)*o;const h=(n+r)*c;const d=(a+i)*l;s[0]=2*o;s[4]=0;s[8]=0;s[12]=-u;s[1]=0;s[5]=2*c;s[9]=0;s[13]=-h;s[2]=0;s[6]=0;s[10]=-2*l;s[14]=-d;s[3]=0;s[7]=0;s[11]=0;s[15]=1;return this}equals(e){const t=this.elements;const n=e.elements;for(let e=0;e<16;e++){if(t[e]!==n[e])return false}return true}fromArray(t,n=0){for(let e=0;e<16;e++){this.elements[e]=t[e+n]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];e[t+9]=n[9];e[t+10]=n[10];e[t+11]=n[11];e[t+12]=n[12];e[t+13]=n[13];e[t+14]=n[14];e[t+15]=n[15];return e}}Matrix4.prototype.isMatrix4=true;const _v1$1=new Vector3;const _m1=new Matrix4;const _zero=new Vector3(0,0,0);const _one=new Vector3(1,1,1);const _x=new Vector3;const _y=new Vector3;const _z=new Vector3;const _matrix=new Matrix4;const _quaternion$1=new Quaternion;class Euler{constructor(e=0,t=0,n=0,r=Euler.DefaultOrder){this._x=e;this._y=t;this._z=n;this._order=r}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e;this._onChangeCallback()}set(e,t,n,r){this._x=e;this._y=t;this._z=n;this._order=r||this._order;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){this._x=e._x;this._y=e._y;this._z=e._z;this._order=e._order;this._onChangeCallback();return this}setFromRotationMatrix(e,t,n){const r=MathUtils.clamp;const i=e.elements;const a=i[0],s=i[4],o=i[8];const c=i[1],l=i[5],u=i[9];const h=i[2],d=i[6],f=i[10];t=t||this._order;switch(t){case"XYZ":this._y=Math.asin(r(o,-1,1));if(Math.abs(o)<.9999999){this._x=Math.atan2(-u,f);this._z=Math.atan2(-s,a)}else{this._x=Math.atan2(d,l);this._z=0}break;case"YXZ":this._x=Math.asin(-r(u,-1,1));if(Math.abs(u)<.9999999){this._y=Math.atan2(o,f);this._z=Math.atan2(c,l)}else{this._y=Math.atan2(-h,a);this._z=0}break;case"ZXY":this._x=Math.asin(r(d,-1,1));if(Math.abs(d)<.9999999){this._y=Math.atan2(-h,f);this._z=Math.atan2(-s,l)}else{this._y=0;this._z=Math.atan2(c,a)}break;case"ZYX":this._y=Math.asin(-r(h,-1,1));if(Math.abs(h)<.9999999){this._x=Math.atan2(d,f);this._z=Math.atan2(c,a)}else{this._x=0;this._z=Math.atan2(-s,l)}break;case"YZX":this._z=Math.asin(r(c,-1,1));if(Math.abs(c)<.9999999){this._x=Math.atan2(-u,l);this._y=Math.atan2(-h,a)}else{this._x=0;this._y=Math.atan2(o,f)}break;case"XZY":this._z=Math.asin(-r(s,-1,1));if(Math.abs(s)<.9999999){this._x=Math.atan2(d,l);this._y=Math.atan2(o,a)}else{this._x=Math.atan2(-u,f);this._y=0}break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}this._order=t;if(n!==false)this._onChangeCallback();return this}setFromQuaternion(e,t,n){_matrix.makeRotationFromQuaternion(e);return this.setFromRotationMatrix(_matrix,t,n)}setFromVector3(e,t){return this.set(e.x,e.y,e.z,t||this._order)}reorder(e){_quaternion$1.setFromEuler(this);return this.setFromQuaternion(_quaternion$1,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){this._x=e[0];this._y=e[1];this._z=e[2];if(e[3]!==undefined)this._order=e[3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._order;return e}toVector3(e){if(e){return e.set(this._x,this._y,this._z)}else{return new Vector3(this._x,this._y,this._z)}}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}}Euler.prototype.isEuler=true;Euler.DefaultOrder="XYZ";Euler.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Layers{constructor(){this.mask=1|0}set(e){this.mask=1<<e|0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}}let _object3DId=0;const _v1$2=new Vector3;const _q1=new Quaternion;const _m1$1=new Matrix4;const _target=new Vector3;const _position=new Vector3;const _scale=new Vector3;const _quaternion$2=new Quaternion;const _xAxis=new Vector3(1,0,0);const _yAxis=new Vector3(0,1,0);const _zAxis=new Vector3(0,0,1);const _addedEvent={type:"added"};const _removedEvent={type:"removed"};function Object3D(){Object.defineProperty(this,"id",{value:_object3DId++});this.uuid=MathUtils.generateUUID();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=Object3D.DefaultUp.clone();const e=new Vector3;const t=new Euler;const n=new Quaternion;const r=new Vector3(1,1,1);function i(){n.setFromEuler(t,false)}function a(){t.setFromQuaternion(n,undefined,false)}t._onChange(i);n._onChange(a);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:e},rotation:{configurable:true,enumerable:true,value:t},quaternion:{configurable:true,enumerable:true,value:n},scale:{configurable:true,enumerable:true,value:r},modelViewMatrix:{value:new Matrix4},normalMatrix:{value:new Matrix3}});this.matrix=new Matrix4;this.matrixWorld=new Matrix4;this.matrixAutoUpdate=Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=false;this.layers=new Layers;this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.animations=[];this.userData={}}Object3D.DefaultUp=new Vector3(0,1,0);Object3D.DefaultMatrixAutoUpdate=true;Object3D.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Object3D,isObject3D:true,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix4:function(e){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(e);this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){this.quaternion.premultiply(e);return this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,true)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(e,t){_q1.setFromAxisAngle(e,t);this.quaternion.multiply(_q1);return this},rotateOnWorldAxis:function(e,t){_q1.setFromAxisAngle(e,t);this.quaternion.premultiply(_q1);return this},rotateX:function(e){return this.rotateOnAxis(_xAxis,e)},rotateY:function(e){return this.rotateOnAxis(_yAxis,e)},rotateZ:function(e){return this.rotateOnAxis(_zAxis,e)},translateOnAxis:function(e,t){_v1$2.copy(e).applyQuaternion(this.quaternion);this.position.add(_v1$2.multiplyScalar(t));return this},translateX:function(e){return this.translateOnAxis(_xAxis,e)},translateY:function(e){return this.translateOnAxis(_yAxis,e)},translateZ:function(e){return this.translateOnAxis(_zAxis,e)},localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(e){return e.applyMatrix4(_m1$1.copy(this.matrixWorld).invert())},lookAt:function(e,t,n){if(e.isVector3){_target.copy(e)}else{_target.set(e,t,n)}const r=this.parent;this.updateWorldMatrix(true,false);_position.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){_m1$1.lookAt(_position,_target,this.up)}else{_m1$1.lookAt(_target,_position,this.up)}this.quaternion.setFromRotationMatrix(_m1$1);if(r){_m1$1.extractRotation(r.matrixWorld);_q1.setFromRotationMatrix(_m1$1);this.quaternion.premultiply(_q1.invert())}},add:function(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++){this.add(arguments[e])}return this}if(e===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",e);return this}if(e&&e.isObject3D){if(e.parent!==null){e.parent.remove(e)}e.parent=this;this.children.push(e);e.dispatchEvent(_addedEvent)}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e)}return this},remove:function(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++){this.remove(arguments[e])}return this}const t=this.children.indexOf(e);if(t!==-1){e.parent=null;this.children.splice(t,1);e.dispatchEvent(_removedEvent)}return this},clear:function(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null;t.dispatchEvent(_removedEvent)}this.children.length=0;return this},attach:function(e){this.updateWorldMatrix(true,false);_m1$1.copy(this.matrixWorld).invert();if(e.parent!==null){e.parent.updateWorldMatrix(true,false);_m1$1.multiply(e.parent.matrixWorld)}e.applyMatrix4(_m1$1);this.add(e);e.updateWorldMatrix(false,true);return this},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(n,r){if(this[n]===r)return this;for(let e=0,t=this.children.length;e<t;e++){const i=this.children[e];const a=i.getObjectByProperty(n,r);if(a!==undefined){return a}}return undefined},getWorldPosition:function(e){if(e===undefined){console.warn("THREE.Object3D: .getWorldPosition() target is now required");e=new Vector3}this.updateWorldMatrix(true,false);return e.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(e){if(e===undefined){console.warn("THREE.Object3D: .getWorldQuaternion() target is now required");e=new Quaternion}this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position,e,_scale);return e},getWorldScale:function(e){if(e===undefined){console.warn("THREE.Object3D: .getWorldScale() target is now required");e=new Vector3}this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position,_quaternion$2,e);return e},getWorldDirection:function(e){if(e===undefined){console.warn("THREE.Object3D: .getWorldDirection() target is now required");e=new Vector3}this.updateWorldMatrix(true,false);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(n){n(this);const r=this.children;for(let e=0,t=r.length;e<t;e++){r[e].traverse(n)}},traverseVisible:function(n){if(this.visible===false)return;n(this);const r=this.children;for(let e=0,t=r.length;e<t;e++){r[e].traverseVisible(n)}},traverseAncestors:function(e){const t=this.parent;if(t!==null){e(t);t.traverseAncestors(e)}},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true},updateMatrixWorld:function(n){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||n){if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}this.matrixWorldNeedsUpdate=false;n=true}const r=this.children;for(let e=0,t=r.length;e<t;e++){r[e].updateMatrixWorld(n)}},updateWorldMatrix:function(e,t){const n=this.parent;if(e===true&&n!==null){n.updateWorldMatrix(true,false)}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}if(t===true){const r=this.children;for(let e=0,t=r.length;e<t;e++){r[e].updateWorldMatrix(false,true)}}},toJSON:function(n){const e=n===undefined||typeof n==="string";const t={};if(e){n={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}};t.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"}}const r={};r.uuid=this.uuid;r.type=this.type;if(this.name!=="")r.name=this.name;if(this.castShadow===true)r.castShadow=true;if(this.receiveShadow===true)r.receiveShadow=true;if(this.visible===false)r.visible=false;if(this.frustumCulled===false)r.frustumCulled=false;if(this.renderOrder!==0)r.renderOrder=this.renderOrder;if(JSON.stringify(this.userData)!=="{}")r.userData=this.userData;r.layers=this.layers.mask;r.matrix=this.matrix.toArray();if(this.matrixAutoUpdate===false)r.matrixAutoUpdate=false;if(this.isInstancedMesh){r.type="InstancedMesh";r.count=this.count;r.instanceMatrix=this.instanceMatrix.toJSON()}function i(e,t){if(e[t.uuid]===undefined){e[t.uuid]=t.toJSON(n)}return t.uuid}if(this.isMesh||this.isLine||this.isPoints){r.geometry=i(n.geometries,this.geometry);const s=this.geometry.parameters;if(s!==undefined&&s.shapes!==undefined){const o=s.shapes;if(Array.isArray(o)){for(let e=0,t=o.length;e<t;e++){const c=o[e];i(n.shapes,c)}}else{i(n.shapes,o)}}}if(this.isSkinnedMesh){r.bindMode=this.bindMode;r.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==undefined){i(n.skeletons,this.skeleton);r.skeleton=this.skeleton.uuid}}if(this.material!==undefined){if(Array.isArray(this.material)){const l=[];for(let e=0,t=this.material.length;e<t;e++){l.push(i(n.materials,this.material[e]))}r.material=l}else{r.material=i(n.materials,this.material)}}if(this.children.length>0){r.children=[];for(let e=0;e<this.children.length;e++){r.children.push(this.children[e].toJSON(n).object)}}if(this.animations.length>0){r.animations=[];for(let e=0;e<this.animations.length;e++){const u=this.animations[e];r.animations.push(i(n.animations,u))}}if(e){const h=a(n.geometries);const d=a(n.materials);const f=a(n.textures);const p=a(n.images);const o=a(n.shapes);const m=a(n.skeletons);const g=a(n.animations);if(h.length>0)t.geometries=h;if(d.length>0)t.materials=d;if(f.length>0)t.textures=f;if(p.length>0)t.images=p;if(o.length>0)t.shapes=o;if(m.length>0)t.skeletons=m;if(g.length>0)t.animations=g}t.object=r;return t;function a(e){const t=[];for(const n in e){const r=e[n];delete r.metadata;t.push(r)}return t}},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(t,e=true){this.name=t.name;this.up.copy(t.up);this.position.copy(t.position);this.rotation.order=t.rotation.order;this.quaternion.copy(t.quaternion);this.scale.copy(t.scale);this.matrix.copy(t.matrix);this.matrixWorld.copy(t.matrixWorld);this.matrixAutoUpdate=t.matrixAutoUpdate;this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate;this.layers.mask=t.layers.mask;this.visible=t.visible;this.castShadow=t.castShadow;this.receiveShadow=t.receiveShadow;this.frustumCulled=t.frustumCulled;this.renderOrder=t.renderOrder;this.userData=JSON.parse(JSON.stringify(t.userData));if(e===true){for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}}return this}});const _vector1=new Vector3;const _vector2=new Vector3;const _normalMatrix=new Matrix3;class Plane{constructor(e=new Vector3(1,0,0),t=0){this.normal=e;this.constant=t}set(e,t){this.normal.copy(e);this.constant=t;return this}setComponents(e,t,n,r){this.normal.set(e,t,n);this.constant=r;return this}setFromNormalAndCoplanarPoint(e,t){this.normal.copy(e);this.constant=-t.dot(this.normal);return this}setFromCoplanarPoints(e,t,n){const r=_vector1.subVectors(n,t).cross(_vector2.subVectors(e,t)).normalize();this.setFromNormalAndCoplanarPoint(r,e);return this}copy(e){this.normal.copy(e.normal);this.constant=e.constant;return this}normalize(){const e=1/this.normal.length();this.normal.multiplyScalar(e);this.constant*=e;return this}negate(){this.constant*=-1;this.normal.negate();return this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){if(t===undefined){console.warn("THREE.Plane: .projectPoint() target is now required");t=new Vector3}return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){if(t===undefined){console.warn("THREE.Plane: .intersectLine() target is now required");t=new Vector3}const n=e.delta(_vector1);const r=this.normal.dot(n);if(r===0){if(this.distanceToPoint(e.start)===0){return t.copy(e.start)}return undefined}const i=-(e.start.dot(this.normal)+this.constant)/r;if(i<0||i>1){return undefined}return t.copy(n).multiplyScalar(i).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start);const n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){if(e===undefined){console.warn("THREE.Plane: .coplanarPoint() target is now required");e=new Vector3}return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||_normalMatrix.getNormalMatrix(e);const r=this.coplanarPoint(_vector1).applyMatrix4(e);const i=this.normal.applyMatrix3(n).normalize();this.constant=-r.dot(i);return this}translate(e){this.constant-=e.dot(this.normal);return this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return(new this.constructor).copy(this)}}Plane.prototype.isPlane=true;const _v0$1=new Vector3;const _v1$3=new Vector3;const _v2$1=new Vector3;const _v3=new Vector3;const _vab=new Vector3;const _vac=new Vector3;const _vbc=new Vector3;const _vap=new Vector3;const _vbp=new Vector3;const _vcp=new Vector3;class Triangle{constructor(e=new Vector3,t=new Vector3,n=new Vector3){this.a=e;this.b=t;this.c=n}static getNormal(e,t,n,r){if(r===undefined){console.warn("THREE.Triangle: .getNormal() target is now required");r=new Vector3}r.subVectors(n,t);_v0$1.subVectors(e,t);r.cross(_v0$1);const i=r.lengthSq();if(i>0){return r.multiplyScalar(1/Math.sqrt(i))}return r.set(0,0,0)}static getBarycoord(e,t,n,r,i){_v0$1.subVectors(r,t);_v1$3.subVectors(n,t);_v2$1.subVectors(e,t);const a=_v0$1.dot(_v0$1);const s=_v0$1.dot(_v1$3);const o=_v0$1.dot(_v2$1);const c=_v1$3.dot(_v1$3);const l=_v1$3.dot(_v2$1);const u=a*c-s*s;if(i===undefined){console.warn("THREE.Triangle: .getBarycoord() target is now required");i=new Vector3}if(u===0){return i.set(-2,-1,-1)}const h=1/u;const d=(c*o-s*l)*h;const f=(a*l-s*o)*h;return i.set(1-d-f,f,d)}static containsPoint(e,t,n,r){this.getBarycoord(e,t,n,r,_v3);return _v3.x>=0&&_v3.y>=0&&_v3.x+_v3.y<=1}static getUV(e,t,n,r,i,a,s,o){this.getBarycoord(e,t,n,r,_v3);o.set(0,0);o.addScaledVector(i,_v3.x);o.addScaledVector(a,_v3.y);o.addScaledVector(s,_v3.z);return o}static isFrontFacing(e,t,n,r){_v0$1.subVectors(n,t);_v1$3.subVectors(e,t);return _v0$1.cross(_v1$3).dot(r)<0?true:false}set(e,t,n){this.a.copy(e);this.b.copy(t);this.c.copy(n);return this}setFromPointsAndIndices(e,t,n,r){this.a.copy(e[t]);this.b.copy(e[n]);this.c.copy(e[r]);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.a.copy(e.a);this.b.copy(e.b);this.c.copy(e.c);return this}getArea(){_v0$1.subVectors(this.c,this.b);_v1$3.subVectors(this.a,this.b);return _v0$1.cross(_v1$3).length()*.5}getMidpoint(e){if(e===undefined){console.warn("THREE.Triangle: .getMidpoint() target is now required");e=new Vector3}return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Triangle.getNormal(this.a,this.b,this.c,e)}getPlane(e){if(e===undefined){console.warn("THREE.Triangle: .getPlane() target is now required");e=new Plane}return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Triangle.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,r,i){return Triangle.getUV(e,this.a,this.b,this.c,t,n,r,i)}containsPoint(e){return Triangle.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Triangle.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){if(t===undefined){console.warn("THREE.Triangle: .closestPointToPoint() target is now required");t=new Vector3}const n=this.a,r=this.b,i=this.c;let a,s;_vab.subVectors(r,n);_vac.subVectors(i,n);_vap.subVectors(e,n);const o=_vab.dot(_vap);const c=_vac.dot(_vap);if(o<=0&&c<=0){return t.copy(n)}_vbp.subVectors(e,r);const l=_vab.dot(_vbp);const u=_vac.dot(_vbp);if(l>=0&&u<=l){return t.copy(r)}const h=o*u-l*c;if(h<=0&&o>=0&&l<=0){a=o/(o-l);return t.copy(n).addScaledVector(_vab,a)}_vcp.subVectors(e,i);const d=_vab.dot(_vcp);const f=_vac.dot(_vcp);if(f>=0&&d<=f){return t.copy(i)}const p=d*c-o*f;if(p<=0&&c>=0&&f<=0){s=c/(c-f);return t.copy(n).addScaledVector(_vac,s)}const m=l*f-d*u;if(m<=0&&u-l>=0&&d-f>=0){_vbc.subVectors(i,r);s=(u-l)/(u-l+(d-f));return t.copy(r).addScaledVector(_vbc,s)}const g=1/(m+p+h);a=p*g;s=h*g;return t.copy(n).addScaledVector(_vab,a).addScaledVector(_vac,s)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let materialId=0;function Material(){Object.defineProperty(this,"id",{value:materialId++});this.uuid=MathUtils.generateUUID();this.name="";this.type="Material";this.fog=true;this.blending=NormalBlending;this.side=FrontSide;this.vertexColors=false;this.opacity=1;this.transparent=false;this.blendSrc=SrcAlphaFactor;this.blendDst=OneMinusSrcAlphaFactor;this.blendEquation=AddEquation;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.depthFunc=LessEqualDepth;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=255;this.stencilFunc=AlwaysStencilFunc;this.stencilRef=0;this.stencilFuncMask=255;this.stencilFail=KeepStencilOp;this.stencilZFail=KeepStencilOp;this.stencilZPass=KeepStencilOp;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaTest=0;this.premultipliedAlpha=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0}Material.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Material,isMaterial:true,onBeforeCompile:function(){},customProgramCacheKey:function(){return this.onBeforeCompile.toString()},setValues:function(e){if(e===undefined)return;for(const t in e){const n=e[t];if(n===undefined){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}if(t==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=n===FlatShading?true:false;continue}const r=this[t];if(r===undefined){console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.");continue}if(r&&r.isColor){r.set(n)}else if(r&&r.isVector3&&(n&&n.isVector3)){r.copy(n)}else{this[t]=n}}},toJSON:function(e){const t=e===undefined||typeof e==="string";if(t){e={textures:{},images:{}}}const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(this.color&&this.color.isColor)n.color=this.color.getHex();if(this.roughness!==undefined)n.roughness=this.roughness;if(this.metalness!==undefined)n.metalness=this.metalness;if(this.sheen&&this.sheen.isColor)n.sheen=this.sheen.getHex();if(this.emissive&&this.emissive.isColor)n.emissive=this.emissive.getHex();if(this.emissiveIntensity&&this.emissiveIntensity!==1)n.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)n.specular=this.specular.getHex();if(this.shininess!==undefined)n.shininess=this.shininess;if(this.clearcoat!==undefined)n.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)n.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid;n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()}if(this.map&&this.map.isTexture)n.map=this.map.toJSON(e).uuid;if(this.matcap&&this.matcap.isTexture)n.matcap=this.matcap.toJSON(e).uuid;if(this.alphaMap&&this.alphaMap.isTexture)n.alphaMap=this.alphaMap.toJSON(e).uuid;if(this.lightMap&&this.lightMap.isTexture){n.lightMap=this.lightMap.toJSON(e).uuid;n.lightMapIntensity=this.lightMapIntensity}if(this.aoMap&&this.aoMap.isTexture){n.aoMap=this.aoMap.toJSON(e).uuid;n.aoMapIntensity=this.aoMapIntensity}if(this.bumpMap&&this.bumpMap.isTexture){n.bumpMap=this.bumpMap.toJSON(e).uuid;n.bumpScale=this.bumpScale}if(this.normalMap&&this.normalMap.isTexture){n.normalMap=this.normalMap.toJSON(e).uuid;n.normalMapType=this.normalMapType;n.normalScale=this.normalScale.toArray()}if(this.displacementMap&&this.displacementMap.isTexture){n.displacementMap=this.displacementMap.toJSON(e).uuid;n.displacementScale=this.displacementScale;n.displacementBias=this.displacementBias}if(this.roughnessMap&&this.roughnessMap.isTexture)n.roughnessMap=this.roughnessMap.toJSON(e).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)n.metalnessMap=this.metalnessMap.toJSON(e).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)n.emissiveMap=this.emissiveMap.toJSON(e).uuid;if(this.specularMap&&this.specularMap.isTexture)n.specularMap=this.specularMap.toJSON(e).uuid;if(this.envMap&&this.envMap.isTexture){n.envMap=this.envMap.toJSON(e).uuid;n.reflectivity=this.reflectivity;n.refractionRatio=this.refractionRatio;if(this.combine!==undefined)n.combine=this.combine;if(this.envMapIntensity!==undefined)n.envMapIntensity=this.envMapIntensity}if(this.gradientMap&&this.gradientMap.isTexture){n.gradientMap=this.gradientMap.toJSON(e).uuid}if(this.size!==undefined)n.size=this.size;if(this.sizeAttenuation!==undefined)n.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)n.blending=this.blending;if(this.side!==FrontSide)n.side=this.side;if(this.vertexColors)n.vertexColors=true;if(this.opacity<1)n.opacity=this.opacity;if(this.transparent===true)n.transparent=this.transparent;n.depthFunc=this.depthFunc;n.depthTest=this.depthTest;n.depthWrite=this.depthWrite;n.stencilWrite=this.stencilWrite;n.stencilWriteMask=this.stencilWriteMask;n.stencilFunc=this.stencilFunc;n.stencilRef=this.stencilRef;n.stencilFuncMask=this.stencilFuncMask;n.stencilFail=this.stencilFail;n.stencilZFail=this.stencilZFail;n.stencilZPass=this.stencilZPass;if(this.rotation&&this.rotation!==0)n.rotation=this.rotation;if(this.polygonOffset===true)n.polygonOffset=true;if(this.polygonOffsetFactor!==0)n.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)n.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth&&this.linewidth!==1)n.linewidth=this.linewidth;if(this.dashSize!==undefined)n.dashSize=this.dashSize;if(this.gapSize!==undefined)n.gapSize=this.gapSize;if(this.scale!==undefined)n.scale=this.scale;if(this.dithering===true)n.dithering=true;if(this.alphaTest>0)n.alphaTest=this.alphaTest;if(this.premultipliedAlpha===true)n.premultipliedAlpha=this.premultipliedAlpha;if(this.wireframe===true)n.wireframe=this.wireframe;if(this.wireframeLinewidth>1)n.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=="round")n.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=="round")n.wireframeLinejoin=this.wireframeLinejoin;if(this.morphTargets===true)n.morphTargets=true;if(this.morphNormals===true)n.morphNormals=true;if(this.skinning===true)n.skinning=true;if(this.flatShading===true)n.flatShading=this.flatShading;if(this.visible===false)n.visible=false;if(this.toneMapped===false)n.toneMapped=false;if(JSON.stringify(this.userData)!=="{}")n.userData=this.userData;function r(t){const n=[];for(const r in t){const e=t[r];delete e.metadata;n.push(e)}return n}if(t){const i=r(e.textures);const a=r(e.images);if(i.length>0)n.textures=i;if(a.length>0)n.images=a}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name;this.fog=e.fog;this.blending=e.blending;this.side=e.side;this.vertexColors=e.vertexColors;this.opacity=e.opacity;this.transparent=e.transparent;this.blendSrc=e.blendSrc;this.blendDst=e.blendDst;this.blendEquation=e.blendEquation;this.blendSrcAlpha=e.blendSrcAlpha;this.blendDstAlpha=e.blendDstAlpha;this.blendEquationAlpha=e.blendEquationAlpha;this.depthFunc=e.depthFunc;this.depthTest=e.depthTest;this.depthWrite=e.depthWrite;this.stencilWriteMask=e.stencilWriteMask;this.stencilFunc=e.stencilFunc;this.stencilRef=e.stencilRef;this.stencilFuncMask=e.stencilFuncMask;this.stencilFail=e.stencilFail;this.stencilZFail=e.stencilZFail;this.stencilZPass=e.stencilZPass;this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const r=t.length;n=new Array(r);for(let e=0;e!==r;++e){n[e]=t[e].clone()}}this.clippingPlanes=n;this.clipIntersection=e.clipIntersection;this.clipShadows=e.clipShadows;this.shadowSide=e.shadowSide;this.colorWrite=e.colorWrite;this.precision=e.precision;this.polygonOffset=e.polygonOffset;this.polygonOffsetFactor=e.polygonOffsetFactor;this.polygonOffsetUnits=e.polygonOffsetUnits;this.dithering=e.dithering;this.alphaTest=e.alphaTest;this.premultipliedAlpha=e.premultipliedAlpha;this.visible=e.visible;this.toneMapped=e.toneMapped;this.userData=JSON.parse(JSON.stringify(e.userData));return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});Object.defineProperty(Material.prototype,"needsUpdate",{set:function(e){if(e===true)this.version++}});const _colorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};const _hslA={h:0,s:0,l:0};const _hslB={h:0,s:0,l:0};function hue2rgb(e,t,n){if(n<0)n+=1;if(n>1)n-=1;if(n<1/6)return e+(t-e)*6*n;if(n<1/2)return t;if(n<2/3)return e+(t-e)*6*(2/3-n);return e}function SRGBToLinear(e){return e<.04045?e*.0773993808:Math.pow(e*.9478672986+.0521327014,2.4)}function LinearToSRGB(e){return e<.0031308?e*12.92:1.055*Math.pow(e,.41666)-.055}class Color{constructor(e,t,n){if(t===undefined&&n===undefined){return this.set(e)}return this.setRGB(e,t,n)}set(e){if(e&&e.isColor){this.copy(e)}else if(typeof e==="number"){this.setHex(e)}else if(typeof e==="string"){this.setStyle(e)}return this}setScalar(e){this.r=e;this.g=e;this.b=e;return this}setHex(e){e=Math.floor(e);this.r=(e>>16&255)/255;this.g=(e>>8&255)/255;this.b=(e&255)/255;return this}setRGB(e,t,n){this.r=e;this.g=t;this.b=n;return this}setHSL(e,t,n){e=MathUtils.euclideanModulo(e,1);t=MathUtils.clamp(t,0,1);n=MathUtils.clamp(n,0,1);if(t===0){this.r=this.g=this.b=n}else{const r=n<=.5?n*(1+t):n+t-n*t;const i=2*n-r;this.r=hue2rgb(i,r,e+1/3);this.g=hue2rgb(i,r,e);this.b=hue2rgb(i,r,e-1/3)}return this}setStyle(t){function n(e){if(e===undefined)return;if(parseFloat(e)<1){console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}}let r;if(r=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let e;const i=r[1];const a=r[2];switch(i){case"rgb":case"rgba":if(e=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){this.r=Math.min(255,parseInt(e[1],10))/255;this.g=Math.min(255,parseInt(e[2],10))/255;this.b=Math.min(255,parseInt(e[3],10))/255;n(e[4]);return this}if(e=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){this.r=Math.min(100,parseInt(e[1],10))/100;this.g=Math.min(100,parseInt(e[2],10))/100;this.b=Math.min(100,parseInt(e[3],10))/100;n(e[4]);return this}break;case"hsl":case"hsla":if(e=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){const s=parseFloat(e[1])/360;const o=parseInt(e[2],10)/100;const c=parseInt(e[3],10)/100;n(e[4]);return this.setHSL(s,o,c)}break}}else if(r=/^\#([A-Fa-f\d]+)$/.exec(t)){const e=r[1];const l=e.length;if(l===3){this.r=parseInt(e.charAt(0)+e.charAt(0),16)/255;this.g=parseInt(e.charAt(1)+e.charAt(1),16)/255;this.b=parseInt(e.charAt(2)+e.charAt(2),16)/255;return this}else if(l===6){this.r=parseInt(e.charAt(0)+e.charAt(1),16)/255;this.g=parseInt(e.charAt(2)+e.charAt(3),16)/255;this.b=parseInt(e.charAt(4)+e.charAt(5),16)/255;return this}}if(t&&t.length>0){return this.setColorName(t)}return this}setColorName(e){const t=_colorKeywords[e];if(t!==undefined){this.setHex(t)}else{console.warn("THREE.Color: Unknown color "+e)}return this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){this.r=e.r;this.g=e.g;this.b=e.b;return this}copyGammaToLinear(e,t=2){this.r=Math.pow(e.r,t);this.g=Math.pow(e.g,t);this.b=Math.pow(e.b,t);return this}copyLinearToGamma(e,t=2){const n=t>0?1/t:1;this.r=Math.pow(e.r,n);this.g=Math.pow(e.g,n);this.b=Math.pow(e.b,n);return this}convertGammaToLinear(e){this.copyGammaToLinear(this,e);return this}convertLinearToGamma(e){this.copyLinearToGamma(this,e);return this}copySRGBToLinear(e){this.r=SRGBToLinear(e.r);this.g=SRGBToLinear(e.g);this.b=SRGBToLinear(e.b);return this}copyLinearToSRGB(e){this.r=LinearToSRGB(e.r);this.g=LinearToSRGB(e.g);this.b=LinearToSRGB(e.b);return this}convertSRGBToLinear(){this.copySRGBToLinear(this);return this}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(e){if(e===undefined){console.warn("THREE.Color: .getHSL() target is now required");e={h:0,s:0,l:0}}const t=this.r,n=this.g,r=this.b;const i=Math.max(t,n,r);const a=Math.min(t,n,r);let s,o;const c=(a+i)/2;if(a===i){s=0;o=0}else{const l=i-a;o=c<=.5?l/(i+a):l/(2-i-a);switch(i){case t:s=(n-r)/l+(n<r?6:0);break;case n:s=(r-t)/l+2;break;case r:s=(t-n)/l+4;break}s/=6}e.h=s;e.s=o;e.l=c;return e}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(e,t,n){this.getHSL(_hslA);_hslA.h+=e;_hslA.s+=t;_hslA.l+=n;this.setHSL(_hslA.h,_hslA.s,_hslA.l);return this}add(e){this.r+=e.r;this.g+=e.g;this.b+=e.b;return this}addColors(e,t){this.r=e.r+t.r;this.g=e.g+t.g;this.b=e.b+t.b;return this}addScalar(e){this.r+=e;this.g+=e;this.b+=e;return this}sub(e){this.r=Math.max(0,this.r-e.r);this.g=Math.max(0,this.g-e.g);this.b=Math.max(0,this.b-e.b);return this}multiply(e){this.r*=e.r;this.g*=e.g;this.b*=e.b;return this}multiplyScalar(e){this.r*=e;this.g*=e;this.b*=e;return this}lerp(e,t){this.r+=(e.r-this.r)*t;this.g+=(e.g-this.g)*t;this.b+=(e.b-this.b)*t;return this}lerpColors(e,t,n){this.r=e.r+(t.r-e.r)*n;this.g=e.g+(t.g-e.g)*n;this.b=e.b+(t.b-e.b)*n;return this}lerpHSL(e,t){this.getHSL(_hslA);e.getHSL(_hslB);const n=MathUtils.lerp(_hslA.h,_hslB.h,t);const r=MathUtils.lerp(_hslA.s,_hslB.s,t);const i=MathUtils.lerp(_hslA.l,_hslB.l,t);this.setHSL(n,r,i);return this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){this.r=e[t];this.g=e[t+1];this.b=e[t+2];return this}toArray(e=[],t=0){e[t]=this.r;e[t+1]=this.g;e[t+2]=this.b;return e}fromBufferAttribute(e,t){this.r=e.getX(t);this.g=e.getY(t);this.b=e.getZ(t);if(e.normalized===true){this.r/=255;this.g/=255;this.b/=255}return this}toJSON(){return this.getHex()}}Color.NAMES=_colorKeywords;Color.prototype.isColor=true;Color.prototype.r=1;Color.prototype.g=1;Color.prototype.b=1;class MeshBasicMaterial extends Material{constructor(e){super();this.type="MeshBasicMaterial";this.color=new Color(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;return this}}MeshBasicMaterial.prototype.isMeshBasicMaterial=true;const _vector$3=new Vector3;const _vector2$1=new Vector2;function BufferAttribute(e,t,n){if(Array.isArray(e)){throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")}this.name="";this.array=e;this.itemSize=t;this.count=e!==undefined?e.length/t:0;this.normalized=n===true;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0}Object.defineProperty(BufferAttribute.prototype,"needsUpdate",{set:function(e){if(e===true)this.version++}});Object.assign(BufferAttribute.prototype,{isBufferAttribute:true,onUploadCallback:function(){},setUsage:function(e){this.usage=e;return this},copy:function(e){this.name=e.name;this.array=new e.array.constructor(e.array);this.itemSize=e.itemSize;this.count=e.count;this.normalized=e.normalized;this.usage=e.usage;return this},copyAt:function(n,r,i){n*=this.itemSize;i*=r.itemSize;for(let e=0,t=this.itemSize;e<t;e++){this.array[n+e]=r.array[i+e]}return this},copyArray:function(e){this.array.set(e);return this},copyColorsArray:function(n){const r=this.array;let i=0;for(let t=0,e=n.length;t<e;t++){let e=n[t];if(e===undefined){console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",t);e=new Color}r[i++]=e.r;r[i++]=e.g;r[i++]=e.b}return this},copyVector2sArray:function(n){const r=this.array;let i=0;for(let t=0,e=n.length;t<e;t++){let e=n[t];if(e===undefined){console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",t);e=new Vector2}r[i++]=e.x;r[i++]=e.y}return this},copyVector3sArray:function(n){const r=this.array;let i=0;for(let t=0,e=n.length;t<e;t++){let e=n[t];if(e===undefined){console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",t);e=new Vector3}r[i++]=e.x;r[i++]=e.y;r[i++]=e.z}return this},copyVector4sArray:function(n){const r=this.array;let i=0;for(let t=0,e=n.length;t<e;t++){let e=n[t];if(e===undefined){console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",t);e=new Vector4}r[i++]=e.x;r[i++]=e.y;r[i++]=e.z;r[i++]=e.w}return this},applyMatrix3:function(n){if(this.itemSize===2){for(let e=0,t=this.count;e<t;e++){_vector2$1.fromBufferAttribute(this,e);_vector2$1.applyMatrix3(n);this.setXY(e,_vector2$1.x,_vector2$1.y)}}else if(this.itemSize===3){for(let e=0,t=this.count;e<t;e++){_vector$3.fromBufferAttribute(this,e);_vector$3.applyMatrix3(n);this.setXYZ(e,_vector$3.x,_vector$3.y,_vector$3.z)}}return this},applyMatrix4:function(n){for(let e=0,t=this.count;e<t;e++){_vector$3.x=this.getX(e);_vector$3.y=this.getY(e);_vector$3.z=this.getZ(e);_vector$3.applyMatrix4(n);this.setXYZ(e,_vector$3.x,_vector$3.y,_vector$3.z)}return this},applyNormalMatrix:function(n){for(let e=0,t=this.count;e<t;e++){_vector$3.x=this.getX(e);_vector$3.y=this.getY(e);_vector$3.z=this.getZ(e);_vector$3.applyNormalMatrix(n);this.setXYZ(e,_vector$3.x,_vector$3.y,_vector$3.z)}return this},transformDirection:function(n){for(let e=0,t=this.count;e<t;e++){_vector$3.x=this.getX(e);_vector$3.y=this.getY(e);_vector$3.z=this.getZ(e);_vector$3.transformDirection(n);this.setXYZ(e,_vector$3.x,_vector$3.y,_vector$3.z)}return this},set:function(e,t=0){this.array.set(e,t);return this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){this.array[e*this.itemSize]=t;return this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){this.array[e*this.itemSize+1]=t;return this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){this.array[e*this.itemSize+2]=t;return this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){this.array[e*this.itemSize+3]=t;return this},setXY:function(e,t,n){e*=this.itemSize;this.array[e+0]=t;this.array[e+1]=n;return this},setXYZ:function(e,t,n,r){e*=this.itemSize;this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=r;return this},setXYZW:function(e,t,n,r,i){e*=this.itemSize;this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=r;this.array[e+3]=i;return this},onUpload:function(e){this.onUploadCallback=e;return this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}});function Int8BufferAttribute(e,t,n){BufferAttribute.call(this,new Int8Array(e),t,n)}Int8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int8BufferAttribute.prototype.constructor=Int8BufferAttribute;function Uint8BufferAttribute(e,t,n){BufferAttribute.call(this,new Uint8Array(e),t,n)}Uint8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8BufferAttribute.prototype.constructor=Uint8BufferAttribute;function Uint8ClampedBufferAttribute(e,t,n){BufferAttribute.call(this,new Uint8ClampedArray(e),t,n)}Uint8ClampedBufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8ClampedBufferAttribute.prototype.constructor=Uint8ClampedBufferAttribute;function Int16BufferAttribute(e,t,n){BufferAttribute.call(this,new Int16Array(e),t,n)}Int16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int16BufferAttribute.prototype.constructor=Int16BufferAttribute;function Uint16BufferAttribute(e,t,n){BufferAttribute.call(this,new Uint16Array(e),t,n)}Uint16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint16BufferAttribute.prototype.constructor=Uint16BufferAttribute;function Int32BufferAttribute(e,t,n){BufferAttribute.call(this,new Int32Array(e),t,n)}Int32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int32BufferAttribute.prototype.constructor=Int32BufferAttribute;function Uint32BufferAttribute(e,t,n){BufferAttribute.call(this,new Uint32Array(e),t,n)}Uint32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint32BufferAttribute.prototype.constructor=Uint32BufferAttribute;function Float16BufferAttribute(e,t,n){BufferAttribute.call(this,new Uint16Array(e),t,n)}Float16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float16BufferAttribute.prototype.constructor=Float16BufferAttribute;Float16BufferAttribute.prototype.isFloat16BufferAttribute=true;function Float32BufferAttribute(e,t,n){BufferAttribute.call(this,new Float32Array(e),t,n)}Float32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float32BufferAttribute.prototype.constructor=Float32BufferAttribute;function Float64BufferAttribute(e,t,n){BufferAttribute.call(this,new Float64Array(e),t,n)}Float64BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float64BufferAttribute.prototype.constructor=Float64BufferAttribute;function arrayMax(n){if(n.length===0)return-Infinity;let r=n[0];for(let e=1,t=n.length;e<t;++e){if(n[e]>r)r=n[e]}return r}const TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function getTypedArray(e,t){return new TYPED_ARRAYS[e](t)}let _id=0;const _m1$2=new Matrix4;const _obj=new Object3D;const _offset=new Vector3;const _box$2=new Box3;const _boxMorphTargets=new Box3;const _vector$4=new Vector3;function BufferGeometry(){Object.defineProperty(this,"id",{value:_id++});this.uuid=MathUtils.generateUUID();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={}}BufferGeometry.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:BufferGeometry,isBufferGeometry:true,getIndex:function(){return this.index},setIndex:function(e){if(Array.isArray(e)){this.index=new(arrayMax(e)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(e,1)}else{this.index=e}return this},getAttribute:function(e){return this.attributes[e]},setAttribute:function(e,t){this.attributes[e]=t;return this},deleteAttribute:function(e){delete this.attributes[e];return this},hasAttribute:function(e){return this.attributes[e]!==undefined},addGroup:function(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e;this.drawRange.count=t},applyMatrix4:function(e){const t=this.attributes.position;if(t!==undefined){t.applyMatrix4(e);t.needsUpdate=true}const n=this.attributes.normal;if(n!==undefined){const i=(new Matrix3).getNormalMatrix(e);n.applyNormalMatrix(i);n.needsUpdate=true}const r=this.attributes.tangent;if(r!==undefined){r.transformDirection(e);r.needsUpdate=true}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}return this},rotateX:function(e){_m1$2.makeRotationX(e);this.applyMatrix4(_m1$2);return this},rotateY:function(e){_m1$2.makeRotationY(e);this.applyMatrix4(_m1$2);return this},rotateZ:function(e){_m1$2.makeRotationZ(e);this.applyMatrix4(_m1$2);return this},translate:function(e,t,n){_m1$2.makeTranslation(e,t,n);this.applyMatrix4(_m1$2);return this},scale:function(e,t,n){_m1$2.makeScale(e,t,n);this.applyMatrix4(_m1$2);return this},lookAt:function(e){_obj.lookAt(e);_obj.updateMatrix();this.applyMatrix4(_obj.matrix);return this},center:function(){this.computeBoundingBox();this.boundingBox.getCenter(_offset).negate();this.translate(_offset.x,_offset.y,_offset.z);return this},setFromPoints:function(n){const r=[];for(let e=0,t=n.length;e<t;e++){const i=n[e];r.push(i.x,i.y,i.z||0)}this.setAttribute("position",new Float32BufferAttribute(r,3));return this},computeBoundingBox:function(){if(this.boundingBox===null){this.boundingBox=new Box3}const e=this.attributes.position;const n=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingBox.set(new Vector3(-Infinity,-Infinity,-Infinity),new Vector3(+Infinity,+Infinity,+Infinity));return}if(e!==undefined){this.boundingBox.setFromBufferAttribute(e);if(n){for(let e=0,t=n.length;e<t;e++){const r=n[e];_box$2.setFromBufferAttribute(r);if(this.morphTargetsRelative){_vector$4.addVectors(this.boundingBox.min,_box$2.min);this.boundingBox.expandByPoint(_vector$4);_vector$4.addVectors(this.boundingBox.max,_box$2.max);this.boundingBox.expandByPoint(_vector$4)}else{this.boundingBox.expandByPoint(_box$2.min);this.boundingBox.expandByPoint(_box$2.max)}}}}else{this.boundingBox.makeEmpty()}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}},computeBoundingSphere:function(){if(this.boundingSphere===null){this.boundingSphere=new Sphere}const r=this.attributes.position;const i=this.morphAttributes.position;if(r&&r.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingSphere.set(new Vector3,Infinity);return}if(r){const a=this.boundingSphere.center;_box$2.setFromBufferAttribute(r);if(i){for(let e=0,t=i.length;e<t;e++){const s=i[e];_boxMorphTargets.setFromBufferAttribute(s);if(this.morphTargetsRelative){_vector$4.addVectors(_box$2.min,_boxMorphTargets.min);_box$2.expandByPoint(_vector$4);_vector$4.addVectors(_box$2.max,_boxMorphTargets.max);_box$2.expandByPoint(_vector$4)}else{_box$2.expandByPoint(_boxMorphTargets.min);_box$2.expandByPoint(_boxMorphTargets.max)}}}_box$2.getCenter(a);let n=0;for(let e=0,t=r.count;e<t;e++){_vector$4.fromBufferAttribute(r,e);n=Math.max(n,a.distanceToSquared(_vector$4))}if(i){for(let e=0,t=i.length;e<t;e++){const s=i[e];const o=this.morphTargetsRelative;for(let e=0,t=s.count;e<t;e++){_vector$4.fromBufferAttribute(s,e);if(o){_offset.fromBufferAttribute(r,e);_vector$4.add(_offset)}n=Math.max(n,a.distanceToSquared(_vector$4))}}}this.boundingSphere.radius=Math.sqrt(n);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}},computeFaceNormals:function(){},computeTangents:function(){const e=this.index;const t=this.attributes;if(e===null||t.position===undefined||t.normal===undefined||t.uv===undefined){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array;const i=t.position.array;const a=t.normal.array;const s=t.uv.array;const r=i.length/3;if(t.tangent===undefined){this.setAttribute("tangent",new BufferAttribute(new Float32Array(4*r),4))}const o=t.tangent.array;const c=[],l=[];for(let e=0;e<r;e++){c[e]=new Vector3;l[e]=new Vector3}const u=new Vector3,h=new Vector3,d=new Vector3,f=new Vector2,p=new Vector2,m=new Vector2,g=new Vector3,_=new Vector3;function y(e,t,n){u.fromArray(i,e*3);h.fromArray(i,t*3);d.fromArray(i,n*3);f.fromArray(s,e*2);p.fromArray(s,t*2);m.fromArray(s,n*2);h.sub(u);d.sub(u);p.sub(f);m.sub(f);const r=1/(p.x*m.y-m.x*p.y);if(!isFinite(r))return;g.copy(h).multiplyScalar(m.y).addScaledVector(d,-p.y).multiplyScalar(r);_.copy(d).multiplyScalar(p.x).addScaledVector(h,-m.x).multiplyScalar(r);c[e].add(g);c[t].add(g);c[n].add(g);l[e].add(_);l[t].add(_);l[n].add(_)}let v=this.groups;if(v.length===0){v=[{start:0,count:n.length}]}for(let e=0,t=v.length;e<t;++e){const T=v[e];const E=T.start;const A=T.count;for(let e=E,t=E+A;e<t;e+=3){y(n[e+0],n[e+1],n[e+2])}}const x=new Vector3,b=new Vector3;const M=new Vector3,w=new Vector3;function S(e){M.fromArray(a,e*3);w.copy(M);const t=c[e];x.copy(t);x.sub(M.multiplyScalar(M.dot(t))).normalize();b.crossVectors(w,t);const n=b.dot(l[e]);const r=n<0?-1:1;o[e*4]=x.x;o[e*4+1]=x.y;o[e*4+2]=x.z;o[e*4+3]=r}for(let e=0,t=v.length;e<t;++e){const T=v[e];const E=T.start;const A=T.count;for(let e=E,t=E+A;e<t;e+=3){S(n[e+0]);S(n[e+1]);S(n[e+2])}}},computeVertexNormals:function(){const r=this.index;const i=this.getAttribute("position");if(i!==undefined){let n=this.getAttribute("normal");if(n===undefined){n=new BufferAttribute(new Float32Array(i.count*3),3);this.setAttribute("normal",n)}else{for(let e=0,t=n.count;e<t;e++){n.setXYZ(e,0,0,0)}}const a=new Vector3,s=new Vector3,o=new Vector3;const c=new Vector3,l=new Vector3,u=new Vector3;const h=new Vector3,d=new Vector3;if(r){for(let e=0,t=r.count;e<t;e+=3){const f=r.getX(e+0);const p=r.getX(e+1);const m=r.getX(e+2);a.fromBufferAttribute(i,f);s.fromBufferAttribute(i,p);o.fromBufferAttribute(i,m);h.subVectors(o,s);d.subVectors(a,s);h.cross(d);c.fromBufferAttribute(n,f);l.fromBufferAttribute(n,p);u.fromBufferAttribute(n,m);c.add(h);l.add(h);u.add(h);n.setXYZ(f,c.x,c.y,c.z);n.setXYZ(p,l.x,l.y,l.z);n.setXYZ(m,u.x,u.y,u.z)}}else{for(let e=0,t=i.count;e<t;e+=3){a.fromBufferAttribute(i,e+0);s.fromBufferAttribute(i,e+1);o.fromBufferAttribute(i,e+2);h.subVectors(o,s);d.subVectors(a,s);h.cross(d);n.setXYZ(e+0,h.x,h.y,h.z);n.setXYZ(e+1,h.x,h.y,h.z);n.setXYZ(e+2,h.x,h.y,h.z)}}this.normalizeNormals();n.needsUpdate=true}},merge:function(e,t){if(!(e&&e.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);return}if(t===undefined){t=0;console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. "+"Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.")}const n=this.attributes;for(const r in n){if(e.attributes[r]===undefined)continue;const i=n[r];const a=i.array;const s=e.attributes[r];const o=s.array;const c=s.itemSize*t;const l=Math.min(o.length,a.length-c);for(let e=0,t=c;e<l;e++,t++){a[t]=o[e]}}return this},normalizeNormals:function(){const n=this.attributes.normal;for(let e=0,t=n.count;e<t;e++){_vector$4.fromBufferAttribute(n,e);_vector$4.normalize();n.setXYZ(e,_vector$4.x,_vector$4.y,_vector$4.z)}},toNonIndexed:function(){function n(e,n){const r=e.array;const i=e.itemSize;const t=e.normalized;const a=new r.constructor(n.length*i);let s=0,o=0;for(let e=0,t=n.length;e<t;e++){s=n[e]*i;for(let e=0;e<i;e++){a[o++]=r[s++]}}return new BufferAttribute(a,i,t)}if(this.index===null){console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");return this}const r=new BufferGeometry;const i=this.index.array;const e=this.attributes;for(const s in e){const o=e[s];const c=n(o,i);r.setAttribute(s,c)}const t=this.morphAttributes;for(const s in t){const l=[];const u=t[s];for(let e=0,t=u.length;e<t;e++){const o=u[e];const c=n(o,i);l.push(c)}r.morphAttributes[s]=l}r.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let e=0,t=a.length;e<t;e++){const h=a[e];r.addGroup(h.start,h.count,h.materialIndex)}return r},toJSON:function(){const n={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(Object.keys(this.userData).length>0)n.userData=this.userData;if(this.parameters!==undefined){const o=this.parameters;for(const c in o){if(o[c]!==undefined)n[c]=o[c]}return n}n.data={attributes:{}};const e=this.index;if(e!==null){n.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)}}const t=this.attributes;for(const c in t){const l=t[c];const u=l.toJSON(n.data);if(l.name!=="")u.name=l.name;n.data.attributes[c]=u}const r={};let i=false;for(const c in this.morphAttributes){const h=this.morphAttributes[c];const d=[];for(let e=0,t=h.length;e<t;e++){const l=h[e];const u=l.toJSON(n.data);if(l.name!=="")u.name=l.name;d.push(u)}if(d.length>0){r[c]=d;i=true}}if(i){n.data.morphAttributes=r;n.data.morphTargetsRelative=this.morphTargetsRelative}const a=this.groups;if(a.length>0){n.data.groups=JSON.parse(JSON.stringify(a))}const s=this.boundingSphere;if(s!==null){n.data.boundingSphere={center:s.center.toArray(),radius:s.radius}}return n},clone:function(){return(new BufferGeometry).copy(this)},copy:function(e){this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;const n={};this.name=e.name;const t=e.index;if(t!==null){this.setIndex(t.clone(n))}const r=e.attributes;for(const c in r){const l=r[c];this.setAttribute(c,l.clone(n))}const i=e.morphAttributes;for(const c in i){const u=[];const h=i[c];for(let e=0,t=h.length;e<t;e++){u.push(h[e].clone(n))}this.morphAttributes[c]=u}this.morphTargetsRelative=e.morphTargetsRelative;const a=e.groups;for(let e=0,t=a.length;e<t;e++){const d=a[e];this.addGroup(d.start,d.count,d.materialIndex)}const s=e.boundingBox;if(s!==null){this.boundingBox=s.clone()}const o=e.boundingSphere;if(o!==null){this.boundingSphere=o.clone()}this.drawRange.start=e.drawRange.start;this.drawRange.count=e.drawRange.count;this.userData=e.userData;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});const _inverseMatrix=new Matrix4;const _ray=new Ray;const _sphere=new Sphere;const _vA=new Vector3;const _vB=new Vector3;const _vC=new Vector3;const _tempA=new Vector3;const _tempB=new Vector3;const _tempC=new Vector3;const _morphA=new Vector3;const _morphB=new Vector3;const _morphC=new Vector3;const _uvA=new Vector2;const _uvB=new Vector2;const _uvC=new Vector2;const _intersectionPoint=new Vector3;const _intersectionPointWorld=new Vector3;function Mesh(e=new BufferGeometry,t=new MeshBasicMaterial){Object3D.call(this);this.type="Mesh";this.geometry=e;this.material=t;this.updateMorphTargets()}Mesh.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Mesh,isMesh:true,copy:function(e){Object3D.prototype.copy.call(this,e);if(e.morphTargetInfluences!==undefined){this.morphTargetInfluences=e.morphTargetInfluences.slice()}if(e.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)}this.material=e.material;this.geometry=e.geometry;return this},updateMorphTargets:function(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const r=t[n[0]];if(r!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,t=r.length;e<t;e++){const i=r[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[i]=e}}}}else{const a=e.morphTargets;if(a!==undefined&&a.length>0){console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}},raycast:function(n,r){const e=this.geometry;const i=this.material;const t=this.matrixWorld;if(i===undefined)return;if(e.boundingSphere===null)e.computeBoundingSphere();_sphere.copy(e.boundingSphere);_sphere.applyMatrix4(t);if(n.ray.intersectsSphere(_sphere)===false)return;_inverseMatrix.copy(t).invert();_ray.copy(n.ray).applyMatrix4(_inverseMatrix);if(e.boundingBox!==null){if(_ray.intersectsBox(e.boundingBox)===false)return}let a;if(e.isBufferGeometry){const s=e.index;const o=e.attributes.position;const c=e.morphAttributes.position;const l=e.morphTargetsRelative;const u=e.attributes.uv;const h=e.attributes.uv2;const d=e.groups;const f=e.drawRange;if(s!==null){if(Array.isArray(i)){for(let e=0,t=d.length;e<t;e++){const p=d[e];const m=i[p.materialIndex];const g=Math.max(p.start,f.start);const _=Math.min(p.start+p.count,f.start+f.count);for(let e=g,t=_;e<t;e+=3){const y=s.getX(e);const v=s.getX(e+1);const x=s.getX(e+2);a=checkBufferGeometryIntersection(this,m,n,_ray,o,c,l,u,h,y,v,x);if(a){a.faceIndex=Math.floor(e/3);a.face.materialIndex=p.materialIndex;r.push(a)}}}}else{const g=Math.max(0,f.start);const _=Math.min(s.count,f.start+f.count);for(let e=g,t=_;e<t;e+=3){const y=s.getX(e);const v=s.getX(e+1);const x=s.getX(e+2);a=checkBufferGeometryIntersection(this,i,n,_ray,o,c,l,u,h,y,v,x);if(a){a.faceIndex=Math.floor(e/3);r.push(a)}}}}else if(o!==undefined){if(Array.isArray(i)){for(let e=0,t=d.length;e<t;e++){const p=d[e];const m=i[p.materialIndex];const g=Math.max(p.start,f.start);const _=Math.min(p.start+p.count,f.start+f.count);for(let e=g,t=_;e<t;e+=3){const y=e;const v=e+1;const x=e+2;a=checkBufferGeometryIntersection(this,m,n,_ray,o,c,l,u,h,y,v,x);if(a){a.faceIndex=Math.floor(e/3);a.face.materialIndex=p.materialIndex;r.push(a)}}}}else{const g=Math.max(0,f.start);const _=Math.min(o.count,f.start+f.count);for(let e=g,t=_;e<t;e+=3){const y=e;const v=e+1;const x=e+2;a=checkBufferGeometryIntersection(this,i,n,_ray,o,c,l,u,h,y,v,x);if(a){a.faceIndex=Math.floor(e/3);r.push(a)}}}}}else if(e.isGeometry){console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}});function checkIntersection(e,t,n,r,i,a,s,o){let c;if(t.side===BackSide){c=r.intersectTriangle(s,a,i,true,o)}else{c=r.intersectTriangle(i,a,s,t.side!==DoubleSide,o)}if(c===null)return null;_intersectionPointWorld.copy(o);_intersectionPointWorld.applyMatrix4(e.matrixWorld);const l=n.ray.origin.distanceTo(_intersectionPointWorld);if(l<n.near||l>n.far)return null;return{distance:l,point:_intersectionPointWorld.clone(),object:e}}function checkBufferGeometryIntersection(e,t,n,r,i,a,s,o,c,l,u,h){_vA.fromBufferAttribute(i,l);_vB.fromBufferAttribute(i,u);_vC.fromBufferAttribute(i,h);const d=e.morphTargetInfluences;if(t.morphTargets&&a&&d){_morphA.set(0,0,0);_morphB.set(0,0,0);_morphC.set(0,0,0);for(let e=0,t=a.length;e<t;e++){const p=d[e];const m=a[e];if(p===0)continue;_tempA.fromBufferAttribute(m,l);_tempB.fromBufferAttribute(m,u);_tempC.fromBufferAttribute(m,h);if(s){_morphA.addScaledVector(_tempA,p);_morphB.addScaledVector(_tempB,p);_morphC.addScaledVector(_tempC,p)}else{_morphA.addScaledVector(_tempA.sub(_vA),p);_morphB.addScaledVector(_tempB.sub(_vB),p);_morphC.addScaledVector(_tempC.sub(_vC),p)}}_vA.add(_morphA);_vB.add(_morphB);_vC.add(_morphC)}if(e.isSkinnedMesh&&t.skinning){e.boneTransform(l,_vA);e.boneTransform(u,_vB);e.boneTransform(h,_vC)}const f=checkIntersection(e,t,n,r,_vA,_vB,_vC,_intersectionPoint);if(f){if(o){_uvA.fromBufferAttribute(o,l);_uvB.fromBufferAttribute(o,u);_uvC.fromBufferAttribute(o,h);f.uv=Triangle.getUV(_intersectionPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2)}if(c){_uvA.fromBufferAttribute(c,l);_uvB.fromBufferAttribute(c,u);_uvC.fromBufferAttribute(c,h);f.uv2=Triangle.getUV(_intersectionPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2)}const g={a:l,b:u,c:h,normal:new Vector3,materialIndex:0};Triangle.getNormal(_vA,_vB,_vC,g.normal);f.face=g}return f}class BoxGeometry extends BufferGeometry{constructor(e=1,t=1,n=1,r=1,i=1,a=1){super();this.type="BoxGeometry";this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:i,depthSegments:a};const A=this;r=Math.floor(r);i=Math.floor(i);a=Math.floor(a);const L=[];const C=[];const R=[];const P=[];let B=0;let D=0;s("z","y","x",-1,-1,n,t,e,a,i,0);s("z","y","x",1,-1,n,t,-e,a,i,1);s("x","z","y",1,1,e,n,t,r,a,2);s("x","z","y",1,-1,e,n,-t,r,a,3);s("x","y","z",1,-1,e,t,n,r,i,4);s("x","y","z",-1,-1,e,t,-n,r,i,5);this.setIndex(L);this.setAttribute("position",new Float32BufferAttribute(C,3));this.setAttribute("normal",new Float32BufferAttribute(R,3));this.setAttribute("uv",new Float32BufferAttribute(P,2));function s(n,r,i,a,s,e,t,o,c,l,u){const h=e/c;const d=t/l;const f=e/2;const p=t/2;const m=o/2;const g=c+1;const _=l+1;let y=0;let v=0;const x=new Vector3;for(let t=0;t<_;t++){const b=t*d-p;for(let e=0;e<g;e++){const M=e*h-f;x[n]=M*a;x[r]=b*s;x[i]=m;C.push(x.x,x.y,x.z);x[n]=0;x[r]=0;x[i]=o>0?1:-1;R.push(x.x,x.y,x.z);P.push(e/c);P.push(1-t/l);y+=1}}for(let t=0;t<l;t++){for(let e=0;e<c;e++){const w=B+e+g*t;const S=B+e+g*(t+1);const T=B+(e+1)+g*(t+1);const E=B+(e+1)+g*t;L.push(w,S,E);L.push(S,T,E);v+=6}}A.addGroup(D,v,u);D+=v;B+=y}}}function cloneUniforms(e){const t={};for(const n in e){t[n]={};for(const r in e[n]){const i=e[n][r];if(i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)){t[n][r]=i.clone()}else if(Array.isArray(i)){t[n][r]=i.slice()}else{t[n][r]=i}}}return t}function mergeUniforms(n){const r={};for(let t=0;t<n.length;t++){const e=cloneUniforms(n[t]);for(const i in e){r[i]=e[i]}}return r}const UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};var default_vertex="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var default_fragment="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";function ShaderMaterial(e){Material.call(this);this.type="ShaderMaterial";this.defines={};this.uniforms={};this.vertexShader=default_vertex;this.fragmentShader=default_fragment;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.clipping=false;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.extensions={derivatives:false,fragDepth:false,drawBuffers:false,shaderTextureLOD:false};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=undefined;this.uniformsNeedUpdate=false;this.glslVersion=null;if(e!==undefined){if(e.attributes!==undefined){console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.")}this.setValues(e)}}ShaderMaterial.prototype=Object.create(Material.prototype);ShaderMaterial.prototype.constructor=ShaderMaterial;ShaderMaterial.prototype.isShaderMaterial=true;ShaderMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.fragmentShader=e.fragmentShader;this.vertexShader=e.vertexShader;this.uniforms=cloneUniforms(e.uniforms);this.defines=Object.assign({},e.defines);this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.lights=e.lights;this.clipping=e.clipping;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;this.extensions=Object.assign({},e.extensions);this.glslVersion=e.glslVersion;return this};ShaderMaterial.prototype.toJSON=function(e){const t=Material.prototype.toJSON.call(this,e);t.glslVersion=this.glslVersion;t.uniforms={};for(const r in this.uniforms){const i=this.uniforms[r];const a=i.value;if(a&&a.isTexture){t.uniforms[r]={type:"t",value:a.toJSON(e).uuid}}else if(a&&a.isColor){t.uniforms[r]={type:"c",value:a.getHex()}}else if(a&&a.isVector2){t.uniforms[r]={type:"v2",value:a.toArray()}}else if(a&&a.isVector3){t.uniforms[r]={type:"v3",value:a.toArray()}}else if(a&&a.isVector4){t.uniforms[r]={type:"v4",value:a.toArray()}}else if(a&&a.isMatrix3){t.uniforms[r]={type:"m3",value:a.toArray()}}else if(a&&a.isMatrix4){t.uniforms[r]={type:"m4",value:a.toArray()}}else{t.uniforms[r]={value:a}}}if(Object.keys(this.defines).length>0)t.defines=this.defines;t.vertexShader=this.vertexShader;t.fragmentShader=this.fragmentShader;const n={};for(const s in this.extensions){if(this.extensions[s]===true)n[s]=true}if(Object.keys(n).length>0)t.extensions=n;return t};function Camera(){Object3D.call(this);this.type="Camera";this.matrixWorldInverse=new Matrix4;this.projectionMatrix=new Matrix4;this.projectionMatrixInverse=new Matrix4}Camera.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Camera,isCamera:true,copy:function(e,t){Object3D.prototype.copy.call(this,e,t);this.matrixWorldInverse.copy(e.matrixWorldInverse);this.projectionMatrix.copy(e.projectionMatrix);this.projectionMatrixInverse.copy(e.projectionMatrixInverse);return this},getWorldDirection:function(e){if(e===undefined){console.warn("THREE.Camera: .getWorldDirection() target is now required");e=new Vector3}this.updateWorldMatrix(true,false);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(e){Object3D.prototype.updateMatrixWorld.call(this,e);this.matrixWorldInverse.copy(this.matrixWorld).invert()},updateWorldMatrix:function(e,t){Object3D.prototype.updateWorldMatrix.call(this,e,t);this.matrixWorldInverse.copy(this.matrixWorld).invert()},clone:function(){return(new this.constructor).copy(this)}});function PerspectiveCamera(e=50,t=1,n=.1,r=2e3){Camera.call(this);this.type="PerspectiveCamera";this.fov=e;this.zoom=1;this.near=n;this.far=r;this.focus=10;this.aspect=t;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}PerspectiveCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:PerspectiveCamera,isPerspectiveCamera:true,copy:function(e,t){Camera.prototype.copy.call(this,e,t);this.fov=e.fov;this.zoom=e.zoom;this.near=e.near;this.far=e.far;this.focus=e.focus;this.aspect=e.aspect;this.view=e.view===null?null:Object.assign({},e.view);this.filmGauge=e.filmGauge;this.filmOffset=e.filmOffset;return this},setFocalLength:function(e){const t=.5*this.getFilmHeight()/e;this.fov=MathUtils.RAD2DEG*2*Math.atan(t);this.updateProjectionMatrix()},getFocalLength:function(){const e=Math.tan(MathUtils.DEG2RAD*.5*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return MathUtils.RAD2DEG*2*Math.atan(Math.tan(MathUtils.DEG2RAD*.5*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,n,r,i,a){this.aspect=e/t;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=r;this.view.width=i;this.view.height=a;this.updateProjectionMatrix()},clearViewOffset:function(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()},updateProjectionMatrix:function(){const e=this.near;let t=e*Math.tan(MathUtils.DEG2RAD*.5*this.fov)/this.zoom;let n=2*t;let r=this.aspect*n;let i=-.5*r;const a=this.view;if(this.view!==null&&this.view.enabled){const o=a.fullWidth,c=a.fullHeight;i+=a.offsetX*r/o;t-=a.offsetY*n/c;r*=a.width/o;n*=a.height/c}const s=this.filmOffset;if(s!==0)i+=e*s/this.getFilmWidth();this.projectionMatrix.makePerspective(i,i+r,t,t-n,e,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()},toJSON:function(e){const t=Object3D.prototype.toJSON.call(this,e);t.object.fov=this.fov;t.object.zoom=this.zoom;t.object.near=this.near;t.object.far=this.far;t.object.focus=this.focus;t.object.aspect=this.aspect;if(this.view!==null)t.object.view=Object.assign({},this.view);t.object.filmGauge=this.filmGauge;t.object.filmOffset=this.filmOffset;return t}});const fov=90,aspect=1;class CubeCamera extends Object3D{constructor(e,t,n){super();this.type="CubeCamera";if(n.isWebGLCubeRenderTarget!==true){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=n;const r=new PerspectiveCamera(fov,aspect,e,t);r.layers=this.layers;r.up.set(0,-1,0);r.lookAt(new Vector3(1,0,0));this.add(r);const i=new PerspectiveCamera(fov,aspect,e,t);i.layers=this.layers;i.up.set(0,-1,0);i.lookAt(new Vector3(-1,0,0));this.add(i);const a=new PerspectiveCamera(fov,aspect,e,t);a.layers=this.layers;a.up.set(0,0,1);a.lookAt(new Vector3(0,1,0));this.add(a);const s=new PerspectiveCamera(fov,aspect,e,t);s.layers=this.layers;s.up.set(0,0,-1);s.lookAt(new Vector3(0,-1,0));this.add(s);const o=new PerspectiveCamera(fov,aspect,e,t);o.layers=this.layers;o.up.set(0,-1,0);o.lookAt(new Vector3(0,0,1));this.add(o);const c=new PerspectiveCamera(fov,aspect,e,t);c.layers=this.layers;c.up.set(0,-1,0);c.lookAt(new Vector3(0,0,-1));this.add(c)}update(e,t){if(this.parent===null)this.updateMatrixWorld();const n=this.renderTarget;const[r,i,a,s,o,c]=this.children;const l=e.xr.enabled;const u=e.getRenderTarget();e.xr.enabled=false;const h=n.texture.generateMipmaps;n.texture.generateMipmaps=false;e.setRenderTarget(n,0);e.render(t,r);e.setRenderTarget(n,1);e.render(t,i);e.setRenderTarget(n,2);e.render(t,a);e.setRenderTarget(n,3);e.render(t,s);e.setRenderTarget(n,4);e.render(t,o);n.texture.generateMipmaps=h;e.setRenderTarget(n,5);e.render(t,c);e.setRenderTarget(u);e.xr.enabled=l}}class CubeTexture extends Texture{constructor(e,t,n,r,i,a,s,o,c,l){e=e!==undefined?e:[];t=t!==undefined?t:CubeReflectionMapping;s=s!==undefined?s:RGBFormat;super(e,t,n,r,i,a,s,o,c,l);this._needsFlipEnvMap=true;this.flipY=false}get images(){return this.image}set images(e){this.image=e}}CubeTexture.prototype.isCubeTexture=true;class WebGLCubeRenderTarget extends WebGLRenderTarget{constructor(e,t,n){if(Number.isInteger(t)){console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )");t=n}super(e,e,t);t=t||{};this.texture=new CubeTexture(undefined,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding);this.texture.generateMipmaps=t.generateMipmaps!==undefined?t.generateMipmaps:false;this.texture.minFilter=t.minFilter!==undefined?t.minFilter:LinearFilter;this.texture._needsFlipEnvMap=false}fromEquirectangularTexture(e,t){this.texture.type=t.type;this.texture.format=RGBAFormat;this.texture.encoding=t.encoding;this.texture.generateMipmaps=t.generateMipmaps;this.texture.minFilter=t.minFilter;this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`};const r=new BoxGeometry(5,5,5);const i=new ShaderMaterial({name:"CubemapFromEquirect",uniforms:cloneUniforms(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:BackSide,blending:NoBlending});i.uniforms.tEquirect.value=t;const a=new Mesh(r,i);const s=t.minFilter;if(t.minFilter===LinearMipmapLinearFilter)t.minFilter=LinearFilter;const o=new CubeCamera(1,10,this);o.update(e,a);t.minFilter=s;a.geometry.dispose();a.material.dispose();return this}clear(t,n,r,i){const e=t.getRenderTarget();for(let e=0;e<6;e++){t.setRenderTarget(this,e);t.clear(n,r,i)}t.setRenderTarget(e)}}WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget=true;class DataTexture extends Texture{constructor(e,t,n,r,i,a,s,o,c,l,u,h){super(null,a,s,o,c,l,r,i,u,h);this.image={data:e||null,width:t||1,height:n||1};this.magFilter=c!==undefined?c:NearestFilter;this.minFilter=l!==undefined?l:NearestFilter;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1;this.needsUpdate=true}}DataTexture.prototype.isDataTexture=true;const _sphere$1=new Sphere;const _vector$5=new Vector3;class Frustum{constructor(e=new Plane,t=new Plane,n=new Plane,r=new Plane,i=new Plane,a=new Plane){this.planes=[e,t,n,r,i,a]}set(e,t,n,r,i,a){const s=this.planes;s[0].copy(e);s[1].copy(t);s[2].copy(n);s[3].copy(r);s[4].copy(i);s[5].copy(a);return this}copy(t){const n=this.planes;for(let e=0;e<6;e++){n[e].copy(t.planes[e])}return this}setFromProjectionMatrix(e){const t=this.planes;const n=e.elements;const r=n[0],i=n[1],a=n[2],s=n[3];const o=n[4],c=n[5],l=n[6],u=n[7];const h=n[8],d=n[9],f=n[10],p=n[11];const m=n[12],g=n[13],_=n[14],y=n[15];t[0].setComponents(s-r,u-o,p-h,y-m).normalize();t[1].setComponents(s+r,u+o,p+h,y+m).normalize();t[2].setComponents(s+i,u+c,p+d,y+g).normalize();t[3].setComponents(s-i,u-c,p-d,y-g).normalize();t[4].setComponents(s-a,u-l,p-f,y-_).normalize();t[5].setComponents(s+a,u+l,p+f,y+_).normalize();return this}intersectsObject(e){const t=e.geometry;if(t.boundingSphere===null)t.computeBoundingSphere();_sphere$1.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);return this.intersectsSphere(_sphere$1)}intersectsSprite(e){_sphere$1.center.set(0,0,0);_sphere$1.radius=.7071067811865476;_sphere$1.applyMatrix4(e.matrixWorld);return this.intersectsSphere(_sphere$1)}intersectsSphere(e){const t=this.planes;const n=e.center;const r=-e.radius;for(let e=0;e<6;e++){const i=t[e].distanceToPoint(n);if(i<r){return false}}return true}intersectsBox(t){const n=this.planes;for(let e=0;e<6;e++){const r=n[e];_vector$5.x=r.normal.x>0?t.max.x:t.min.x;_vector$5.y=r.normal.y>0?t.max.y:t.min.y;_vector$5.z=r.normal.z>0?t.max.z:t.min.z;if(r.distanceToPoint(_vector$5)<0){return false}}return true}containsPoint(t){const n=this.planes;for(let e=0;e<6;e++){if(n[e].distanceToPoint(t)<0){return false}}return true}clone(){return(new this.constructor).copy(this)}}function WebGLAnimation(){let n=null;let e=false;let r=null;let i=null;function a(e,t){r(e,t);i=n.requestAnimationFrame(a)}return{start:function(){if(e===true)return;if(r===null)return;i=n.requestAnimationFrame(a);e=true},stop:function(){n.cancelAnimationFrame(i);e=false},setAnimationLoop:function(e){r=e},setContext:function(e){n=e}}}function WebGLAttributes(s,e){const o=e.isWebGL2;const i=new WeakMap;function a(e,t){const n=e.array;const r=e.usage;const i=s.createBuffer();s.bindBuffer(t,i);s.bufferData(t,n,r);e.onUploadCallback();let a=5126;if(n instanceof Float32Array){a=5126}else if(n instanceof Float64Array){console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.")}else if(n instanceof Uint16Array){if(e.isFloat16BufferAttribute){if(o){a=5131}else{console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.")}}else{a=5123}}else if(n instanceof Int16Array){a=5122}else if(n instanceof Uint32Array){a=5125}else if(n instanceof Int32Array){a=5124}else if(n instanceof Int8Array){a=5120}else if(n instanceof Uint8Array){a=5121}return{buffer:i,type:a,bytesPerElement:n.BYTES_PER_ELEMENT,version:e.version}}function c(e,t,n){const r=t.array;const i=t.updateRange;s.bindBuffer(n,e);if(i.count===-1){s.bufferSubData(n,0,r)}else{if(o){s.bufferSubData(n,i.offset*r.BYTES_PER_ELEMENT,r,i.offset,i.count)}else{s.bufferSubData(n,i.offset*r.BYTES_PER_ELEMENT,r.subarray(i.offset,i.offset+i.count))}i.count=-1}}function t(e){if(e.isInterleavedBufferAttribute)e=e.data;return i.get(e)}function n(e){if(e.isInterleavedBufferAttribute)e=e.data;const t=i.get(e);if(t){s.deleteBuffer(t.buffer);i.delete(e)}}function r(e,t){if(e.isGLBufferAttribute){const r=i.get(e);if(!r||r.version<e.version){i.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version})}return}if(e.isInterleavedBufferAttribute)e=e.data;const n=i.get(e);if(n===undefined){i.set(e,a(e,t))}else if(n.version<e.version){c(n.buffer,e,t);n.version=e.version}}return{get:t,remove:n,update:r}}class PlaneGeometry extends BufferGeometry{constructor(e=1,t=1,n=1,r=1){super();this.type="PlaneGeometry";this.parameters={width:e,height:t,widthSegments:n,heightSegments:r};const i=e/2;const a=t/2;const s=Math.floor(n);const o=Math.floor(r);const c=s+1;const l=o+1;const u=e/s;const h=t/o;const d=[];const f=[];const p=[];const m=[];for(let t=0;t<l;t++){const g=t*h-a;for(let e=0;e<c;e++){const _=e*u-i;f.push(_,-g,0);p.push(0,0,1);m.push(e/s);m.push(1-t/o)}}for(let t=0;t<o;t++){for(let e=0;e<s;e++){const y=e+c*t;const v=e+c*(t+1);const x=e+1+c*(t+1);const b=e+1+c*t;d.push(y,v,b);d.push(v,x,b)}}this.setIndex(d);this.setAttribute("position",new Float32BufferAttribute(f,3));this.setAttribute("normal",new Float32BufferAttribute(p,3));this.setAttribute("uv",new Float32BufferAttribute(m,2))}}var alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";var alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var alphatest_fragment="#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";var aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";var aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var begin_vertex="vec3 transformed = vec3( position );";var beginnormal_vertex="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var bsdfs="vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";var bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";var clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var color_fragment="#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";var color_pars_fragment="#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";var color_pars_vertex="#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_vertex="#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor.xyz *= color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";var common="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";var cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var defaultnormal_vertex="vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";var emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var encodings_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );";var encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";var envmap_fragment="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var envmap_common_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var envmap_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var envmap_vertex="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var fog_vertex="#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif";var fog_pars_vertex="#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";var fog_fragment="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var gradientmap_pars_fragment="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";var lightmap_fragment="#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";var lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";var lights_pars_begin="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";var envmap_physical_pars_fragment="#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";var lights_toon_fragment="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var lights_toon_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";var lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var lights_phong_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";var lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";var lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var lights_fragment_begin="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var lights_fragment_maps="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";var lights_fragment_end="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";var logdepthbuf_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var logdepthbuf_pars_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";var logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";var map_fragment="#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";var map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var map_particle_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var map_particle_pars_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";var morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";var morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";var normal_fragment_begin="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";var normal_fragment_maps="#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";var clearcoat_normal_fragment_begin="#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";var clearcoat_normal_fragment_maps="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";var clearcoat_pars_fragment="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";var packing="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";var premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var project_vertex="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var dithering_fragment="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var dithering_pars_fragment="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";var shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";var shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";var skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var tonemapping_fragment="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var tonemapping_pars_fragment="#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var transmissionmap_fragment="#ifdef USE_TRANSMISSIONMAP\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif";var transmissionmap_pars_fragment="#ifdef USE_TRANSMISSIONMAP\n\tuniform sampler2D transmissionMap;\n#endif";var uv_pars_fragment="#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";var uv_pars_vertex="#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";var uv_vertex="#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";var uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";var uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";var uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";var worldpos_vertex="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";var background_frag="uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var background_vert="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";var cube_frag="#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var cube_vert="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";var depth_frag="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";var depth_vert="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";var distanceRGBA_frag="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";var distanceRGBA_vert="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";var equirect_frag="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var equirect_vert="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";var linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";var linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";var meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshbasic_vert="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";var meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var meshmatcap_frag="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshmatcap_vert="#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";var meshtoon_frag="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshtoon_vert="#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var meshphysical_frag="#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshphysical_vert="#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var normal_frag="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";var normal_vert="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";var points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";var points_vert="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";var shadow_frag="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";var shadow_vert="#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var sprite_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";var sprite_vert="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const ShaderChunk={alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_common_pars_fragment:envmap_common_pars_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars_begin:lights_pars_begin,lights_toon_fragment:lights_toon_fragment,lights_toon_pars_fragment:lights_toon_pars_fragment,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normalmap_pars_fragment:normalmap_pars_fragment,clearcoat_normal_fragment_begin:clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps:clearcoat_normal_fragment_maps,clearcoat_pars_fragment:clearcoat_pars_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,transmissionmap_fragment:transmissionmap_fragment,transmissionmap_pars_fragment:transmissionmap_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,background_frag:background_frag,background_vert:background_vert,cube_frag:cube_frag,cube_vert:cube_vert,depth_frag:depth_frag,depth_vert:depth_vert,distanceRGBA_frag:distanceRGBA_frag,distanceRGBA_vert:distanceRGBA_vert,equirect_frag:equirect_frag,equirect_vert:equirect_vert,linedashed_frag:linedashed_frag,linedashed_vert:linedashed_vert,meshbasic_frag:meshbasic_frag,meshbasic_vert:meshbasic_vert,meshlambert_frag:meshlambert_frag,meshlambert_vert:meshlambert_vert,meshmatcap_frag:meshmatcap_frag,meshmatcap_vert:meshmatcap_vert,meshtoon_frag:meshtoon_frag,meshtoon_vert:meshtoon_vert,meshphong_frag:meshphong_frag,meshphong_vert:meshphong_vert,meshphysical_frag:meshphysical_frag,meshphysical_vert:meshphysical_vert,normal_frag:normal_frag,normal_vert:normal_vert,points_frag:points_frag,points_vert:points_vert,shadow_frag:shadow_frag,shadow_vert:shadow_vert,sprite_frag:sprite_frag,sprite_vert:sprite_vert};const UniformsLib={common:{diffuse:{value:new Color(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Matrix3},uv2Transform:{value:new Matrix3},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Color(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3}},sprite:{diffuse:{value:new Color(15658734)},opacity:{value:1},center:{value:new Vector2(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3}}};const ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},specular:{value:new Color(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.normal_vert,fragmentShader:ShaderChunk.normal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3},t2D:{value:null}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},cube:{uniforms:mergeUniforms([UniformsLib.envmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0)},opacity:{value:1}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Color(0)},transmission:{value:0},transmissionMap:{value:null}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};function WebGLBackground(o,c,n,l,r){const u=new Color(0);let h=0;let d;let f;let p=null;let m=0;let g=null;function e(e,t,n,r){let i=t.isScene===true?t.background:null;if(i&&i.isTexture){i=c.get(i)}const a=o.xr;const s=a.getSession&&a.getSession();if(s&&s.environmentBlendMode==="additive"){i=null}if(i===null){_(u,h)}else if(i&&i.isColor){_(i,1);r=true}if(o.autoClear||r){o.clear(o.autoClearColor,o.autoClearDepth,o.autoClearStencil)}if(i&&(i.isCubeTexture||i.isWebGLCubeRenderTarget||i.mapping===CubeUVReflectionMapping)){if(f===undefined){f=new Mesh(new BoxGeometry(1,1,1),new ShaderMaterial({name:"BackgroundCubeMaterial",uniforms:cloneUniforms(ShaderLib.cube.uniforms),vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:false,depthWrite:false,fog:false}));f.geometry.deleteAttribute("normal");f.geometry.deleteAttribute("uv");f.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)};Object.defineProperty(f.material,"envMap",{get:function(){return this.uniforms.envMap.value}});l.update(f)}if(i.isWebGLCubeRenderTarget){i=i.texture}f.material.uniforms.envMap.value=i;f.material.uniforms.flipEnvMap.value=i.isCubeTexture&&i._needsFlipEnvMap?-1:1;if(p!==i||m!==i.version||g!==o.toneMapping){f.material.needsUpdate=true;p=i;m=i.version;g=o.toneMapping}e.unshift(f,f.geometry,f.material,0,0,null)}else if(i&&i.isTexture){if(d===undefined){d=new Mesh(new PlaneGeometry(2,2),new ShaderMaterial({name:"BackgroundMaterial",uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:false,depthWrite:false,fog:false}));d.geometry.deleteAttribute("normal");Object.defineProperty(d.material,"map",{get:function(){return this.uniforms.t2D.value}});l.update(d)}d.material.uniforms.t2D.value=i;if(i.matrixAutoUpdate===true){i.updateMatrix()}d.material.uniforms.uvTransform.value.copy(i.matrix);if(p!==i||m!==i.version||g!==o.toneMapping){d.material.needsUpdate=true;p=i;m=i.version;g=o.toneMapping}e.unshift(d,d.geometry,d.material,0,0,null)}}function _(e,t){n.buffers.color.setClear(e.r,e.g,e.b,t,r)}return{getClearColor:function(){return u},setClearColor:function(e,t=1){u.set(e);h=t;_(u,h)},getClearAlpha:function(){return h},setClearAlpha:function(e){h=e;_(u,h)},render:e}}function WebGLBindingStates(x,b,M,w){const i=x.getParameter(34921);const t=w.isWebGL2?null:b.get("OES_vertex_array_object");const c=w.isWebGL2||t!==null;const o={};const e=f(null);let l=e;function n(e,t,n,r,i){let a=false;if(c){const s=d(r,n,t);if(l!==s){l=s;h(l.object)}a=p(r,i);if(a)m(r,i)}else{const o=t.wireframe===true;if(l.geometry!==r.id||l.program!==n.id||l.wireframe!==o){l.geometry=r.id;l.program=n.id;l.wireframe=o;a=true}}if(e.isInstancedMesh===true){a=true}if(i!==null){M.update(i,34963)}if(a){g(e,t,n,r);if(i!==null){x.bindBuffer(34963,M.get(i).buffer)}}}function u(){if(w.isWebGL2)return x.createVertexArray();return t.createVertexArrayOES()}function h(e){if(w.isWebGL2)return x.bindVertexArray(e);return t.bindVertexArrayOES(e)}function a(e){if(w.isWebGL2)return x.deleteVertexArray(e);return t.deleteVertexArrayOES(e)}function d(e,t,n){const r=n.wireframe===true;let i=o[e.id];if(i===undefined){i={};o[e.id]=i}let a=i[t.id];if(a===undefined){a={};i[t.id]=a}let s=a[r];if(s===undefined){s=f(u());a[r]=s}return s}function f(e){const t=[];const n=[];const r=[];for(let e=0;e<i;e++){t[e]=0;n[e]=0;r[e]=0}return{geometry:null,program:null,wireframe:false,newAttributes:t,enabledAttributes:n,attributeDivisors:r,object:e,attributes:{},index:null}}function p(e,t){const n=l.attributes;const r=e.attributes;let i=0;for(const a in r){const s=n[a];const o=r[a];if(s===undefined)return true;if(s.attribute!==o)return true;if(s.data!==o.data)return true;i++}if(l.attributesNum!==i)return true;if(l.index!==t)return true;return false}function m(e,t){const n={};const r=e.attributes;let i=0;for(const a in r){const s=r[a];const o={};o.attribute=s;if(s.data){o.data=s.data}n[a]=o;i++}l.attributes=n;l.attributesNum=i;l.index=t}function S(){const n=l.newAttributes;for(let e=0,t=n.length;e<t;e++){n[e]=0}}function T(e){E(e,0)}function E(t,n){const e=l.newAttributes;const r=l.enabledAttributes;const i=l.attributeDivisors;e[t]=1;if(r[t]===0){x.enableVertexAttribArray(t);r[t]=1}if(i[t]!==n){const e=w.isWebGL2?x:b.get("ANGLE_instanced_arrays");e[w.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](t,n);i[t]=n}}function A(){const n=l.newAttributes;const r=l.enabledAttributes;for(let e=0,t=r.length;e<t;e++){if(r[e]!==n[e]){x.disableVertexAttribArray(e);r[e]=0}}}function L(e,t,n,r,i,a){if(w.isWebGL2===true&&(n===5124||n===5125)){x.vertexAttribIPointer(e,t,n,i,a)}else{x.vertexAttribPointer(e,t,n,r,i,a)}}function g(e,t,n,r){if(w.isWebGL2===false&&(e.isInstancedMesh||r.isInstancedBufferGeometry)){if(b.get("ANGLE_instanced_arrays")===null)return}S();const i=r.attributes;const a=n.getAttributes();const s=t.defaultAttributeValues;for(const o in a){const c=a[o];if(c>=0){const l=i[o];if(l!==undefined){const u=l.normalized;const h=l.itemSize;const d=M.get(l);if(d===undefined)continue;const f=d.buffer;const p=d.type;const m=d.bytesPerElement;if(l.isInterleavedBufferAttribute){const g=l.data;const _=g.stride;const y=l.offset;if(g&&g.isInstancedInterleavedBuffer){E(c,g.meshPerAttribute);if(r._maxInstanceCount===undefined){r._maxInstanceCount=g.meshPerAttribute*g.count}}else{T(c)}x.bindBuffer(34962,f);L(c,h,p,u,_*m,y*m)}else{if(l.isInstancedBufferAttribute){E(c,l.meshPerAttribute);if(r._maxInstanceCount===undefined){r._maxInstanceCount=l.meshPerAttribute*l.count}}else{T(c)}x.bindBuffer(34962,f);L(c,h,p,u,0,0)}}else if(o==="instanceMatrix"){const d=M.get(e.instanceMatrix);if(d===undefined)continue;const f=d.buffer;const p=d.type;E(c+0,1);E(c+1,1);E(c+2,1);E(c+3,1);x.bindBuffer(34962,f);x.vertexAttribPointer(c+0,4,p,false,64,0);x.vertexAttribPointer(c+1,4,p,false,64,16);x.vertexAttribPointer(c+2,4,p,false,64,32);x.vertexAttribPointer(c+3,4,p,false,64,48)}else if(o==="instanceColor"){const d=M.get(e.instanceColor);if(d===undefined)continue;const f=d.buffer;const p=d.type;E(c,1);x.bindBuffer(34962,f);x.vertexAttribPointer(c,3,p,false,12,0)}else if(s!==undefined){const v=s[o];if(v!==undefined){switch(v.length){case 2:x.vertexAttrib2fv(c,v);break;case 3:x.vertexAttrib3fv(c,v);break;case 4:x.vertexAttrib4fv(c,v);break;default:x.vertexAttrib1fv(c,v)}}}}}A()}function r(){y();for(const e in o){const t=o[e];for(const n in t){const r=t[n];for(const i in r){a(r[i].object);delete r[i]}delete t[n]}delete o[e]}}function s(e){if(o[e.id]===undefined)return;const t=o[e.id];for(const n in t){const r=t[n];for(const i in r){a(r[i].object);delete r[i]}delete t[n]}delete o[e.id]}function _(e){for(const t in o){const n=o[t];if(n[e.id]===undefined)continue;const r=n[e.id];for(const i in r){a(r[i].object);delete r[i]}delete n[e.id]}}function y(){v();if(l===e)return;l=e;h(l.object)}function v(){e.geometry=null;e.program=null;e.wireframe=false}return{setup:n,reset:y,resetDefaultState:v,dispose:r,releaseStatesOfGeometry:s,releaseStatesOfProgram:_,initAttributes:S,enableAttribute:T,disableUnusedAttributes:A}}function WebGLBufferRenderer(a,s,o,e){const c=e.isWebGL2;let l;function t(e){l=e}function n(e,t){a.drawArrays(l,e,t);o.update(t,l,1)}function r(e,t,n){if(n===0)return;let r,i;if(c){r=a;i="drawArraysInstanced"}else{r=s.get("ANGLE_instanced_arrays");i="drawArraysInstancedANGLE";if(r===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}r[i](l,e,t,n);o.update(t,l,n)}this.setMode=t;this.render=n;this.renderInstances=r}function WebGLCapabilities(t,n,e){let r;function i(){if(r!==undefined)return r;if(n.has("EXT_texture_filter_anisotropic")===true){const e=n.get("EXT_texture_filter_anisotropic");r=t.getParameter(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else{r=0}return r}function a(e){if(e==="highp"){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0){return"highp"}e="mediump"}if(e==="mediump"){if(t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0){return"mediump"}}return"lowp"}const s=typeof WebGL2RenderingContext!=="undefined"&&t instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!=="undefined"&&t instanceof WebGL2ComputeRenderingContext;let o=e.precision!==undefined?e.precision:"highp";const c=a(o);if(c!==o){console.warn("THREE.WebGLRenderer:",o,"not supported, using",c,"instead.");o=c}const l=e.logarithmicDepthBuffer===true;const u=t.getParameter(34930);const h=t.getParameter(35660);const d=t.getParameter(3379);const f=t.getParameter(34076);const p=t.getParameter(34921);const m=t.getParameter(36347);const g=t.getParameter(36348);const _=t.getParameter(36349);const y=h>0;const v=s||n.has("OES_texture_float");const x=y&&v;const b=s?t.getParameter(36183):0;return{isWebGL2:s,getMaxAnisotropy:i,getMaxPrecision:a,precision:o,logarithmicDepthBuffer:l,maxTextures:u,maxVertexTextures:h,maxTextureSize:d,maxCubemapSize:f,maxAttributes:p,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:_,vertexTextures:y,floatFragmentTextures:v,floatVertexTextures:x,maxSamples:b}}function WebGLClipping(l){const c=this;let u=null,h=0,d=false,f=false;const p=new Plane,m=new Matrix3,g={value:null,needsUpdate:false};this.uniform=g;this.numPlanes=0;this.numIntersection=0;this.init=function(e,t,n){const r=e.length!==0||t||h!==0||d;d=t;u=y(e,n,0);h=e.length;return r};this.beginShadows=function(){f=true;y(null)};this.endShadows=function(){f=false;_()};this.setState=function(e,n,r){const i=e.clippingPlanes,a=e.clipIntersection,t=e.clipShadows;const s=l.get(e);if(!d||i===null||i.length===0||f&&!t){if(f){y(null)}else{_()}}else{const o=f?0:h,c=o*4;let t=s.clippingState||null;g.value=t;t=y(i,n,c,r);for(let e=0;e!==c;++e){t[e]=u[e]}s.clippingState=t;this.numIntersection=a?this.numPlanes:0;this.numPlanes+=o}};function _(){if(g.value!==u){g.value=u;g.needsUpdate=h>0}c.numPlanes=h;c.numIntersection=0}function y(n,e,r,t){const i=n!==null?n.length:0;let a=null;if(i!==0){a=g.value;if(t!==true||a===null){const s=r+i*4,o=e.matrixWorldInverse;m.getNormalMatrix(o);if(a===null||a.length<s){a=new Float32Array(s)}for(let e=0,t=r;e!==i;++e,t+=4){p.copy(n[e]).applyMatrix4(o,m);p.normal.toArray(a,t);a[t+3]=p.constant}}g.value=a;g.needsUpdate=true}c.numPlanes=i;c.numIntersection=0;return a}}function WebGLCubeMaps(s){let o=new WeakMap;function c(e,t){if(t===EquirectangularReflectionMapping){e.mapping=CubeReflectionMapping}else if(t===EquirectangularRefractionMapping){e.mapping=CubeRefractionMapping}return e}function e(e){if(e&&e.isTexture){const t=e.mapping;if(t===EquirectangularReflectionMapping||t===EquirectangularRefractionMapping){if(o.has(e)){const n=o.get(e).texture;return c(n,e.mapping)}else{const r=e.image;if(r&&r.height>0){const i=s.getRenderTarget();const a=new WebGLCubeRenderTarget(r.height/2);a.fromEquirectangularTexture(s,e);o.set(e,a);s.setRenderTarget(i);e.addEventListener("dispose",l);return c(a.texture,e.mapping)}else{return null}}}}return e}function l(e){const t=e.target;t.removeEventListener("dispose",l);const n=o.get(t);if(n!==undefined){o.delete(t);n.dispose()}}function t(){o=new WeakMap}return{get:e,dispose:t}}function WebGLExtensions(n){const r={};function i(e){if(r[e]!==undefined){return r[e]}let t;switch(e){case"WEBGL_depth_texture":t=n.getExtension("WEBGL_depth_texture")||n.getExtension("MOZ_WEBGL_depth_texture")||n.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":t=n.getExtension("EXT_texture_filter_anisotropic")||n.getExtension("MOZ_EXT_texture_filter_anisotropic")||n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":t=n.getExtension("WEBGL_compressed_texture_s3tc")||n.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":t=n.getExtension("WEBGL_compressed_texture_pvrtc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:t=n.getExtension(e)}r[e]=t;return t}return{has:function(e){return i(e)!==null},init:function(e){if(e.isWebGL2){i("EXT_color_buffer_float")}else{i("WEBGL_depth_texture");i("OES_texture_float");i("OES_texture_half_float");i("OES_texture_half_float_linear");i("OES_standard_derivatives");i("OES_element_index_uint");i("OES_vertex_array_object");i("ANGLE_instanced_arrays")}i("OES_texture_float_linear");i("EXT_color_buffer_half_float")},get:function(e){const t=i(e);if(t===null){console.warn("THREE.WebGLRenderer: "+e+" extension not supported.")}return t}}}function WebGLGeometries(e,h,i,a){const s={};const d=new WeakMap;function o(e){const t=e.target;if(t.index!==null){h.remove(t.index)}for(const r in t.attributes){h.remove(t.attributes[r])}t.removeEventListener("dispose",o);delete s[t.id];const n=d.get(t);if(n){h.remove(n);d.delete(t)}a.releaseStatesOfGeometry(t);if(t.isInstancedBufferGeometry===true){delete t._maxInstanceCount}i.memory.geometries--}function t(e,t){if(s[t.id]===true)return t;t.addEventListener("dispose",o);s[t.id]=true;i.memory.geometries++;return t}function n(e){const t=e.attributes;for(const r in t){h.update(t[r],34962)}const n=e.morphAttributes;for(const r in n){const i=n[r];for(let e=0,t=i.length;e<t;e++){h.update(i[e],34962)}}}function r(e){const n=[];const t=e.index;const r=e.attributes.position;let i=0;if(t!==null){const o=t.array;i=t.version;for(let e=0,t=o.length;e<t;e+=3){const c=o[e+0];const l=o[e+1];const u=o[e+2];n.push(c,l,l,u,u,c)}}else{const o=r.array;i=r.version;for(let e=0,t=o.length/3-1;e<t;e+=3){const c=e+0;const l=e+1;const u=e+2;n.push(c,l,l,u,u,c)}}const a=new(arrayMax(n)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(n,1);a.version=i;const s=d.get(e);if(s)h.remove(s);d.set(e,a)}function c(e){const t=d.get(e);if(t){const n=e.index;if(n!==null){if(t.version<n.version){r(e)}}}else{r(e)}return d.get(e)}return{get:t,update:n,getWireframeAttribute:c}}function WebGLIndexedBufferRenderer(a,s,o,e){const c=e.isWebGL2;let l;function t(e){l=e}let u,h;function n(e){u=e.type;h=e.bytesPerElement}function r(e,t){a.drawElements(l,t,u,e*h);o.update(t,l,1)}function i(e,t,n){if(n===0)return;let r,i;if(c){r=a;i="drawElementsInstanced"}else{r=s.get("ANGLE_instanced_arrays");i="drawElementsInstancedANGLE";if(r===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}r[i](l,t,u,e*h,n);o.update(t,l,n)}this.setMode=t;this.setIndex=n;this.render=r;this.renderInstances=i}function WebGLInfo(e){const t={geometries:0,textures:0};const r={frame:0,calls:0,triangles:0,points:0,lines:0};function n(e,t,n){r.calls++;switch(t){case 4:r.triangles+=n*(e/3);break;case 1:r.lines+=n*(e/2);break;case 3:r.lines+=n*(e-1);break;case 2:r.lines+=n*e;break;case 0:r.points+=n*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",t);break}}function i(){r.frame++;r.calls=0;r.triangles=0;r.points=0;r.lines=0}return{memory:t,render:r,programs:null,autoReset:true,reset:i,update:n}}function numericalSort(e,t){return e[0]-t[0]}function absNumericalSort(e,t){return Math.abs(t[1])-Math.abs(e[1])}function WebGLMorphtargets(p){const m={};const g=new Float32Array(8);const _=[];for(let e=0;e<8;e++){_[e]=[e,0]}function e(e,t,n,r){const i=e.morphTargetInfluences;const a=i===undefined?0:i.length;let s=m[t.id];if(s===undefined){s=[];for(let e=0;e<a;e++){s[e]=[e,0]}m[t.id]=s}for(let e=0;e<a;e++){const h=s[e];h[0]=e;h[1]=i[e]}s.sort(absNumericalSort);for(let e=0;e<8;e++){if(e<a&&s[e][1]){_[e][0]=s[e][0];_[e][1]=s[e][1]}else{_[e][0]=Number.MAX_SAFE_INTEGER;_[e][1]=0}}_.sort(numericalSort);const o=n.morphTargets&&t.morphAttributes.position;const c=n.morphNormals&&t.morphAttributes.normal;let l=0;for(let e=0;e<8;e++){const h=_[e];const d=h[0];const f=h[1];if(d!==Number.MAX_SAFE_INTEGER&&f){if(o&&t.getAttribute("morphTarget"+e)!==o[d]){t.setAttribute("morphTarget"+e,o[d])}if(c&&t.getAttribute("morphNormal"+e)!==c[d]){t.setAttribute("morphNormal"+e,c[d])}g[e]=f;l+=f}else{if(o&&t.hasAttribute("morphTarget"+e)===true){t.deleteAttribute("morphTarget"+e)}if(c&&t.hasAttribute("morphNormal"+e)===true){t.deleteAttribute("morphNormal"+e)}g[e]=0}}const u=t.morphTargetsRelative?1:1-l;r.getUniforms().setValue(p,"morphTargetBaseInfluence",u);r.getUniforms().setValue(p,"morphTargetInfluences",g)}return{update:e}}function WebGLObjects(e,i,a,s){let o=new WeakMap;function t(e){const t=s.render.frame;const n=e.geometry;const r=i.get(e,n);if(o.get(r)!==t){i.update(r);o.set(r,t)}if(e.isInstancedMesh){if(e.hasEventListener("dispose",c)===false){e.addEventListener("dispose",c)}a.update(e.instanceMatrix,34962);if(e.instanceColor!==null){a.update(e.instanceColor,34962)}}return r}function n(){o=new WeakMap}function c(e){const t=e.target;t.removeEventListener("dispose",c);a.remove(t.instanceMatrix);if(t.instanceColor!==null)a.remove(t.instanceColor)}return{update:t,dispose:n}}class DataTexture2DArray extends Texture{constructor(e=null,t=1,n=1,r=1){super(null);this.image={data:e,width:t,height:n,depth:r};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.needsUpdate=true}}DataTexture2DArray.prototype.isDataTexture2DArray=true;class DataTexture3D extends Texture{constructor(e=null,t=1,n=1,r=1){super(null);this.image={data:e,width:t,height:n,depth:r};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.needsUpdate=true}}DataTexture3D.prototype.isDataTexture3D=true;const emptyTexture=new Texture;const emptyTexture2dArray=new DataTexture2DArray;const emptyTexture3d=new DataTexture3D;const emptyCubeTexture=new CubeTexture;const arrayCacheF32=[];const arrayCacheI32=[];const mat4array=new Float32Array(16);const mat3array=new Float32Array(9);const mat2array=new Float32Array(4);function flatten(n,r,i){const e=n[0];if(e<=0||e>0)return n;const t=r*i;let a=arrayCacheF32[t];if(a===undefined){a=new Float32Array(t);arrayCacheF32[t]=a}if(r!==0){e.toArray(a,0);for(let e=1,t=0;e!==r;++e){t+=i;n[e].toArray(a,t)}}return a}function arraysEqual(n,r){if(n.length!==r.length)return false;for(let e=0,t=n.length;e<t;e++){if(n[e]!==r[e])return false}return true}function copyArray(n,r){for(let e=0,t=r.length;e<t;e++){n[e]=r[e]}}function allocTexUnits(t,n){let r=arrayCacheI32[n];if(r===undefined){r=new Int32Array(n);arrayCacheI32[n]=r}for(let e=0;e!==n;++e){r[e]=t.allocateTextureUnit()}return r}function setValueV1f(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1f(this.addr,t);n[0]=t}function setValueV2f(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y){e.uniform2f(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(arraysEqual(n,t))return;e.uniform2fv(this.addr,t);copyArray(n,t)}}function setValueV3f(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3f(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else if(t.r!==undefined){if(n[0]!==t.r||n[1]!==t.g||n[2]!==t.b){e.uniform3f(this.addr,t.r,t.g,t.b);n[0]=t.r;n[1]=t.g;n[2]=t.b}}else{if(arraysEqual(n,t))return;e.uniform3fv(this.addr,t);copyArray(n,t)}}function setValueV4f(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4f(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(arraysEqual(n,t))return;e.uniform4fv(this.addr,t);copyArray(n,t)}}function setValueM2(e,t){const n=this.cache;const r=t.elements;if(r===undefined){if(arraysEqual(n,t))return;e.uniformMatrix2fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,r))return;mat2array.set(r);e.uniformMatrix2fv(this.addr,false,mat2array);copyArray(n,r)}}function setValueM3(e,t){const n=this.cache;const r=t.elements;if(r===undefined){if(arraysEqual(n,t))return;e.uniformMatrix3fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,r))return;mat3array.set(r);e.uniformMatrix3fv(this.addr,false,mat3array);copyArray(n,r)}}function setValueM4(e,t){const n=this.cache;const r=t.elements;if(r===undefined){if(arraysEqual(n,t))return;e.uniformMatrix4fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,r))return;mat4array.set(r);e.uniformMatrix4fv(this.addr,false,mat4array);copyArray(n,r)}}function setValueT1(e,t,n){const r=this.cache;const i=n.allocateTextureUnit();if(r[0]!==i){e.uniform1i(this.addr,i);r[0]=i}n.safeSetTexture2D(t||emptyTexture,i)}function setValueT2DArray1(e,t,n){const r=this.cache;const i=n.allocateTextureUnit();if(r[0]!==i){e.uniform1i(this.addr,i);r[0]=i}n.setTexture2DArray(t||emptyTexture2dArray,i)}function setValueT3D1(e,t,n){const r=this.cache;const i=n.allocateTextureUnit();if(r[0]!==i){e.uniform1i(this.addr,i);r[0]=i}n.setTexture3D(t||emptyTexture3d,i)}function setValueT6(e,t,n){const r=this.cache;const i=n.allocateTextureUnit();if(r[0]!==i){e.uniform1i(this.addr,i);r[0]=i}n.safeSetTextureCube(t||emptyCubeTexture,i)}function setValueV1i(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1i(this.addr,t);n[0]=t}function setValueV2i(e,t){const n=this.cache;if(arraysEqual(n,t))return;e.uniform2iv(this.addr,t);copyArray(n,t)}function setValueV3i(e,t){const n=this.cache;if(arraysEqual(n,t))return;e.uniform3iv(this.addr,t);copyArray(n,t)}function setValueV4i(e,t){const n=this.cache;if(arraysEqual(n,t))return;e.uniform4iv(this.addr,t);copyArray(n,t)}function setValueV1ui(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1ui(this.addr,t);n[0]=t}function getSingularSetter(e){switch(e){case 5126:return setValueV1f;case 35664:return setValueV2f;case 35665:return setValueV3f;case 35666:return setValueV4f;case 35674:return setValueM2;case 35675:return setValueM3;case 35676:return setValueM4;case 5124:case 35670:return setValueV1i;case 35667:case 35671:return setValueV2i;case 35668:case 35672:return setValueV3i;case 35669:case 35673:return setValueV4i;case 5125:return setValueV1ui;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1;case 35679:case 36299:case 36307:return setValueT3D1;case 35680:case 36300:case 36308:case 36293:return setValueT6;case 36289:case 36303:case 36311:case 36292:return setValueT2DArray1}}function setValueV1fArray(e,t){e.uniform1fv(this.addr,t)}function setValueV1iArray(e,t){e.uniform1iv(this.addr,t)}function setValueV2iArray(e,t){e.uniform2iv(this.addr,t)}function setValueV3iArray(e,t){e.uniform3iv(this.addr,t)}function setValueV4iArray(e,t){e.uniform4iv(this.addr,t)}function setValueV2fArray(e,t){const n=flatten(t,this.size,2);e.uniform2fv(this.addr,n)}function setValueV3fArray(e,t){const n=flatten(t,this.size,3);e.uniform3fv(this.addr,n)}function setValueV4fArray(e,t){const n=flatten(t,this.size,4);e.uniform4fv(this.addr,n)}function setValueM2Array(e,t){const n=flatten(t,this.size,4);e.uniformMatrix2fv(this.addr,false,n)}function setValueM3Array(e,t){const n=flatten(t,this.size,9);e.uniformMatrix3fv(this.addr,false,n)}function setValueM4Array(e,t){const n=flatten(t,this.size,16);e.uniformMatrix4fv(this.addr,false,n)}function setValueT1Array(e,t,n){const r=t.length;const i=allocTexUnits(n,r);e.uniform1iv(this.addr,i);for(let e=0;e!==r;++e){n.safeSetTexture2D(t[e]||emptyTexture,i[e])}}function setValueT6Array(e,t,n){const r=t.length;const i=allocTexUnits(n,r);e.uniform1iv(this.addr,i);for(let e=0;e!==r;++e){n.safeSetTextureCube(t[e]||emptyCubeTexture,i[e])}}function getPureArraySetter(e){switch(e){case 5126:return setValueV1fArray;case 35664:return setValueV2fArray;case 35665:return setValueV3fArray;case 35666:return setValueV4fArray;case 35674:return setValueM2Array;case 35675:return setValueM3Array;case 35676:return setValueM4Array;case 5124:case 35670:return setValueV1iArray;case 35667:case 35671:return setValueV2iArray;case 35668:case 35672:return setValueV3iArray;case 35669:case 35673:return setValueV4iArray;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1Array;case 35680:case 36300:case 36308:case 36293:return setValueT6Array}}function SingleUniform(e,t,n){this.id=e;this.addr=n;this.cache=[];this.setValue=getSingularSetter(t.type)}function PureArrayUniform(e,t,n){this.id=e;this.addr=n;this.cache=[];this.size=t.size;this.setValue=getPureArraySetter(t.type)}PureArrayUniform.prototype.updateCache=function(e){const t=this.cache;if(e instanceof Float32Array&&t.length!==e.length){this.cache=new Float32Array(e.length)}copyArray(t,e)};function StructuredUniform(e){this.id=e;this.seq=[];this.map={}}StructuredUniform.prototype.setValue=function(n,r,i){const a=this.seq;for(let e=0,t=a.length;e!==t;++e){const s=a[e];s.setValue(n,r[s.id],i)}};const RePathPart=/(\w+)(\])?(\[|\.)?/g;function addUniform(e,t){e.seq.push(t);e.map[t.id]=t}function parseUniform(e,n,r){const i=e.name,a=i.length;RePathPart.lastIndex=0;while(true){const s=RePathPart.exec(i),o=RePathPart.lastIndex;let t=s[1];const c=s[2]==="]",l=s[3];if(c)t=t|0;if(l===undefined||l==="["&&o+2===a){addUniform(r,l===undefined?new SingleUniform(t,e,n):new PureArrayUniform(t,e,n));break}else{const u=r.map;let e=u[t];if(e===undefined){e=new StructuredUniform(t);addUniform(r,e)}r=e}}}function WebGLUniforms(t,n){this.seq=[];this.map={};const r=t.getProgramParameter(n,35718);for(let e=0;e<r;++e){const i=t.getActiveUniform(n,e),a=t.getUniformLocation(n,i.name);parseUniform(i,a,this)}}WebGLUniforms.prototype.setValue=function(e,t,n,r){const i=this.map[t];if(i!==undefined)i.setValue(e,n,r)};WebGLUniforms.prototype.setOptional=function(e,t,n){const r=t[n];if(r!==undefined)this.setValue(e,n,r)};WebGLUniforms.upload=function(n,r,i,a){for(let e=0,t=r.length;e!==t;++e){const s=r[e],o=i[s.id];if(o.needsUpdate!==false){s.setValue(n,o.value,a)}}};WebGLUniforms.seqWithValue=function(n,r){const i=[];for(let e=0,t=n.length;e!==t;++e){const a=n[e];if(a.id in r)i.push(a)}return i};function WebGLShader(e,t,n){const r=e.createShader(t);e.shaderSource(r,n);e.compileShader(r);return r}let programIdCount=0;function addLineNumbers(e){const t=e.split("\n");for(let e=0;e<t.length;e++){t[e]=e+1+": "+t[e]}return t.join("\n")}function getEncodingComponents(e){switch(e){case LinearEncoding:return["Linear","( value )"];case sRGBEncoding:return["sRGB","( value )"];case RGBEEncoding:return["RGBE","( value )"];case RGBM7Encoding:return["RGBM","( value, 7.0 )"];case RGBM16Encoding:return["RGBM","( value, 16.0 )"];case RGBDEncoding:return["RGBD","( value, 256.0 )"];case GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case LogLuvEncoding:return["LogLuv","( value )"];default:console.warn("THREE.WebGLProgram: Unsupported encoding:",e);return["Linear","( value )"]}}function getShaderErrors(e,t,n){const r=e.getShaderParameter(t,35713);const i=e.getShaderInfoLog(t).trim();if(r&&i==="")return"";const a=e.getShaderSource(t);return"THREE.WebGLShader: gl.getShaderInfoLog() "+n+"\n"+i+addLineNumbers(a)}function getTexelDecodingFunction(e,t){const n=getEncodingComponents(t);return"vec4 "+e+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function getTexelEncodingFunction(e,t){const n=getEncodingComponents(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function getToneMappingFunction(e,t){let n;switch(t){case LinearToneMapping:n="Linear";break;case ReinhardToneMapping:n="Reinhard";break;case CineonToneMapping:n="OptimizedCineon";break;case ACESFilmicToneMapping:n="ACESFilmic";break;case CustomToneMapping:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t);n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function generateExtensions(e){const t=[e.extensionDerivatives||e.envMapCubeUV||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading||e.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return t.filter(filterEmptyLine).join("\n")}function generateDefines(e){const t=[];for(const n in e){const r=e[n];if(r===false)continue;t.push("#define "+n+" "+r)}return t.join("\n")}function fetchAttributeLocations(t,n){const r={};const i=t.getProgramParameter(n,35721);for(let e=0;e<i;e++){const a=t.getActiveAttrib(n,e);const s=a.name;r[s]=t.getAttribLocation(n,s)}return r}function filterEmptyLine(e){return e!==""}function replaceLightNums(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function replaceClippingPlaneNums(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(e){return e.replace(includePattern,includeReplacer)}function includeReplacer(e,t){const n=ShaderChunk[t];if(n===undefined){throw new Error("Can not resolve #include <"+t+">")}return resolveIncludes(n)}const deprecatedUnrollLoopPattern=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;const unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(e){return e.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer)}function deprecatedLoopReplacer(e,t,n,r){console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");return loopReplacer(e,t,n,r)}function loopReplacer(e,t,n,r){let i="";for(let e=parseInt(t);e<parseInt(n);e++){i+=r.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e)}return i}function generatePrecision(e){let t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";if(e.precision==="highp"){t+="\n#define HIGH_PRECISION"}else if(e.precision==="mediump"){t+="\n#define MEDIUM_PRECISION"}else if(e.precision==="lowp"){t+="\n#define LOW_PRECISION"}return t}function generateShadowMapTypeDefine(e){let t="SHADOWMAP_TYPE_BASIC";if(e.shadowMapType===PCFShadowMap){t="SHADOWMAP_TYPE_PCF"}else if(e.shadowMapType===PCFSoftShadowMap){t="SHADOWMAP_TYPE_PCF_SOFT"}else if(e.shadowMapType===VSMShadowMap){t="SHADOWMAP_TYPE_VSM"}return t}function generateEnvMapTypeDefine(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap){switch(e.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:t="ENVMAP_TYPE_CUBE";break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:t="ENVMAP_TYPE_CUBE_UV";break}}return t}function generateEnvMapModeDefine(e){let t="ENVMAP_MODE_REFLECTION";if(e.envMap){switch(e.envMapMode){case CubeRefractionMapping:case CubeUVRefractionMapping:t="ENVMAP_MODE_REFRACTION";break}}return t}function generateEnvMapBlendingDefine(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap){switch(e.combine){case MultiplyOperation:t="ENVMAP_BLENDING_MULTIPLY";break;case MixOperation:t="ENVMAP_BLENDING_MIX";break;case AddOperation:t="ENVMAP_BLENDING_ADD";break}}return t}function WebGLProgram(e,t,n,r){const i=e.getContext();const a=n.defines;let s=n.vertexShader;let o=n.fragmentShader;const c=generateShadowMapTypeDefine(n);const l=generateEnvMapTypeDefine(n);const u=generateEnvMapModeDefine(n);const h=generateEnvMapBlendingDefine(n);const d=e.gammaFactor>0?e.gammaFactor:1;const f=n.isWebGL2?"":generateExtensions(n);const p=generateDefines(a);const m=i.createProgram();let g,_;let y=n.glslVersion?"#version "+n.glslVersion+"\n":"";if(n.isRawShaderMaterial){g=[p].filter(filterEmptyLine).join("\n");if(g.length>0){g+="\n"}_=[f,p].filter(filterEmptyLine).join("\n");if(_.length>0){_+="\n"}}else{g=[generatePrecision(n),"#define SHADER_NAME "+n.shaderName,p,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+d,"#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+u:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===false?"#define USE_MORPHNORMALS":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+c:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n");_=[f,generatePrecision(n),"#define SHADER_NAME "+n.shaderName,p,n.alphaTest?"#define ALPHATEST "+n.alphaTest+(n.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+d,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+l:"",n.envMap?"#define "+u:"",n.envMap?"#define "+h:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.sheen?"#define USE_SHEEN":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+c:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==NoToneMapping?"#define TONE_MAPPING":"",n.toneMapping!==NoToneMapping?ShaderChunk["tonemapping_pars_fragment"]:"",n.toneMapping!==NoToneMapping?getToneMappingFunction("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",ShaderChunk["encodings_pars_fragment"],n.map?getTexelDecodingFunction("mapTexelToLinear",n.mapEncoding):"",n.matcap?getTexelDecodingFunction("matcapTexelToLinear",n.matcapEncoding):"",n.envMap?getTexelDecodingFunction("envMapTexelToLinear",n.envMapEncoding):"",n.emissiveMap?getTexelDecodingFunction("emissiveMapTexelToLinear",n.emissiveMapEncoding):"",n.lightMap?getTexelDecodingFunction("lightMapTexelToLinear",n.lightMapEncoding):"",getTexelEncodingFunction("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(filterEmptyLine).join("\n")}s=resolveIncludes(s);s=replaceLightNums(s,n);s=replaceClippingPlaneNums(s,n);o=resolveIncludes(o);o=replaceLightNums(o,n);o=replaceClippingPlaneNums(o,n);s=unrollLoops(s);o=unrollLoops(o);if(n.isWebGL2&&n.isRawShaderMaterial!==true){y="#version 300 es\n";g=["#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g;_=["#define varying in",n.glslVersion===GLSL3?"":"out highp vec4 pc_fragColor;",n.glslVersion===GLSL3?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_}const v=y+g+s;const x=y+_+o;const b=WebGLShader(i,35633,v);const M=WebGLShader(i,35632,x);i.attachShader(m,b);i.attachShader(m,M);if(n.index0AttributeName!==undefined){i.bindAttribLocation(m,0,n.index0AttributeName)}else if(n.morphTargets===true){i.bindAttribLocation(m,0,"position")}i.linkProgram(m);if(e.debug.checkShaderErrors){const T=i.getProgramInfoLog(m).trim();const E=i.getShaderInfoLog(b).trim();const A=i.getShaderInfoLog(M).trim();let e=true;let t=true;if(i.getProgramParameter(m,35714)===false){e=false;const L=getShaderErrors(i,b,"vertex");const C=getShaderErrors(i,M,"fragment");console.error("THREE.WebGLProgram: shader error: ",i.getError(),"35715",i.getProgramParameter(m,35715),"gl.getProgramInfoLog",T,L,C)}else if(T!==""){console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",T)}else if(E===""||A===""){t=false}if(t){this.diagnostics={runnable:e,programLog:T,vertexShader:{log:E,prefix:g},fragmentShader:{log:A,prefix:_}}}}i.deleteShader(b);i.deleteShader(M);let w;this.getUniforms=function(){if(w===undefined){w=new WebGLUniforms(i,m)}return w};let S;this.getAttributes=function(){if(S===undefined){S=fetchAttributeLocations(i,m)}return S};this.destroy=function(){r.releaseStatesOfProgram(this);i.deleteProgram(m);this.program=undefined};this.name=n.shaderName;this.id=programIdCount++;this.cacheKey=t;this.usedTimes=1;this.program=m;this.vertexShader=b;this.fragmentShader=M;return this}function WebGLPrograms(m,g,_,y,t,v){const a=[];const x=y.isWebGL2;const b=y.logarithmicDepthBuffer;const M=y.floatVertexTextures;const s=y.maxVertexUniforms;const w=y.vertexTextures;let S=y.precision;const T={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};const r=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmissionMap"];function E(e){const t=e.skeleton;const n=t.bones;if(M){return 1024}else{const r=s;const i=Math.floor((r-20)/4);const a=Math.min(i,n.length);if(a<n.length){console.warn("THREE.WebGLRenderer: Skeleton has "+n.length+" bones. This GPU supports "+a+".");return 0}return a}}function A(e){let t;if(e&&e.isTexture){t=e.encoding}else if(e&&e.isWebGLRenderTarget){console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");t=e.texture.encoding}else{t=LinearEncoding}return t}function e(e,t,n,r,i){const a=r.fog;const s=e.isMeshStandardMaterial?r.environment:null;const o=g.get(e.envMap||s);const c=T[e.type];const l=i.isSkinnedMesh?E(i):0;if(e.precision!==null){S=y.getMaxPrecision(e.precision);if(S!==e.precision){console.warn("THREE.WebGLProgram.getParameters:",e.precision,"not supported, using",S,"instead.")}}let u,h;if(c){const p=ShaderLib[c];u=p.vertexShader;h=p.fragmentShader}else{u=e.vertexShader;h=e.fragmentShader}const d=m.getRenderTarget();const f={isWebGL2:x,shaderID:c,shaderName:e.type,vertexShader:u,fragmentShader:h,defines:e.defines,isRawShaderMaterial:e.isRawShaderMaterial===true,glslVersion:e.glslVersion,precision:S,instancing:i.isInstancedMesh===true,instancingColor:i.isInstancedMesh===true&&i.instanceColor!==null,supportsVertexTextures:w,outputEncoding:d!==null?A(d.texture):m.outputEncoding,map:!!e.map,mapEncoding:A(e.map),matcap:!!e.matcap,matcapEncoding:A(e.matcap),envMap:!!o,envMapMode:o&&o.mapping,envMapEncoding:A(o),envMapCubeUV:!!o&&(o.mapping===CubeUVReflectionMapping||o.mapping===CubeUVRefractionMapping),lightMap:!!e.lightMap,lightMapEncoding:A(e.lightMap),aoMap:!!e.aoMap,emissiveMap:!!e.emissiveMap,emissiveMapEncoding:A(e.emissiveMap),bumpMap:!!e.bumpMap,normalMap:!!e.normalMap,objectSpaceNormalMap:e.normalMapType===ObjectSpaceNormalMap,tangentSpaceNormalMap:e.normalMapType===TangentSpaceNormalMap,clearcoatMap:!!e.clearcoatMap,clearcoatRoughnessMap:!!e.clearcoatRoughnessMap,clearcoatNormalMap:!!e.clearcoatNormalMap,displacementMap:!!e.displacementMap,roughnessMap:!!e.roughnessMap,metalnessMap:!!e.metalnessMap,specularMap:!!e.specularMap,alphaMap:!!e.alphaMap,gradientMap:!!e.gradientMap,sheen:!!e.sheen,transmissionMap:!!e.transmissionMap,combine:e.combine,vertexTangents:e.normalMap&&e.vertexTangents,vertexColors:e.vertexColors,vertexUvs:!!e.map||!!e.bumpMap||!!e.normalMap||!!e.specularMap||!!e.alphaMap||!!e.emissiveMap||!!e.roughnessMap||!!e.metalnessMap||!!e.clearcoatMap||!!e.clearcoatRoughnessMap||!!e.clearcoatNormalMap||!!e.displacementMap||!!e.transmissionMap,uvsVertexOnly:!(!!e.map||!!e.bumpMap||!!e.normalMap||!!e.specularMap||!!e.alphaMap||!!e.emissiveMap||!!e.roughnessMap||!!e.metalnessMap||!!e.clearcoatNormalMap||!!e.transmissionMap)&&!!e.displacementMap,fog:!!a,useFog:e.fog,fogExp2:a&&a.isFogExp2,flatShading:!!e.flatShading,sizeAttenuation:e.sizeAttenuation,logarithmicDepthBuffer:b,skinning:e.skinning&&l>0,maxBones:l,useVertexTexture:M,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:m.maxMorphTargets,maxMorphNormals:m.maxMorphNormals,numDirLights:t.directional.length,numPointLights:t.point.length,numSpotLights:t.spot.length,numRectAreaLights:t.rectArea.length,numHemiLights:t.hemi.length,numDirLightShadows:t.directionalShadowMap.length,numPointLightShadows:t.pointShadowMap.length,numSpotLightShadows:t.spotShadowMap.length,numClippingPlanes:v.numPlanes,numClipIntersection:v.numIntersection,dithering:e.dithering,shadowMapEnabled:m.shadowMap.enabled&&n.length>0,shadowMapType:m.shadowMap.type,toneMapping:e.toneMapped?m.toneMapping:NoToneMapping,physicallyCorrectLights:m.physicallyCorrectLights,premultipliedAlpha:e.premultipliedAlpha,alphaTest:e.alphaTest,doubleSided:e.side===DoubleSide,flipSided:e.side===BackSide,depthPacking:e.depthPacking!==undefined?e.depthPacking:false,index0AttributeName:e.index0AttributeName,extensionDerivatives:e.extensions&&e.extensions.derivatives,extensionFragDepth:e.extensions&&e.extensions.fragDepth,extensionDrawBuffers:e.extensions&&e.extensions.drawBuffers,extensionShaderTextureLOD:e.extensions&&e.extensions.shaderTextureLOD,rendererExtensionFragDepth:x||_.has("EXT_frag_depth"),rendererExtensionDrawBuffers:x||_.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:x||_.has("EXT_shader_texture_lod"),customProgramCacheKey:e.customProgramCacheKey()};return f}function n(t){const n=[];if(t.shaderID){n.push(t.shaderID)}else{n.push(t.fragmentShader);n.push(t.vertexShader)}if(t.defines!==undefined){for(const e in t.defines){n.push(e);n.push(t.defines[e])}}if(t.isRawShaderMaterial===false){for(let e=0;e<r.length;e++){n.push(t[r[e]])}n.push(m.outputEncoding);n.push(m.gammaFactor)}n.push(t.customProgramCacheKey);return n.join()}function i(e){const t=T[e.type];let n;if(t){const r=ShaderLib[t];n=UniformsUtils.clone(r.uniforms)}else{n=e.uniforms}return n}function o(e,n){let r;for(let e=0,t=a.length;e<t;e++){const i=a[e];if(i.cacheKey===n){r=i;++r.usedTimes;break}}if(r===undefined){r=new WebGLProgram(m,n,e,t);a.push(r)}return r}function c(e){if(--e.usedTimes===0){const t=a.indexOf(e);a[t]=a[a.length-1];a.pop();e.destroy()}}return{getParameters:e,getProgramCacheKey:n,getUniforms:i,acquireProgram:o,releaseProgram:c,programs:a}}function WebGLProperties(){let r=new WeakMap;function e(e){let t=r.get(e);if(t===undefined){t={};r.set(e,t)}return t}function t(e){r.delete(e)}function n(e,t,n){r.get(e)[t]=n}function i(){r=new WeakMap}return{get:e,remove:t,update:n,dispose:i}}function painterSortStable(e,t){if(e.groupOrder!==t.groupOrder){return e.groupOrder-t.groupOrder}else if(e.renderOrder!==t.renderOrder){return e.renderOrder-t.renderOrder}else if(e.program!==t.program){return e.program.id-t.program.id}else if(e.material.id!==t.material.id){return e.material.id-t.material.id}else if(e.z!==t.z){return e.z-t.z}else{return e.id-t.id}}function reversePainterSortStable(e,t){if(e.groupOrder!==t.groupOrder){return e.groupOrder-t.groupOrder}else if(e.renderOrder!==t.renderOrder){return e.renderOrder-t.renderOrder}else if(e.z!==t.z){return t.z-e.z}else{return e.id-t.id}}function WebGLRenderList(c){const l=[];let u=0;const o=[];const h=[];const d={id:-1};function e(){u=0;o.length=0;h.length=0}function f(e,t,n,r,i,a){let s=l[u];const o=c.get(n);if(s===undefined){s={id:e.id,object:e,geometry:t,material:n,program:o.program||d,groupOrder:r,renderOrder:e.renderOrder,z:i,group:a};l[u]=s}else{s.id=e.id;s.object=e;s.geometry=t;s.material=n;s.program=o.program||d;s.groupOrder=r;s.renderOrder=e.renderOrder;s.z=i;s.group=a}u++;return s}function t(e,t,n,r,i,a){const s=f(e,t,n,r,i,a);(n.transparent===true?h:o).push(s)}function n(e,t,n,r,i,a){const s=f(e,t,n,r,i,a);(n.transparent===true?h:o).unshift(s)}function r(e,t){if(o.length>1)o.sort(e||painterSortStable);if(h.length>1)h.sort(t||reversePainterSortStable)}function i(){for(let e=u,t=l.length;e<t;e++){const n=l[e];if(n.id===null)break;n.id=null;n.object=null;n.geometry=null;n.material=null;n.program=null;n.group=null}}return{opaque:o,transparent:h,init:e,push:t,unshift:n,finish:i,sort:r}}function WebGLRenderLists(r){let i=new WeakMap;function e(e,t){let n;if(i.has(e)===false){n=new WebGLRenderList(r);i.set(e,[n])}else{if(t>=i.get(e).length){n=new WebGLRenderList(r);i.get(e).push(n)}else{n=i.get(e)[t]}}return n}function t(){i=new WeakMap}return{get:e,dispose:t}}function UniformsCache(){const n={};return{get:function(e){if(n[e.id]!==undefined){return n[e.id]}let t;switch(e.type){case"DirectionalLight":t={direction:new Vector3,color:new Color};break;case"SpotLight":t={position:new Vector3,direction:new Vector3,color:new Color,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new Vector3,color:new Color,distance:0,decay:0};break;case"HemisphereLight":t={direction:new Vector3,skyColor:new Color,groundColor:new Color};break;case"RectAreaLight":t={color:new Color,position:new Vector3,halfWidth:new Vector3,halfHeight:new Vector3};break}n[e.id]=t;return t}}}function ShadowUniformsCache(){const n={};return{get:function(e){if(n[e.id]!==undefined){return n[e.id]}let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2,shadowCameraNear:1,shadowCameraFar:1e3};break}n[e.id]=t;return t}}}let nextVersion=0;function shadowCastingLightsFirst(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function WebGLLights(t,M){const w=new UniformsCache;const S=ShadowUniformsCache();const T={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let e=0;e<9;e++)T.probe.push(new Vector3);const h=new Vector3;const d=new Matrix4;const f=new Matrix4;function e(n){let r=0,i=0,a=0;for(let e=0;e<9;e++)T.probe[e].set(0,0,0);let s=0;let o=0;let c=0;let l=0;let u=0;let h=0;let d=0;let f=0;n.sort(shadowCastingLightsFirst);for(let e=0,t=n.length;e<t;e++){const p=n[e];const m=p.color;const g=p.intensity;const _=p.distance;const y=p.shadow&&p.shadow.map?p.shadow.map.texture:null;if(p.isAmbientLight){r+=m.r*g;i+=m.g*g;a+=m.b*g}else if(p.isLightProbe){for(let e=0;e<9;e++){T.probe[e].addScaledVector(p.sh.coefficients[e],g)}}else if(p.isDirectionalLight){const v=w.get(p);v.color.copy(p.color).multiplyScalar(p.intensity);if(p.castShadow){const x=p.shadow;const b=S.get(p);b.shadowBias=x.bias;b.shadowNormalBias=x.normalBias;b.shadowRadius=x.radius;b.shadowMapSize=x.mapSize;T.directionalShadow[s]=b;T.directionalShadowMap[s]=y;T.directionalShadowMatrix[s]=p.shadow.matrix;h++}T.directional[s]=v;s++}else if(p.isSpotLight){const v=w.get(p);v.position.setFromMatrixPosition(p.matrixWorld);v.color.copy(m).multiplyScalar(g);v.distance=_;v.coneCos=Math.cos(p.angle);v.penumbraCos=Math.cos(p.angle*(1-p.penumbra));v.decay=p.decay;if(p.castShadow){const x=p.shadow;const b=S.get(p);b.shadowBias=x.bias;b.shadowNormalBias=x.normalBias;b.shadowRadius=x.radius;b.shadowMapSize=x.mapSize;T.spotShadow[c]=b;T.spotShadowMap[c]=y;T.spotShadowMatrix[c]=p.shadow.matrix;f++}T.spot[c]=v;c++}else if(p.isRectAreaLight){const v=w.get(p);v.color.copy(m).multiplyScalar(g);v.halfWidth.set(p.width*.5,0,0);v.halfHeight.set(0,p.height*.5,0);T.rectArea[l]=v;l++}else if(p.isPointLight){const v=w.get(p);v.color.copy(p.color).multiplyScalar(p.intensity);v.distance=p.distance;v.decay=p.decay;if(p.castShadow){const x=p.shadow;const b=S.get(p);b.shadowBias=x.bias;b.shadowNormalBias=x.normalBias;b.shadowRadius=x.radius;b.shadowMapSize=x.mapSize;b.shadowCameraNear=x.camera.near;b.shadowCameraFar=x.camera.far;T.pointShadow[o]=b;T.pointShadowMap[o]=y;T.pointShadowMatrix[o]=p.shadow.matrix;d++}T.point[o]=v;o++}else if(p.isHemisphereLight){const v=w.get(p);v.skyColor.copy(p.color).multiplyScalar(g);v.groundColor.copy(p.groundColor).multiplyScalar(g);T.hemi[u]=v;u++}}if(l>0){if(M.isWebGL2){T.rectAreaLTC1=UniformsLib.LTC_FLOAT_1;T.rectAreaLTC2=UniformsLib.LTC_FLOAT_2}else{if(t.has("OES_texture_float_linear")===true){T.rectAreaLTC1=UniformsLib.LTC_FLOAT_1;T.rectAreaLTC2=UniformsLib.LTC_FLOAT_2}else if(t.has("OES_texture_half_float_linear")===true){T.rectAreaLTC1=UniformsLib.LTC_HALF_1;T.rectAreaLTC2=UniformsLib.LTC_HALF_2}else{console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")}}}T.ambient[0]=r;T.ambient[1]=i;T.ambient[2]=a;const e=T.hash;if(e.directionalLength!==s||e.pointLength!==o||e.spotLength!==c||e.rectAreaLength!==l||e.hemiLength!==u||e.numDirectionalShadows!==h||e.numPointShadows!==d||e.numSpotShadows!==f){T.directional.length=s;T.spot.length=c;T.rectArea.length=l;T.point.length=o;T.hemi.length=u;T.directionalShadow.length=h;T.directionalShadowMap.length=h;T.pointShadow.length=d;T.pointShadowMap.length=d;T.spotShadow.length=f;T.spotShadowMap.length=f;T.directionalShadowMatrix.length=h;T.pointShadowMatrix.length=d;T.spotShadowMatrix.length=f;e.directionalLength=s;e.pointLength=o;e.spotLength=c;e.rectAreaLength=l;e.hemiLength=u;e.numDirectionalShadows=h;e.numPointShadows=d;e.numSpotShadows=f;T.version=nextVersion++}}function n(n,e){let r=0;let i=0;let a=0;let s=0;let o=0;const c=e.matrixWorldInverse;for(let e=0,t=n.length;e<t;e++){const l=n[e];if(l.isDirectionalLight){const u=T.directional[r];u.direction.setFromMatrixPosition(l.matrixWorld);h.setFromMatrixPosition(l.target.matrixWorld);u.direction.sub(h);u.direction.transformDirection(c);r++}else if(l.isSpotLight){const u=T.spot[a];u.position.setFromMatrixPosition(l.matrixWorld);u.position.applyMatrix4(c);u.direction.setFromMatrixPosition(l.matrixWorld);h.setFromMatrixPosition(l.target.matrixWorld);u.direction.sub(h);u.direction.transformDirection(c);a++}else if(l.isRectAreaLight){const u=T.rectArea[s];u.position.setFromMatrixPosition(l.matrixWorld);u.position.applyMatrix4(c);f.identity();d.copy(l.matrixWorld);d.premultiply(c);f.extractRotation(d);u.halfWidth.set(l.width*.5,0,0);u.halfHeight.set(0,l.height*.5,0);u.halfWidth.applyMatrix4(f);u.halfHeight.applyMatrix4(f);s++}else if(l.isPointLight){const u=T.point[i];u.position.setFromMatrixPosition(l.matrixWorld);u.position.applyMatrix4(c);i++}else if(l.isHemisphereLight){const u=T.hemi[o];u.direction.setFromMatrixPosition(l.matrixWorld);u.direction.transformDirection(c);u.direction.normalize();o++}}}return{setup:e,setupView:n,state:T}}function WebGLRenderState(e,t){const n=new WebGLLights(e,t);const r=[];const i=[];function a(){r.length=0;i.length=0}function s(e){r.push(e)}function o(e){i.push(e)}function c(){n.setup(r)}function l(e){n.setupView(r,e)}const u={lightsArray:r,shadowsArray:i,lights:n};return{init:a,state:u,setupLights:c,setupLightsView:l,pushLight:s,pushShadow:o}}function WebGLRenderStates(r,i){let a=new WeakMap;function e(e,t=0){let n;if(a.has(e)===false){n=new WebGLRenderState(r,i);a.set(e,[n])}else{if(t>=a.get(e).length){n=new WebGLRenderState(r,i);a.get(e).push(n)}else{n=a.get(e)[t]}}return n}function t(){a=new WeakMap}return{get:e,dispose:t}}class MeshDepthMaterial extends Material{constructor(e){super();this.type="MeshDepthMaterial";this.depthPacking=BasicDepthPacking;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.setValues(e)}copy(e){super.copy(e);this.depthPacking=e.depthPacking;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;return this}}MeshDepthMaterial.prototype.isMeshDepthMaterial=true;class MeshDistanceMaterial extends Material{constructor(e){super();this.type="MeshDistanceMaterial";this.referencePosition=new Vector3;this.nearDistance=1;this.farDistance=1e3;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.fog=false;this.setValues(e)}copy(e){super.copy(e);this.referencePosition.copy(e.referencePosition);this.nearDistance=e.nearDistance;this.farDistance=e.farDistance;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;return this}}MeshDistanceMaterial.prototype.isMeshDistanceMaterial=true;var vsm_frag="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";var vsm_vert="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";function WebGLShadowMap(p,m,f){let g=new Frustum;const _=new Vector2,y=new Vector2,v=new Vector4,a=[],s=[],x={};const b={0:BackSide,1:FrontSide,2:DoubleSide};const r=new ShaderMaterial({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2},radius:{value:4}},vertexShader:vsm_vert,fragmentShader:vsm_frag});const i=r.clone();i.defines.HORIZONTAL_PASS=1;const e=new BufferGeometry;e.setAttribute("position",new BufferAttribute(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const o=new Mesh(e,r);const M=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=PCFShadowMap;this.render=function(n,r,i){if(M.enabled===false)return;if(M.autoUpdate===false&&M.needsUpdate===false)return;if(n.length===0)return;const e=p.getRenderTarget();const t=p.getActiveCubeFace();const a=p.getActiveMipmapLevel();const s=p.state;s.setBlending(NoBlending);s.buffers.color.setClear(1,1,1,1);s.buffers.depth.setTest(true);s.setScissorTest(false);for(let e=0,t=n.length;e<t;e++){const o=n[e];const c=o.shadow;if(c===undefined){console.warn("THREE.WebGLShadowMap:",o,"has no shadow.");continue}if(c.autoUpdate===false&&c.needsUpdate===false)continue;_.copy(c.mapSize);const l=c.getFrameExtents();_.multiply(l);y.copy(c.mapSize);if(_.x>f||_.y>f){if(_.x>f){y.x=Math.floor(f/l.x);_.x=y.x*l.x;c.mapSize.x=y.x}if(_.y>f){y.y=Math.floor(f/l.y);_.y=y.y*l.y;c.mapSize.y=y.y}}if(c.map===null&&!c.isPointLightShadow&&this.type===VSMShadowMap){const h={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};c.map=new WebGLRenderTarget(_.x,_.y,h);c.map.texture.name=o.name+".shadowMap";c.mapPass=new WebGLRenderTarget(_.x,_.y,h);c.camera.updateProjectionMatrix()}if(c.map===null){const h={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};c.map=new WebGLRenderTarget(_.x,_.y,h);c.map.texture.name=o.name+".shadowMap";c.camera.updateProjectionMatrix()}p.setRenderTarget(c.map);p.clear();const u=c.getViewportCount();for(let e=0;e<u;e++){const d=c.getViewport(e);v.set(y.x*d.x,y.y*d.y,y.x*d.z,y.y*d.w);s.viewport(v);c.updateMatrices(o,e);g=c.getFrustum();A(r,i,c.camera,o,this.type)}if(!c.isPointLightShadow&&this.type===VSMShadowMap){w(c,i)}c.needsUpdate=false}M.needsUpdate=false;p.setRenderTarget(e,t,a)};function w(e,t){const n=m.update(o);r.uniforms.shadow_pass.value=e.map.texture;r.uniforms.resolution.value=e.mapSize;r.uniforms.radius.value=e.radius;p.setRenderTarget(e.mapPass);p.clear();p.renderBufferDirect(t,null,n,r,o,null);i.uniforms.shadow_pass.value=e.mapPass.texture;i.uniforms.resolution.value=e.mapSize;i.uniforms.radius.value=e.radius;p.setRenderTarget(e.map);p.clear();p.renderBufferDirect(t,null,n,i,o,null)}function S(e,t,n){const r=e<<0|t<<1|n<<2;let i=a[r];if(i===undefined){i=new MeshDepthMaterial({depthPacking:RGBADepthPacking,morphTargets:e,skinning:t});a[r]=i}return i}function T(e,t,n){const r=e<<0|t<<1|n<<2;let i=s[r];if(i===undefined){i=new MeshDistanceMaterial({morphTargets:e,skinning:t});s[r]=i}return i}function E(n,r,i,e,t,a,s){let o=null;let c=S;let l=n.customDepthMaterial;if(e.isPointLight===true){c=T;l=n.customDistanceMaterial}if(l===undefined){let e=false;if(i.morphTargets===true){e=r.morphAttributes&&r.morphAttributes.position&&r.morphAttributes.position.length>0}let t=false;if(n.isSkinnedMesh===true){if(i.skinning===true){t=true}else{console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",n)}}const u=n.isInstancedMesh===true;o=c(e,t,u)}else{o=l}if(p.localClippingEnabled&&i.clipShadows===true&&i.clippingPlanes.length!==0){const h=o.uuid,d=i.uuid;let e=x[h];if(e===undefined){e={};x[h]=e}let t=e[d];if(t===undefined){t=o.clone();e[d]=t}o=t}o.visible=i.visible;o.wireframe=i.wireframe;if(s===VSMShadowMap){o.side=i.shadowSide!==null?i.shadowSide:i.side}else{o.side=i.shadowSide!==null?i.shadowSide:b[i.side]}o.clipShadows=i.clipShadows;o.clippingPlanes=i.clippingPlanes;o.clipIntersection=i.clipIntersection;o.wireframeLinewidth=i.wireframeLinewidth;o.linewidth=i.linewidth;if(e.isPointLight===true&&o.isMeshDistanceMaterial===true){o.referencePosition.setFromMatrixPosition(e.matrixWorld);o.nearDistance=t;o.farDistance=a}return o}function A(n,r,i,a,s){if(n.visible===false)return;const e=n.layers.test(r.layers);if(e&&(n.isMesh||n.isLine||n.isPoints)){if((n.castShadow||n.receiveShadow&&s===VSMShadowMap)&&(!n.frustumCulled||g.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,n.matrixWorld);const c=m.update(n);const l=n.material;if(Array.isArray(l)){const u=c.groups;for(let e=0,t=u.length;e<t;e++){const h=u[e];const d=l[h.materialIndex];if(d&&d.visible){const f=E(n,c,d,a,i.near,i.far,s);p.renderBufferDirect(i,null,c,f,n,h)}}}else if(l.visible){const f=E(n,c,l,a,i.near,i.far,s);p.renderBufferDirect(i,null,c,f,n,null)}}}const o=n.children;for(let e=0,t=o.length;e<t;e++){A(o[e],r,i,a,s)}}}function WebGLState(u,F,N){const V=N.isWebGL2;function U(){let t=false;const a=new Vector4;let n=null;const s=new Vector4(0,0,0,0);return{setMask:function(e){if(n!==e&&!t){u.colorMask(e,e,e,e);n=e}},setLocked:function(e){t=e},setClear:function(e,t,n,r,i){if(i===true){e*=r;t*=r;n*=r}a.set(e,t,n,r);if(s.equals(a)===false){u.clearColor(e,t,n,r);s.copy(a)}},reset:function(){t=false;n=null;s.set(-1,0,0,0)}}}function O(){let t=false;let n=null;let r=null;let i=null;return{setTest:function(e){if(e){C(2929)}else{R(2929)}},setMask:function(e){if(n!==e&&!t){u.depthMask(e);n=e}},setFunc:function(e){if(r!==e){if(e){switch(e){case NeverDepth:u.depthFunc(512);break;case AlwaysDepth:u.depthFunc(519);break;case LessDepth:u.depthFunc(513);break;case LessEqualDepth:u.depthFunc(515);break;case EqualDepth:u.depthFunc(514);break;case GreaterEqualDepth:u.depthFunc(518);break;case GreaterDepth:u.depthFunc(516);break;case NotEqualDepth:u.depthFunc(517);break;default:u.depthFunc(515)}}else{u.depthFunc(515)}r=e}},setLocked:function(e){t=e},setClear:function(e){if(i!==e){u.clearDepth(e);i=e}},reset:function(){t=false;n=null;r=null;i=null}}}function z(){let t=false;let n=null;let r=null;let i=null;let a=null;let s=null;let o=null;let c=null;let l=null;return{setTest:function(e){if(!t){if(e){C(2960)}else{R(2960)}}},setMask:function(e){if(n!==e&&!t){u.stencilMask(e);n=e}},setFunc:function(e,t,n){if(r!==e||i!==t||a!==n){u.stencilFunc(e,t,n);r=e;i=t;a=n}},setOp:function(e,t,n){if(s!==e||o!==t||c!==n){u.stencilOp(e,t,n);s=e;o=t;c=n}},setLocked:function(e){t=e},setClear:function(e){if(l!==e){u.clearStencil(e);l=e}},reset:function(){t=false;n=null;r=null;i=null;a=null;s=null;o=null;c=null;l=null}}}const i=new U;const a=new O;const s=new z;let t={};let n=null;let c=false;let l=null;let h=null;let d=null;let f=null;let p=null;let m=null;let g=null;let _=false;let r=null;let o=null;let y=null;let v=null;let x=null;const H=u.getParameter(35661);let b=false;let e=0;const M=u.getParameter(7938);if(M.indexOf("WebGL")!==-1){e=parseFloat(/^WebGL (\d)/.exec(M)[1]);b=e>=1}else if(M.indexOf("OpenGL ES")!==-1){e=parseFloat(/^OpenGL ES (\d)/.exec(M)[1]);b=e>=2}let w=null;let S={};const T=new Vector4;const E=new Vector4;function A(e,t,n){const r=new Uint8Array(4);const i=u.createTexture();u.bindTexture(e,i);u.texParameteri(e,10241,9728);u.texParameteri(e,10240,9728);for(let e=0;e<n;e++){u.texImage2D(t+e,0,6408,1,1,0,6408,5121,r)}return i}const L={};L[3553]=A(3553,3553,1);L[34067]=A(34067,34069,6);i.setClear(0,0,0,1);a.setClear(1);s.setClear(0);C(2929);a.setFunc(LessEqualDepth);I(false);j(CullFaceBack);C(2884);D(NoBlending);function C(e){if(t[e]!==true){u.enable(e);t[e]=true}}function R(e){if(t[e]!==false){u.disable(e);t[e]=false}}function k(e){if(n!==e){u.useProgram(e);n=e;return true}return false}const P={[AddEquation]:32774,[SubtractEquation]:32778,[ReverseSubtractEquation]:32779};if(V){P[MinEquation]=32775;P[MaxEquation]=32776}else{const G=F.get("EXT_blend_minmax");if(G!==null){P[MinEquation]=G.MIN_EXT;P[MaxEquation]=G.MAX_EXT}}const B={[ZeroFactor]:0,[OneFactor]:1,[SrcColorFactor]:768,[SrcAlphaFactor]:770,[SrcAlphaSaturateFactor]:776,[DstColorFactor]:774,[DstAlphaFactor]:772,[OneMinusSrcColorFactor]:769,[OneMinusSrcAlphaFactor]:771,[OneMinusDstColorFactor]:775,[OneMinusDstAlphaFactor]:773};function D(e,t,n,r,i,a,s,o){if(e===NoBlending){if(c===true){R(3042);c=false}return}if(c===false){C(3042);c=true}if(e!==CustomBlending){if(e!==l||o!==_){if(h!==AddEquation||p!==AddEquation){u.blendEquation(32774);h=AddEquation;p=AddEquation}if(o){switch(e){case NormalBlending:u.blendFuncSeparate(1,771,1,771);break;case AdditiveBlending:u.blendFunc(1,1);break;case SubtractiveBlending:u.blendFuncSeparate(0,0,769,771);break;case MultiplyBlending:u.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}}else{switch(e){case NormalBlending:u.blendFuncSeparate(770,771,1,771);break;case AdditiveBlending:u.blendFunc(770,1);break;case SubtractiveBlending:u.blendFunc(0,769);break;case MultiplyBlending:u.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}}d=null;f=null;m=null;g=null;l=e;_=o}return}i=i||t;a=a||n;s=s||r;if(t!==h||i!==p){u.blendEquationSeparate(P[t],P[i]);h=t;p=i}if(n!==d||r!==f||a!==m||s!==g){u.blendFuncSeparate(B[n],B[r],B[a],B[s]);d=n;f=r;m=a;g=s}l=e;_=null}function W(e,t){e.side===DoubleSide?R(2884):C(2884);let n=e.side===BackSide;if(t)n=!n;I(n);e.blending===NormalBlending&&e.transparent===false?D(NoBlending):D(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha);a.setFunc(e.depthFunc);a.setTest(e.depthTest);a.setMask(e.depthWrite);i.setMask(e.colorWrite);const r=e.stencilWrite;s.setTest(r);if(r){s.setMask(e.stencilWriteMask);s.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask);s.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)}$(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)}function I(e){if(r!==e){if(e){u.frontFace(2304)}else{u.frontFace(2305)}r=e}}function j(e){if(e!==CullFaceNone){C(2884);if(e!==o){if(e===CullFaceBack){u.cullFace(1029)}else if(e===CullFaceFront){u.cullFace(1028)}else{u.cullFace(1032)}}}else{R(2884)}o=e}function q(e){if(e!==y){if(b)u.lineWidth(e);y=e}}function $(e,t,n){if(e){C(32823);if(v!==t||x!==n){u.polygonOffset(t,n);v=t;x=n}}else{R(32823)}}function X(e){if(e){C(3089)}else{R(3089)}}function Y(e){if(e===undefined)e=33984+H-1;if(w!==e){u.activeTexture(e);w=e}}function Z(e,t){if(w===null){Y()}let n=S[w];if(n===undefined){n={type:undefined,texture:undefined};S[w]=n}if(n.type!==e||n.texture!==t){u.bindTexture(e,t||L[e]);n.type=e;n.texture=t}}function J(){const e=S[w];if(e!==undefined&&e.type!==undefined){u.bindTexture(e.type,null);e.type=undefined;e.texture=undefined}}function K(){try{u.compressedTexImage2D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function Q(){try{u.texImage2D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ee(){try{u.texImage3D.apply(u,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function te(e){if(T.equals(e)===false){u.scissor(e.x,e.y,e.z,e.w);T.copy(e)}}function ne(e){if(E.equals(e)===false){u.viewport(e.x,e.y,e.z,e.w);E.copy(e)}}function re(){u.disable(3042);u.disable(2884);u.disable(2929);u.disable(32823);u.disable(3089);u.disable(2960);u.blendEquation(32774);u.blendFunc(1,0);u.blendFuncSeparate(1,0,1,0);u.colorMask(true,true,true,true);u.clearColor(0,0,0,0);u.depthMask(true);u.depthFunc(513);u.clearDepth(1);u.stencilMask(4294967295);u.stencilFunc(519,0,4294967295);u.stencilOp(7680,7680,7680);u.clearStencil(0);u.cullFace(1029);u.frontFace(2305);u.polygonOffset(0,0);u.activeTexture(33984);u.useProgram(null);u.lineWidth(1);u.scissor(0,0,u.canvas.width,u.canvas.height);u.viewport(0,0,u.canvas.width,u.canvas.height);t={};w=null;S={};n=null;c=false;l=null;h=null;d=null;f=null;p=null;m=null;g=null;_=false;r=null;o=null;y=null;v=null;x=null;i.reset();a.reset();s.reset()}return{buffers:{color:i,depth:a,stencil:s},enable:C,disable:R,useProgram:k,setBlending:D,setMaterial:W,setFlipSided:I,setCullFace:j,setLineWidth:q,setPolygonOffset:$,setScissorTest:X,activeTexture:Y,bindTexture:Z,unbindTexture:J,compressedTexImage2D:K,texImage2D:Q,texImage3D:ee,scissor:te,viewport:ne,reset:re}}function WebGLTextures(p,i,m,f,a,g,_){const y=a.isWebGL2;const t=a.maxTextures;const v=a.maxCubemapSize;const d=a.maxTextureSize;const N=a.maxSamples;const n=new WeakMap;let u;let r=false;try{r=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(e){}function h(e,t){return r?new OffscreenCanvas(e,t):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function x(e,t,n,r){let i=1;if(e.width>r||e.height>r){i=r/Math.max(e.width,e.height)}if(i<1||t===true){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap){const a=t?MathUtils.floorPowerOfTwo:Math.floor;const s=a(i*e.width);const o=a(i*e.height);if(u===undefined)u=h(s,o);const c=n?h(s,o):u;c.width=s;c.height=o;const l=c.getContext("2d");l.drawImage(e,0,0,s,o);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+s+"x"+o+").");return c}else{if("data"in e){console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+").")}return e}}return e}function b(e){return MathUtils.isPowerOfTwo(e.width)&&MathUtils.isPowerOfTwo(e.height)}function V(e){if(y)return false;return e.wrapS!==ClampToEdgeWrapping||e.wrapT!==ClampToEdgeWrapping||e.minFilter!==NearestFilter&&e.minFilter!==LinearFilter}function M(e,t){return e.generateMipmaps&&t&&e.minFilter!==NearestFilter&&e.minFilter!==LinearFilter}function w(e,t,n,r){p.generateMipmap(e);const i=f.get(t);i.__maxMipLevel=Math.log2(Math.max(n,r))}function S(e,t,n){if(y===false)return t;if(e!==null){if(p[e]!==undefined)return p[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let r=t;if(t===6403){if(n===5126)r=33326;if(n===5131)r=33325;if(n===5121)r=33321}if(t===6407){if(n===5126)r=34837;if(n===5131)r=34843;if(n===5121)r=32849}if(t===6408){if(n===5126)r=34836;if(n===5131)r=34842;if(n===5121)r=32856}if(r===33325||r===33326||r===34842||r===34836){i.get("EXT_color_buffer_float")}return r}function s(e){if(e===NearestFilter||e===NearestMipmapNearestFilter||e===NearestMipmapLinearFilter){return 9728}return 9729}function o(e){const t=e.target;t.removeEventListener("dispose",o);U(t);if(t.isVideoTexture){n.delete(t)}_.memory.textures--}function T(e){const t=e.target;t.removeEventListener("dispose",T);O(t);_.memory.textures--}function U(e){const t=f.get(e);if(t.__webglInit===undefined)return;p.deleteTexture(t.__webglTexture);f.remove(e)}function O(e){const t=e.texture;const n=f.get(e);const r=f.get(t);if(!e)return;if(r.__webglTexture!==undefined){p.deleteTexture(r.__webglTexture)}if(e.depthTexture){e.depthTexture.dispose()}if(e.isWebGLCubeRenderTarget){for(let e=0;e<6;e++){p.deleteFramebuffer(n.__webglFramebuffer[e]);if(n.__webglDepthbuffer)p.deleteRenderbuffer(n.__webglDepthbuffer[e])}}else{p.deleteFramebuffer(n.__webglFramebuffer);if(n.__webglDepthbuffer)p.deleteRenderbuffer(n.__webglDepthbuffer);if(n.__webglMultisampledFramebuffer)p.deleteFramebuffer(n.__webglMultisampledFramebuffer);if(n.__webglColorRenderbuffer)p.deleteRenderbuffer(n.__webglColorRenderbuffer);if(n.__webglDepthRenderbuffer)p.deleteRenderbuffer(n.__webglDepthRenderbuffer)}f.remove(t);f.remove(e)}let c=0;function e(){c=0}function z(){const e=c;if(e>=t){console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+t)}c+=1;return e}function l(e,t){const n=f.get(e);if(e.isVideoTexture)Z(e);if(e.version>0&&n.__version!==e.version){const r=e.image;if(r===undefined){console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined")}else if(r.complete===false){console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}else{P(n,e,t);return}}m.activeTexture(33984+t);m.bindTexture(3553,n.__webglTexture)}function H(e,t){const n=f.get(e);if(e.version>0&&n.__version!==e.version){P(n,e,t);return}m.activeTexture(33984+t);m.bindTexture(35866,n.__webglTexture)}function k(e,t){const n=f.get(e);if(e.version>0&&n.__version!==e.version){P(n,e,t);return}m.activeTexture(33984+t);m.bindTexture(32879,n.__webglTexture)}function E(e,t){const n=f.get(e);if(e.version>0&&n.__version!==e.version){W(n,e,t);return}m.activeTexture(33984+t);m.bindTexture(34067,n.__webglTexture)}const A={[RepeatWrapping]:10497,[ClampToEdgeWrapping]:33071,[MirroredRepeatWrapping]:33648};const L={[NearestFilter]:9728,[NearestMipmapNearestFilter]:9984,[NearestMipmapLinearFilter]:9986,[LinearFilter]:9729,[LinearMipmapNearestFilter]:9985,[LinearMipmapLinearFilter]:9987};function C(e,t,n){if(n){p.texParameteri(e,10242,A[t.wrapS]);p.texParameteri(e,10243,A[t.wrapT]);if(e===32879||e===35866){p.texParameteri(e,32882,A[t.wrapR])}p.texParameteri(e,10240,L[t.magFilter]);p.texParameteri(e,10241,L[t.minFilter])}else{p.texParameteri(e,10242,33071);p.texParameteri(e,10243,33071);if(e===32879||e===35866){p.texParameteri(e,32882,33071)}if(t.wrapS!==ClampToEdgeWrapping||t.wrapT!==ClampToEdgeWrapping){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.")}p.texParameteri(e,10240,s(t.magFilter));p.texParameteri(e,10241,s(t.minFilter));if(t.minFilter!==NearestFilter&&t.minFilter!==LinearFilter){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")}}if(i.has("EXT_texture_filter_anisotropic")===true){const r=i.get("EXT_texture_filter_anisotropic");if(t.type===FloatType&&i.has("OES_texture_float_linear")===false)return;if(y===false&&(t.type===HalfFloatType&&i.has("OES_texture_half_float_linear")===false))return;if(t.anisotropy>1||f.get(t).__currentAnisotropy){p.texParameterf(e,r.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,a.getMaxAnisotropy()));f.get(t).__currentAnisotropy=t.anisotropy}}}function R(e,t){if(e.__webglInit===undefined){e.__webglInit=true;t.addEventListener("dispose",o);e.__webglTexture=p.createTexture();_.memory.textures++}}function P(e,n,t){let r=3553;if(n.isDataTexture2DArray)r=35866;if(n.isDataTexture3D)r=32879;R(e,n);m.activeTexture(33984+t);m.bindTexture(r,e.__webglTexture);p.pixelStorei(37440,n.flipY);p.pixelStorei(37441,n.premultiplyAlpha);p.pixelStorei(3317,n.unpackAlignment);p.pixelStorei(37443,0);const i=V(n)&&b(n.image)===false;const a=x(n.image,i,false,d);const s=b(a)||y,o=g.convert(n.format);let c=g.convert(n.type),l=S(n.internalFormat,o,c);C(r,n,s);let u;const h=n.mipmaps;if(n.isDepthTexture){l=6402;if(y){if(n.type===FloatType){l=36012}else if(n.type===UnsignedIntType){l=33190}else if(n.type===UnsignedInt248Type){l=35056}else{l=33189}}else{if(n.type===FloatType){console.error("WebGLRenderer: Floating point depth texture requires WebGL2.")}}if(n.format===DepthFormat&&l===6402){if(n.type!==UnsignedShortType&&n.type!==UnsignedIntType){console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");n.type=UnsignedShortType;c=g.convert(n.type)}}if(n.format===DepthStencilFormat&&l===6402){l=34041;if(n.type!==UnsignedInt248Type){console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");n.type=UnsignedInt248Type;c=g.convert(n.type)}}m.texImage2D(3553,0,l,a.width,a.height,0,o,c,null)}else if(n.isDataTexture){if(h.length>0&&s){for(let e=0,t=h.length;e<t;e++){u=h[e];m.texImage2D(3553,e,l,u.width,u.height,0,o,c,u.data)}n.generateMipmaps=false;e.__maxMipLevel=h.length-1}else{m.texImage2D(3553,0,l,a.width,a.height,0,o,c,a.data);e.__maxMipLevel=0}}else if(n.isCompressedTexture){for(let e=0,t=h.length;e<t;e++){u=h[e];if(n.format!==RGBAFormat&&n.format!==RGBFormat){if(o!==null){m.compressedTexImage2D(3553,e,l,u.width,u.height,0,u.data)}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{m.texImage2D(3553,e,l,u.width,u.height,0,o,c,u.data)}}e.__maxMipLevel=h.length-1}else if(n.isDataTexture2DArray){m.texImage3D(35866,0,l,a.width,a.height,a.depth,0,o,c,a.data);e.__maxMipLevel=0}else if(n.isDataTexture3D){m.texImage3D(32879,0,l,a.width,a.height,a.depth,0,o,c,a.data);e.__maxMipLevel=0}else{if(h.length>0&&s){for(let e=0,t=h.length;e<t;e++){u=h[e];m.texImage2D(3553,e,l,o,c,u)}n.generateMipmaps=false;e.__maxMipLevel=h.length-1}else{m.texImage2D(3553,0,l,o,c,a);e.__maxMipLevel=0}}if(M(n,s)){w(r,n,a.width,a.height)}e.__version=n.version;if(n.onUpdate)n.onUpdate(n)}function W(e,n,t){if(n.image.length!==6)return;R(e,n);m.activeTexture(33984+t);m.bindTexture(34067,e.__webglTexture);p.pixelStorei(37440,n.flipY);p.pixelStorei(37441,n.premultiplyAlpha);p.pixelStorei(3317,n.unpackAlignment);p.pixelStorei(37443,0);const r=n&&(n.isCompressedTexture||n.image[0].isCompressedTexture);const i=n.image[0]&&n.image[0].isDataTexture;const a=[];for(let e=0;e<6;e++){if(!r&&!i){a[e]=x(n.image[e],false,true,v)}else{a[e]=i?n.image[e].image:n.image[e]}}const s=a[0],o=b(s)||y,c=g.convert(n.format),l=g.convert(n.type),u=S(n.internalFormat,c,l);C(34067,n,o);let h;if(r){for(let t=0;t<6;t++){h=a[t].mipmaps;for(let e=0;e<h.length;e++){const d=h[e];if(n.format!==RGBAFormat&&n.format!==RGBFormat){if(c!==null){m.compressedTexImage2D(34069+t,e,u,d.width,d.height,0,d.data)}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")}}else{m.texImage2D(34069+t,e,u,d.width,d.height,0,c,l,d.data)}}}e.__maxMipLevel=h.length-1}else{h=n.mipmaps;for(let t=0;t<6;t++){if(i){m.texImage2D(34069+t,0,u,a[t].width,a[t].height,0,c,l,a[t].data);for(let e=0;e<h.length;e++){const d=h[e];const f=d.image[t].image;m.texImage2D(34069+t,e+1,u,f.width,f.height,0,c,l,f.data)}}else{m.texImage2D(34069+t,0,u,c,l,a[t]);for(let e=0;e<h.length;e++){const d=h[e];m.texImage2D(34069+t,e+1,u,c,l,d.image[t])}}}e.__maxMipLevel=h.length}if(M(n,o)){w(34067,n,s.width,s.height)}e.__version=n.version;if(n.onUpdate)n.onUpdate(n)}function B(e,t,n,r){const i=t.texture;const a=g.convert(i.format);const s=g.convert(i.type);const o=S(i.internalFormat,a,s);if(r===32879||r===35866){m.texImage3D(r,0,o,t.width,t.height,t.depth,0,a,s,null)}else{m.texImage2D(r,0,o,t.width,t.height,0,a,s,null)}p.bindFramebuffer(36160,e);p.framebufferTexture2D(36160,n,r,f.get(i).__webglTexture,0);p.bindFramebuffer(36160,null)}function D(t,n,r){p.bindRenderbuffer(36161,t);if(n.depthBuffer&&!n.stencilBuffer){let e=33189;if(r){const i=n.depthTexture;if(i&&i.isDepthTexture){if(i.type===FloatType){e=36012}else if(i.type===UnsignedIntType){e=33190}}const a=I(n);p.renderbufferStorageMultisample(36161,a,e,n.width,n.height)}else{p.renderbufferStorage(36161,e,n.width,n.height)}p.framebufferRenderbuffer(36160,36096,36161,t)}else if(n.depthBuffer&&n.stencilBuffer){if(r){const a=I(n);p.renderbufferStorageMultisample(36161,a,35056,n.width,n.height)}else{p.renderbufferStorage(36161,34041,n.width,n.height)}p.framebufferRenderbuffer(36160,33306,36161,t)}else{const e=n.texture;const s=g.convert(e.format);const o=g.convert(e.type);const c=S(e.internalFormat,s,o);if(r){const a=I(n);p.renderbufferStorageMultisample(36161,a,c,n.width,n.height)}else{p.renderbufferStorage(36161,c,n.width,n.height)}}p.bindRenderbuffer(36161,null)}function j(e,t){const n=t&&t.isWebGLCubeRenderTarget;if(n)throw new Error("Depth Texture with cube render targets is not supported");p.bindFramebuffer(36160,e);if(!(t.depthTexture&&t.depthTexture.isDepthTexture)){throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture")}if(!f.get(t.depthTexture).__webglTexture||t.depthTexture.image.width!==t.width||t.depthTexture.image.height!==t.height){t.depthTexture.image.width=t.width;t.depthTexture.image.height=t.height;t.depthTexture.needsUpdate=true}l(t.depthTexture,0);const r=f.get(t.depthTexture).__webglTexture;if(t.depthTexture.format===DepthFormat){p.framebufferTexture2D(36160,36096,3553,r,0)}else if(t.depthTexture.format===DepthStencilFormat){p.framebufferTexture2D(36160,33306,3553,r,0)}else{throw new Error("Unknown depthTexture format")}}function q(t){const n=f.get(t);const e=t.isWebGLCubeRenderTarget===true;if(t.depthTexture){if(e)throw new Error("target.depthTexture not supported in Cube render targets");j(n.__webglFramebuffer,t)}else{if(e){n.__webglDepthbuffer=[];for(let e=0;e<6;e++){p.bindFramebuffer(36160,n.__webglFramebuffer[e]);n.__webglDepthbuffer[e]=p.createRenderbuffer();D(n.__webglDepthbuffer[e],t,false)}}else{p.bindFramebuffer(36160,n.__webglFramebuffer);n.__webglDepthbuffer=p.createRenderbuffer();D(n.__webglDepthbuffer,t,false)}}p.bindFramebuffer(36160,null)}function $(t){const n=t.texture;const r=f.get(t);const i=f.get(n);t.addEventListener("dispose",T);i.__webglTexture=p.createTexture();_.memory.textures++;const e=t.isWebGLCubeRenderTarget===true;const a=t.isWebGLMultisampleRenderTarget===true;const s=n.isDataTexture3D||n.isDataTexture2DArray;const o=b(t)||y;if(y&&n.format===RGBFormat&&(n.type===FloatType||n.type===HalfFloatType)){n.format=RGBAFormat;console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")}if(e){r.__webglFramebuffer=[];for(let e=0;e<6;e++){r.__webglFramebuffer[e]=p.createFramebuffer()}}else{r.__webglFramebuffer=p.createFramebuffer();if(a){if(y){r.__webglMultisampledFramebuffer=p.createFramebuffer();r.__webglColorRenderbuffer=p.createRenderbuffer();p.bindRenderbuffer(36161,r.__webglColorRenderbuffer);const c=g.convert(n.format);const l=g.convert(n.type);const u=S(n.internalFormat,c,l);const h=I(t);p.renderbufferStorageMultisample(36161,h,u,t.width,t.height);p.bindFramebuffer(36160,r.__webglMultisampledFramebuffer);p.framebufferRenderbuffer(36160,36064,36161,r.__webglColorRenderbuffer);p.bindRenderbuffer(36161,null);if(t.depthBuffer){r.__webglDepthRenderbuffer=p.createRenderbuffer();D(r.__webglDepthRenderbuffer,t,true)}p.bindFramebuffer(36160,null)}else{console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}}}if(e){m.bindTexture(34067,i.__webglTexture);C(34067,n,o);for(let e=0;e<6;e++){B(r.__webglFramebuffer[e],t,36064,34069+e)}if(M(n,o)){w(34067,n,t.width,t.height)}m.bindTexture(34067,null)}else{let e=3553;if(s){if(y){const d=n.isDataTexture3D;e=d?32879:35866}else{console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")}}m.bindTexture(e,i.__webglTexture);C(e,n,o);B(r.__webglFramebuffer,t,36064,e);if(M(n,o)){w(3553,n,t.width,t.height)}m.bindTexture(3553,null)}if(t.depthBuffer){q(t)}}function X(e){const t=e.texture;const n=b(e)||y;if(M(t,n)){const r=e.isWebGLCubeRenderTarget?34067:3553;const i=f.get(t).__webglTexture;m.bindTexture(r,i);w(r,t,e.width,e.height);m.bindTexture(r,null)}}function Y(t){if(t.isWebGLMultisampleRenderTarget){if(y){const n=f.get(t);p.bindFramebuffer(36008,n.__webglMultisampledFramebuffer);p.bindFramebuffer(36009,n.__webglFramebuffer);const r=t.width;const i=t.height;let e=16384;if(t.depthBuffer)e|=256;if(t.stencilBuffer)e|=1024;p.blitFramebuffer(0,0,r,i,0,0,r,i,e,9728);p.bindFramebuffer(36160,n.__webglMultisampledFramebuffer)}else{console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}}}function I(e){return y&&e.isWebGLMultisampleRenderTarget?Math.min(N,e.samples):0}function Z(e){const t=_.render.frame;if(n.get(e)!==t){n.set(e,t);e.update()}}let G=false;let F=false;function J(e,t){if(e&&e.isWebGLRenderTarget){if(G===false){console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");G=true}e=e.texture}l(e,t)}function K(e,t){if(e&&e.isWebGLCubeRenderTarget){if(F===false){console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");F=true}e=e.texture}E(e,t)}this.allocateTextureUnit=z;this.resetTextureUnits=e;this.setTexture2D=l;this.setTexture2DArray=H;this.setTexture3D=k;this.setTextureCube=E;this.setupRenderTarget=$;this.updateRenderTargetMipmap=X;this.updateMultisampleRenderTarget=Y;this.safeSetTexture2D=J;this.safeSetTextureCube=K}function WebGLUtils(e,n,t){const r=t.isWebGL2;function i(e){let t;if(e===UnsignedByteType)return 5121;if(e===UnsignedShort4444Type)return 32819;if(e===UnsignedShort5551Type)return 32820;if(e===UnsignedShort565Type)return 33635;if(e===ByteType)return 5120;if(e===ShortType)return 5122;if(e===UnsignedShortType)return 5123;if(e===IntType)return 5124;if(e===UnsignedIntType)return 5125;if(e===FloatType)return 5126;if(e===HalfFloatType){if(r)return 5131;t=n.get("OES_texture_half_float");if(t!==null){return t.HALF_FLOAT_OES}else{return null}}if(e===AlphaFormat)return 6406;if(e===RGBFormat)return 6407;if(e===RGBAFormat)return 6408;if(e===LuminanceFormat)return 6409;if(e===LuminanceAlphaFormat)return 6410;if(e===DepthFormat)return 6402;if(e===DepthStencilFormat)return 34041;if(e===RedFormat)return 6403;if(e===RedIntegerFormat)return 36244;if(e===RGFormat)return 33319;if(e===RGIntegerFormat)return 33320;if(e===RGBIntegerFormat)return 36248;if(e===RGBAIntegerFormat)return 36249;if(e===RGB_S3TC_DXT1_Format||e===RGBA_S3TC_DXT1_Format||e===RGBA_S3TC_DXT3_Format||e===RGBA_S3TC_DXT5_Format){t=n.get("WEBGL_compressed_texture_s3tc");if(t!==null){if(e===RGB_S3TC_DXT1_Format)return t.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT1_Format)return t.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT3_Format)return t.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===RGBA_S3TC_DXT5_Format)return t.COMPRESSED_RGBA_S3TC_DXT5_EXT}else{return null}}if(e===RGB_PVRTC_4BPPV1_Format||e===RGB_PVRTC_2BPPV1_Format||e===RGBA_PVRTC_4BPPV1_Format||e===RGBA_PVRTC_2BPPV1_Format){t=n.get("WEBGL_compressed_texture_pvrtc");if(t!==null){if(e===RGB_PVRTC_4BPPV1_Format)return t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===RGB_PVRTC_2BPPV1_Format)return t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===RGBA_PVRTC_4BPPV1_Format)return t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===RGBA_PVRTC_2BPPV1_Format)return t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else{return null}}if(e===RGB_ETC1_Format){t=n.get("WEBGL_compressed_texture_etc1");if(t!==null){return t.COMPRESSED_RGB_ETC1_WEBGL}else{return null}}if(e===RGB_ETC2_Format||e===RGBA_ETC2_EAC_Format){t=n.get("WEBGL_compressed_texture_etc");if(t!==null){if(e===RGB_ETC2_Format)return t.COMPRESSED_RGB8_ETC2;if(e===RGBA_ETC2_EAC_Format)return t.COMPRESSED_RGBA8_ETC2_EAC}}if(e===RGBA_ASTC_4x4_Format||e===RGBA_ASTC_5x4_Format||e===RGBA_ASTC_5x5_Format||e===RGBA_ASTC_6x5_Format||e===RGBA_ASTC_6x6_Format||e===RGBA_ASTC_8x5_Format||e===RGBA_ASTC_8x6_Format||e===RGBA_ASTC_8x8_Format||e===RGBA_ASTC_10x5_Format||e===RGBA_ASTC_10x6_Format||e===RGBA_ASTC_10x8_Format||e===RGBA_ASTC_10x10_Format||e===RGBA_ASTC_12x10_Format||e===RGBA_ASTC_12x12_Format||e===SRGB8_ALPHA8_ASTC_4x4_Format||e===SRGB8_ALPHA8_ASTC_5x4_Format||e===SRGB8_ALPHA8_ASTC_5x5_Format||e===SRGB8_ALPHA8_ASTC_6x5_Format||e===SRGB8_ALPHA8_ASTC_6x6_Format||e===SRGB8_ALPHA8_ASTC_8x5_Format||e===SRGB8_ALPHA8_ASTC_8x6_Format||e===SRGB8_ALPHA8_ASTC_8x8_Format||e===SRGB8_ALPHA8_ASTC_10x5_Format||e===SRGB8_ALPHA8_ASTC_10x6_Format||e===SRGB8_ALPHA8_ASTC_10x8_Format||e===SRGB8_ALPHA8_ASTC_10x10_Format||e===SRGB8_ALPHA8_ASTC_12x10_Format||e===SRGB8_ALPHA8_ASTC_12x12_Format){t=n.get("WEBGL_compressed_texture_astc");if(t!==null){return e}else{return null}}if(e===RGBA_BPTC_Format){t=n.get("EXT_texture_compression_bptc");if(t!==null){return e}else{return null}}if(e===UnsignedInt248Type){if(r)return 34042;t=n.get("WEBGL_depth_texture");if(t!==null){return t.UNSIGNED_INT_24_8_WEBGL}else{return null}}}return{convert:i}}function ArrayCamera(e=[]){PerspectiveCamera.call(this);this.cameras=e}ArrayCamera.prototype=Object.assign(Object.create(PerspectiveCamera.prototype),{constructor:ArrayCamera,isArrayCamera:true});class Group extends Object3D{constructor(){super();this.type="Group"}}Group.prototype.isGroup=true;function WebXRController(){this._targetRay=null;this._grip=null;this._hand=null}Object.assign(WebXRController.prototype,{constructor:WebXRController,getHandSpace:function(){if(this._hand===null){this._hand=new Group;this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false}}return this._hand},getTargetRaySpace:function(){if(this._targetRay===null){this._targetRay=new Group;this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false}return this._targetRay},getGripSpace:function(){if(this._grip===null){this._grip=new Group;this._grip.matrixAutoUpdate=false;this._grip.visible=false}return this._grip},dispatchEvent:function(e){if(this._targetRay!==null){this._targetRay.dispatchEvent(e)}if(this._grip!==null){this._grip.dispatchEvent(e)}if(this._hand!==null){this._hand.dispatchEvent(e)}return this},disconnect:function(e){this.dispatchEvent({type:"disconnected",data:e});if(this._targetRay!==null){this._targetRay.visible=false}if(this._grip!==null){this._grip.visible=false}if(this._hand!==null){this._hand.visible=false}return this},update:function(e,t,n){let r=null;let i=null;let a=null;const s=this._targetRay;const o=this._grip;const c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(c&&e.hand){a=true;for(const p of e.hand.values()){const m=t.getJointPose(p,n);if(c.joints[p.jointName]===undefined){const g=new Group;g.matrixAutoUpdate=false;g.visible=false;c.joints[p.jointName]=g;c.add(g)}const g=c.joints[p.jointName];if(m!==null){g.matrix.fromArray(m.transform.matrix);g.matrix.decompose(g.position,g.rotation,g.scale);g.jointRadius=m.radius}g.visible=m!==null}const l=c.joints["index-finger-tip"];const u=c.joints["thumb-tip"];const h=l.position.distanceTo(u.position);const d=.02;const f=.005;if(c.inputState.pinching&&h>d+f){c.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})}else if(!c.inputState.pinching&&h<=d-f){c.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this})}}else{if(s!==null){r=t.getPose(e.targetRaySpace,n);if(r!==null){s.matrix.fromArray(r.transform.matrix);s.matrix.decompose(s.position,s.rotation,s.scale)}}if(o!==null&&e.gripSpace){i=t.getPose(e.gripSpace,n);if(i!==null){o.matrix.fromArray(i.transform.matrix);o.matrix.decompose(o.position,o.rotation,o.scale)}}}}if(s!==null){s.visible=r!==null}if(o!==null){o.visible=i!==null}if(c!==null){c.visible=a!==null}return this}});function WebXRManager(u,i){const a=this;let h=null;let s=1;let d=null;let o="local-floor";let f=null;const p=[];const c=new Map;const l=new PerspectiveCamera;l.layers.enable(1);l.viewport=new Vector4;const m=new PerspectiveCamera;m.layers.enable(2);m.viewport=new Vector4;const g=[l,m];const _=new ArrayCamera;_.layers.enable(1);_.layers.enable(2);let y=null;let v=null;this.enabled=false;this.isPresenting=false;this.getController=function(e){let t=p[e];if(t===undefined){t=new WebXRController;p[e]=t}return t.getTargetRaySpace()};this.getControllerGrip=function(e){let t=p[e];if(t===undefined){t=new WebXRController;p[e]=t}return t.getGripSpace()};this.getHand=function(e){let t=p[e];if(t===undefined){t=new WebXRController;p[e]=t}return t.getHandSpace()};function x(e){const t=c.get(e.inputSource);if(t){t.dispatchEvent({type:e.type,data:e.inputSource})}}function b(){c.forEach(function(e,t){e.disconnect(t)});c.clear();y=null;v=null;u.setFramebuffer(null);u.setRenderTarget(u.getRenderTarget());L.stop();a.isPresenting=false;a.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(e){s=e;if(a.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")}};this.setReferenceSpaceType=function(e){o=e;if(a.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")}};this.getReferenceSpace=function(){return d};this.getSession=function(){return h};this.setSession=async function(e){h=e;if(h!==null){h.addEventListener("select",x);h.addEventListener("selectstart",x);h.addEventListener("selectend",x);h.addEventListener("squeeze",x);h.addEventListener("squeezestart",x);h.addEventListener("squeezeend",x);h.addEventListener("end",b);h.addEventListener("inputsourceschange",M);const t=i.getContextAttributes();if(t.xrCompatible!==true){await i.makeXRCompatible()}const n={antialias:t.antialias,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:s};const r=new XRWebGLLayer(h,i,n);h.updateRenderState({baseLayer:r});d=await h.requestReferenceSpace(o);L.setContext(h);L.start();a.isPresenting=true;a.dispatchEvent({type:"sessionstart"})}};function M(t){const n=h.inputSources;for(let e=0;e<p.length;e++){c.set(n[e],p[e])}for(let e=0;e<t.removed.length;e++){const r=t.removed[e];const i=c.get(r);if(i){i.dispatchEvent({type:"disconnected",data:r});c.delete(r)}}for(let e=0;e<t.added.length;e++){const r=t.added[e];const i=c.get(r);if(i){i.dispatchEvent({type:"connected",data:r})}}}const w=new Vector3;const S=new Vector3;function T(e,t,n){w.setFromMatrixPosition(t.matrixWorld);S.setFromMatrixPosition(n.matrixWorld);const r=w.distanceTo(S);const i=t.projectionMatrix.elements;const a=n.projectionMatrix.elements;const s=i[14]/(i[10]-1);const o=i[14]/(i[10]+1);const c=(i[9]+1)/i[5];const l=(i[9]-1)/i[5];const u=(i[8]-1)/i[0];const h=(a[8]+1)/a[0];const d=s*u;const f=s*h;const p=r/(-u+h);const m=p*-u;t.matrixWorld.decompose(e.position,e.quaternion,e.scale);e.translateX(m);e.translateZ(p);e.matrixWorld.compose(e.position,e.quaternion,e.scale);e.matrixWorldInverse.copy(e.matrixWorld).invert();const g=s+p;const _=o+p;const y=d-m;const v=f+(r-m);const x=c*o/_*g;const b=l*o/_*g;e.projectionMatrix.makePerspective(y,v,x,b,g,_)}function E(e,t){if(t===null){e.matrixWorld.copy(e.matrix)}else{e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix)}e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.getCamera=function(e){_.near=m.near=l.near=e.near;_.far=m.far=l.far=e.far;if(y!==_.near||v!==_.far){h.updateRenderState({depthNear:_.near,depthFar:_.far});y=_.near;v=_.far}const t=e.parent;const n=_.cameras;E(_,t);for(let e=0;e<n.length;e++){E(n[e],t)}e.matrixWorld.copy(_.matrixWorld);e.matrix.copy(_.matrix);e.matrix.decompose(e.position,e.quaternion,e.scale);const r=e.children;for(let e=0,t=r.length;e<t;e++){r[e].updateMatrixWorld(true)}if(n.length===2){T(_,l,m)}else{_.projectionMatrix.copy(l.projectionMatrix)}return _};let A=null;function e(e,t){f=t.getViewerPose(d);if(f!==null){const r=f.views;const i=h.renderState.baseLayer;u.setFramebuffer(i.framebuffer);let t=false;if(r.length!==_.cameras.length){_.cameras.length=0;t=true}for(let e=0;e<r.length;e++){const a=r[e];const s=i.getViewport(a);const o=g[e];o.matrix.fromArray(a.transform.matrix);o.projectionMatrix.fromArray(a.projectionMatrix);o.viewport.set(s.x,s.y,s.width,s.height);if(e===0){_.matrix.copy(o.matrix)}if(t===true){_.cameras.push(o)}}}const n=h.inputSources;for(let e=0;e<p.length;e++){const c=p[e];const l=n[e];c.update(l,t,d)}if(A)A(e,t)}const L=new WebGLAnimation;L.setAnimationLoop(e);this.setAnimationLoop=function(e){A=e};this.dispose=function(){}}Object.assign(WebXRManager.prototype,EventDispatcher.prototype);function WebGLMaterials(s){function e(e,t){e.fogColor.value.copy(t.color);if(t.isFog){e.fogNear.value=t.near;e.fogFar.value=t.far}else if(t.isFogExp2){e.fogDensity.value=t.density}}function t(e,t,n,r){if(t.isMeshBasicMaterial){i(e,t)}else if(t.isMeshLambertMaterial){i(e,t);u(e,t)}else if(t.isMeshToonMaterial){i(e,t);d(e,t)}else if(t.isMeshPhongMaterial){i(e,t);h(e,t)}else if(t.isMeshStandardMaterial){i(e,t);if(t.isMeshPhysicalMaterial){p(e,t)}else{f(e,t)}}else if(t.isMeshMatcapMaterial){i(e,t);m(e,t)}else if(t.isMeshDepthMaterial){i(e,t);g(e,t)}else if(t.isMeshDistanceMaterial){i(e,t);_(e,t)}else if(t.isMeshNormalMaterial){i(e,t);y(e,t)}else if(t.isLineBasicMaterial){a(e,t);if(t.isLineDashedMaterial){o(e,t)}}else if(t.isPointsMaterial){c(e,t,n,r)}else if(t.isSpriteMaterial){l(e,t)}else if(t.isShadowMaterial){e.color.value.copy(t.color);e.opacity.value=t.opacity}else if(t.isShaderMaterial){t.uniformsNeedUpdate=false}}function i(e,t){e.opacity.value=t.opacity;if(t.color){e.diffuse.value.copy(t.color)}if(t.emissive){e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity)}if(t.map){e.map.value=t.map}if(t.alphaMap){e.alphaMap.value=t.alphaMap}if(t.specularMap){e.specularMap.value=t.specularMap}const n=s.get(t).envMap;if(n){e.envMap.value=n;e.flipEnvMap.value=n.isCubeTexture&&n._needsFlipEnvMap?-1:1;e.reflectivity.value=t.reflectivity;e.refractionRatio.value=t.refractionRatio;const a=s.get(n).__maxMipLevel;if(a!==undefined){e.maxMipLevel.value=a}}if(t.lightMap){e.lightMap.value=t.lightMap;e.lightMapIntensity.value=t.lightMapIntensity}if(t.aoMap){e.aoMap.value=t.aoMap;e.aoMapIntensity.value=t.aoMapIntensity}let r;if(t.map){r=t.map}else if(t.specularMap){r=t.specularMap}else if(t.displacementMap){r=t.displacementMap}else if(t.normalMap){r=t.normalMap}else if(t.bumpMap){r=t.bumpMap}else if(t.roughnessMap){r=t.roughnessMap}else if(t.metalnessMap){r=t.metalnessMap}else if(t.alphaMap){r=t.alphaMap}else if(t.emissiveMap){r=t.emissiveMap}else if(t.clearcoatMap){r=t.clearcoatMap}else if(t.clearcoatNormalMap){r=t.clearcoatNormalMap}else if(t.clearcoatRoughnessMap){r=t.clearcoatRoughnessMap}if(r!==undefined){if(r.isWebGLRenderTarget){r=r.texture}if(r.matrixAutoUpdate===true){r.updateMatrix()}e.uvTransform.value.copy(r.matrix)}let i;if(t.aoMap){i=t.aoMap}else if(t.lightMap){i=t.lightMap}if(i!==undefined){if(i.isWebGLRenderTarget){i=i.texture}if(i.matrixAutoUpdate===true){i.updateMatrix()}e.uv2Transform.value.copy(i.matrix)}}function a(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity}function o(e,t){e.dashSize.value=t.dashSize;e.totalSize.value=t.dashSize+t.gapSize;e.scale.value=t.scale}function c(e,t,n,r){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.size.value=t.size*n;e.scale.value=r*.5;if(t.map){e.map.value=t.map}if(t.alphaMap){e.alphaMap.value=t.alphaMap}let i;if(t.map){i=t.map}else if(t.alphaMap){i=t.alphaMap}if(i!==undefined){if(i.matrixAutoUpdate===true){i.updateMatrix()}e.uvTransform.value.copy(i.matrix)}}function l(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.rotation.value=t.rotation;if(t.map){e.map.value=t.map}if(t.alphaMap){e.alphaMap.value=t.alphaMap}let n;if(t.map){n=t.map}else if(t.alphaMap){n=t.alphaMap}if(n!==undefined){if(n.matrixAutoUpdate===true){n.updateMatrix()}e.uvTransform.value.copy(n.matrix)}}function u(e,t){if(t.emissiveMap){e.emissiveMap.value=t.emissiveMap}}function h(e,t){e.specular.value.copy(t.specular);e.shininess.value=Math.max(t.shininess,1e-4);if(t.emissiveMap){e.emissiveMap.value=t.emissiveMap}if(t.bumpMap){e.bumpMap.value=t.bumpMap;e.bumpScale.value=t.bumpScale;if(t.side===BackSide)e.bumpScale.value*=-1}if(t.normalMap){e.normalMap.value=t.normalMap;e.normalScale.value.copy(t.normalScale);if(t.side===BackSide)e.normalScale.value.negate()}if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}function d(e,t){if(t.gradientMap){e.gradientMap.value=t.gradientMap}if(t.emissiveMap){e.emissiveMap.value=t.emissiveMap}if(t.bumpMap){e.bumpMap.value=t.bumpMap;e.bumpScale.value=t.bumpScale;if(t.side===BackSide)e.bumpScale.value*=-1}if(t.normalMap){e.normalMap.value=t.normalMap;e.normalScale.value.copy(t.normalScale);if(t.side===BackSide)e.normalScale.value.negate()}if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}function f(e,t){e.roughness.value=t.roughness;e.metalness.value=t.metalness;if(t.roughnessMap){e.roughnessMap.value=t.roughnessMap}if(t.metalnessMap){e.metalnessMap.value=t.metalnessMap}if(t.emissiveMap){e.emissiveMap.value=t.emissiveMap}if(t.bumpMap){e.bumpMap.value=t.bumpMap;e.bumpScale.value=t.bumpScale;if(t.side===BackSide)e.bumpScale.value*=-1}if(t.normalMap){e.normalMap.value=t.normalMap;e.normalScale.value.copy(t.normalScale);if(t.side===BackSide)e.normalScale.value.negate()}if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}const n=s.get(t).envMap;if(n){e.envMapIntensity.value=t.envMapIntensity}}function p(e,t){f(e,t);e.reflectivity.value=t.reflectivity;e.clearcoat.value=t.clearcoat;e.clearcoatRoughness.value=t.clearcoatRoughness;if(t.sheen)e.sheen.value.copy(t.sheen);if(t.clearcoatMap){e.clearcoatMap.value=t.clearcoatMap}if(t.clearcoatRoughnessMap){e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap}if(t.clearcoatNormalMap){e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale);e.clearcoatNormalMap.value=t.clearcoatNormalMap;if(t.side===BackSide){e.clearcoatNormalScale.value.negate()}}e.transmission.value=t.transmission;if(t.transmissionMap){e.transmissionMap.value=t.transmissionMap}}function m(e,t){if(t.matcap){e.matcap.value=t.matcap}if(t.bumpMap){e.bumpMap.value=t.bumpMap;e.bumpScale.value=t.bumpScale;if(t.side===BackSide)e.bumpScale.value*=-1}if(t.normalMap){e.normalMap.value=t.normalMap;e.normalScale.value.copy(t.normalScale);if(t.side===BackSide)e.normalScale.value.negate()}if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}function g(e,t){if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}function _(e,t){if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}e.referencePosition.value.copy(t.referencePosition);e.nearDistance.value=t.nearDistance;e.farDistance.value=t.farDistance}function y(e,t){if(t.bumpMap){e.bumpMap.value=t.bumpMap;e.bumpScale.value=t.bumpScale;if(t.side===BackSide)e.bumpScale.value*=-1}if(t.normalMap){e.normalMap.value=t.normalMap;e.normalScale.value.copy(t.normalScale);if(t.side===BackSide)e.normalScale.value.negate()}if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}return{refreshFogUniforms:e,refreshMaterialUniforms:t}}function createCanvasElement(){const e=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");e.style.display="block";return e}function WebGLRenderer(e){e=e||{};const a=e.canvas!==undefined?e.canvas:createCanvasElement(),i=e.context!==undefined?e.context:null,s=e.alpha!==undefined?e.alpha:false,b=e.depth!==undefined?e.depth:true,U=e.stencil!==undefined?e.stencil:true,O=e.antialias!==undefined?e.antialias:false,z=e.premultipliedAlpha!==undefined?e.premultipliedAlpha:true,H=e.preserveDrawingBuffer!==undefined?e.preserveDrawingBuffer:false,k=e.powerPreference!==undefined?e.powerPreference:"default",W=e.failIfMajorPerformanceCaveat!==undefined?e.failIfMajorPerformanceCaveat:false;let d=null;let M=null;const o=[];const c=[];this.domElement=a;this.debug={checkShaderErrors:true};this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;this.sortObjects=true;this.clippingPlanes=[];this.localClippingEnabled=false;this.gammaFactor=2;this.outputEncoding=LinearEncoding;this.physicallyCorrectLights=false;this.toneMapping=NoToneMapping;this.toneMappingExposure=1;this.maxMorphTargets=8;this.maxMorphNormals=4;const w=this;let j=false;let q=null;let $=0;let X=0;let S=null;let Y=null;let Z=-1;let T=null;const f=new Vector4;const u=new Vector4;let J=null;let r=a.width;let E=a.height;let A=1;let K=null;let Q=null;const h=new Vector4(0,0,r,E);const p=new Vector4(0,0,r,E);let ee=false;const te=new Frustum;let ne=false;let re=false;const m=new Matrix4;const L=new Vector3;const ie={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function ae(){return S===null?A:1}let C=i;function se(t,n){for(let e=0;e<t.length;e++){const r=t[e];const i=a.getContext(r,n);if(i!==null)return i}return null}try{const Re={alpha:s,depth:b,stencil:U,antialias:O,premultipliedAlpha:z,preserveDrawingBuffer:H,powerPreference:k,failIfMajorPerformanceCaveat:W};a.addEventListener("webglcontextlost",ge,false);a.addEventListener("webglcontextrestored",_e,false);if(C===null){const Pe=["webgl2","webgl","experimental-webgl"];if(w.isWebGL1Renderer===true){Pe.shift()}C=se(Pe,Re);if(C===null){if(se(Pe)){throw new Error("Error creating WebGL context with your selected attributes.")}else{throw new Error("Error creating WebGL context.")}}}if(C.getShaderPrecisionFormat===undefined){C.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}}}catch(e){console.error("THREE.WebGLRenderer: "+e.message);throw e}let g,R,P,t;let B,D,I,G,oe,_;let y,ce,le,ue,F;let l,he,de,fe;let v,N;function pe(){g=new WebGLExtensions(C);R=new WebGLCapabilities(C,g,e);g.init(R);v=new WebGLUtils(C,g,R);P=new WebGLState(C,g,R);P.scissor(u.copy(p).multiplyScalar(A).floor());P.viewport(f.copy(h).multiplyScalar(A).floor());t=new WebGLInfo(C);B=new WebGLProperties;D=new WebGLTextures(C,g,P,B,R,v,t);I=new WebGLCubeMaps(w);G=new WebGLAttributes(C,R);N=new WebGLBindingStates(C,g,G,R);oe=new WebGLGeometries(C,G,t,N);_=new WebGLObjects(C,oe,G,t);he=new WebGLMorphtargets(C);F=new WebGLClipping(B);y=new WebGLPrograms(w,I,g,R,N,F);ce=new WebGLMaterials(B);le=new WebGLRenderLists(B);ue=new WebGLRenderStates(g,R);l=new WebGLBackground(w,I,P,_,z);de=new WebGLBufferRenderer(C,g,t,R);fe=new WebGLIndexedBufferRenderer(C,g,t,R);t.programs=y.programs;w.capabilities=R;w.extensions=g;w.properties=B;w.renderLists=le;w.state=P;w.info=t}pe();const x=new WebXRManager(w,C);this.xr=x;const me=new WebGLShadowMap(w,_,R.maxTextureSize);this.shadowMap=me;this.getContext=function(){return C};this.getContextAttributes=function(){return C.getContextAttributes()};this.forceContextLoss=function(){const e=g.get("WEBGL_lose_context");if(e)e.loseContext()};this.forceContextRestore=function(){const e=g.get("WEBGL_lose_context");if(e)e.restoreContext()};this.getPixelRatio=function(){return A};this.setPixelRatio=function(e){if(e===undefined)return;A=e;this.setSize(r,E,false)};this.getSize=function(e){if(e===undefined){console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument");e=new Vector2}return e.set(r,E)};this.setSize=function(e,t,n){if(x.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}r=e;E=t;a.width=Math.floor(e*A);a.height=Math.floor(t*A);if(n!==false){a.style.width=e+"px";a.style.height=t+"px"}this.setViewport(0,0,e,t)};this.getDrawingBufferSize=function(e){if(e===undefined){console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument");e=new Vector2}return e.set(r*A,E*A).floor()};this.setDrawingBufferSize=function(e,t,n){r=e;E=t;A=n;a.width=Math.floor(e*n);a.height=Math.floor(t*n);this.setViewport(0,0,e,t)};this.getCurrentViewport=function(e){if(e===undefined){console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument");e=new Vector4}return e.copy(f)};this.getViewport=function(e){return e.copy(h)};this.setViewport=function(e,t,n,r){if(e.isVector4){h.set(e.x,e.y,e.z,e.w)}else{h.set(e,t,n,r)}P.viewport(f.copy(h).multiplyScalar(A).floor())};this.getScissor=function(e){return e.copy(p)};this.setScissor=function(e,t,n,r){if(e.isVector4){p.set(e.x,e.y,e.z,e.w)}else{p.set(e,t,n,r)}P.scissor(u.copy(p).multiplyScalar(A).floor())};this.getScissorTest=function(){return ee};this.setScissorTest=function(e){P.setScissorTest(ee=e)};this.setOpaqueSort=function(e){K=e};this.setTransparentSort=function(e){Q=e};this.getClearColor=function(e){if(e===undefined){console.warn("WebGLRenderer: .getClearColor() now requires a Color as an argument");e=new Color}return e.copy(l.getClearColor())};this.setClearColor=function(){l.setClearColor.apply(l,arguments)};this.getClearAlpha=function(){return l.getClearAlpha()};this.setClearAlpha=function(){l.setClearAlpha.apply(l,arguments)};this.clear=function(e,t,n){let r=0;if(e===undefined||e)r|=16384;if(t===undefined||t)r|=256;if(n===undefined||n)r|=1024;C.clear(r)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){a.removeEventListener("webglcontextlost",ge,false);a.removeEventListener("webglcontextrestored",_e,false);le.dispose();ue.dispose();B.dispose();I.dispose();_.dispose();N.dispose();x.dispose();n.stop()};function ge(e){e.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");j=true}function _e(){console.log("THREE.WebGLRenderer: Context Restored.");j=false;pe()}function ye(e){const t=e.target;t.removeEventListener("dispose",ye);ve(t)}function ve(e){xe(e);B.remove(e)}function xe(e){const t=B.get(e).program;if(t!==undefined){y.releaseProgram(t)}}function be(e,t){e.render(function(e){w.renderBufferImmediate(e,t)})}this.renderBufferImmediate=function(e,t){N.initAttributes();const n=B.get(e);if(e.hasPositions&&!n.position)n.position=C.createBuffer();if(e.hasNormals&&!n.normal)n.normal=C.createBuffer();if(e.hasUvs&&!n.uv)n.uv=C.createBuffer();if(e.hasColors&&!n.color)n.color=C.createBuffer();const r=t.getAttributes();if(e.hasPositions){C.bindBuffer(34962,n.position);C.bufferData(34962,e.positionArray,35048);N.enableAttribute(r.position);C.vertexAttribPointer(r.position,3,5126,false,0,0)}if(e.hasNormals){C.bindBuffer(34962,n.normal);C.bufferData(34962,e.normalArray,35048);N.enableAttribute(r.normal);C.vertexAttribPointer(r.normal,3,5126,false,0,0)}if(e.hasUvs){C.bindBuffer(34962,n.uv);C.bufferData(34962,e.uvArray,35048);N.enableAttribute(r.uv);C.vertexAttribPointer(r.uv,2,5126,false,0,0)}if(e.hasColors){C.bindBuffer(34962,n.color);C.bufferData(34962,e.colorArray,35048);N.enableAttribute(r.color);C.vertexAttribPointer(r.color,3,5126,false,0,0)}N.disableUnusedAttributes();C.drawArrays(4,0,e.count);e.count=0};this.renderBufferDirect=function(e,t,n,r,i,a){if(t===null)t=ie;const s=i.isMesh&&i.matrixWorld.determinant()<0;const o=Ae(e,t,r,i);P.setMaterial(r,s);let c=n.index;const l=n.attributes.position;if(c===null){if(l===undefined||l.count===0)return}else if(c.count===0){return}let u=1;if(r.wireframe===true){c=oe.getWireframeAttribute(n);u=2}if(r.morphTargets||r.morphNormals){he.update(i,n,r,o)}N.setup(i,r,o,n,c);let h;let d=de;if(c!==null){h=G.get(c);d=fe;d.setIndex(h)}const f=c!==null?c.count:l.count;const p=n.drawRange.start*u;const m=n.drawRange.count*u;const g=a!==null?a.start*u:0;const _=a!==null?a.count*u:Infinity;const y=Math.max(p,g);const v=Math.min(f,p+m,g+_)-1;const x=Math.max(0,v-y+1);if(x===0)return;if(i.isMesh){if(r.wireframe===true){P.setLineWidth(r.wireframeLinewidth*ae());d.setMode(1)}else{d.setMode(4)}}else if(i.isLine){let e=r.linewidth;if(e===undefined)e=1;P.setLineWidth(e*ae());if(i.isLineSegments){d.setMode(1)}else if(i.isLineLoop){d.setMode(2)}else{d.setMode(3)}}else if(i.isPoints){d.setMode(0)}else if(i.isSprite){d.setMode(4)}if(i.isInstancedMesh){d.renderInstances(y,x,i.count)}else if(n.isInstancedBufferGeometry){const b=Math.min(n.instanceCount,n._maxInstanceCount);d.renderInstances(y,x,b)}else{d.render(y,x)}};this.compile=function(i,t){M=ue.get(i);M.init();i.traverseVisible(function(e){if(e.isLight&&e.layers.test(t.layers)){M.pushLight(e);if(e.castShadow){M.pushShadow(e)}}});M.setupLights();const a=new WeakMap;i.traverse(function(t){const n=t.material;if(n){if(Array.isArray(n)){for(let e=0;e<n.length;e++){const r=n[e];if(a.has(r)===false){V(r,i,t);a.set(r)}}}else if(a.has(n)===false){V(n,i,t);a.set(n)}}})};let Me=null;function we(e){if(x.isPresenting)return;if(Me)Me(e)}const n=new WebGLAnimation;n.setAnimationLoop(we);if(typeof window!=="undefined")n.setContext(window);this.setAnimationLoop=function(e){Me=e;x.setAnimationLoop(e);e===null?n.stop():n.start()};this.render=function(e,t){let n,r;if(arguments[2]!==undefined){console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");n=arguments[2]}if(arguments[3]!==undefined){console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");r=arguments[3]}if(t!==undefined&&t.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(j===true)return;N.resetDefaultState();Z=-1;T=null;if(e.autoUpdate===true)e.updateMatrixWorld();if(t.parent===null)t.updateMatrixWorld();if(x.enabled===true&&x.isPresenting===true){t=x.getCamera(t)}if(e.isScene===true)e.onBeforeRender(w,e,t,n||S);M=ue.get(e,c.length);M.init();c.push(M);m.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);te.setFromProjectionMatrix(m);re=this.localClippingEnabled;ne=F.init(this.clippingPlanes,re,t);d=le.get(e,o.length);d.init();o.push(d);Se(e,t,0,w.sortObjects);d.finish();if(w.sortObjects===true){d.sort(K,Q)}if(ne===true)F.beginShadows();const i=M.state.shadowsArray;me.render(i,e,t);M.setupLights();M.setupLightsView(t);if(ne===true)F.endShadows();if(this.info.autoReset===true)this.info.reset();if(n!==undefined){this.setRenderTarget(n)}l.render(d,e,t,r);const a=d.opaque;const s=d.transparent;if(a.length>0)Te(a,e,t);if(s.length>0)Te(s,e,t);if(e.isScene===true)e.onAfterRender(w,e,t);if(S!==null){D.updateRenderTargetMipmap(S);D.updateMultisampleRenderTarget(S)}P.buffers.depth.setTest(true);P.buffers.depth.setMask(true);P.buffers.color.setMask(true);P.setPolygonOffset(false);c.pop();if(c.length>0){M=c[c.length-1]}else{M=null}o.pop();if(o.length>0){d=o[o.length-1]}else{d=null}};function Se(n,r,i,a){if(n.visible===false)return;const e=n.layers.test(r.layers);if(e){if(n.isGroup){i=n.renderOrder}else if(n.isLOD){if(n.autoUpdate===true)n.update(r)}else if(n.isLight){M.pushLight(n);if(n.castShadow){M.pushShadow(n)}}else if(n.isSprite){if(!n.frustumCulled||te.intersectsSprite(n)){if(a){L.setFromMatrixPosition(n.matrixWorld).applyMatrix4(m)}const o=_.update(n);const c=n.material;if(c.visible){d.push(n,o,c,i,L.z,null)}}}else if(n.isImmediateRenderObject){if(a){L.setFromMatrixPosition(n.matrixWorld).applyMatrix4(m)}d.push(n,null,n.material,i,L.z,null)}else if(n.isMesh||n.isLine||n.isPoints){if(n.isSkinnedMesh){if(n.skeleton.frame!==t.render.frame){n.skeleton.update();n.skeleton.frame=t.render.frame}}if(!n.frustumCulled||te.intersectsObject(n)){if(a){L.setFromMatrixPosition(n.matrixWorld).applyMatrix4(m)}const o=_.update(n);const c=n.material;if(Array.isArray(c)){const l=o.groups;for(let e=0,t=l.length;e<t;e++){const u=l[e];const h=c[u.materialIndex];if(h&&h.visible){d.push(n,o,h,i,L.z,u)}}}else if(c.visible){d.push(n,o,c,i,L.z,null)}}}}const s=n.children;for(let e=0,t=s.length;e<t;e++){Se(s[e],r,i,a)}}function Te(n,r,i){const a=r.isScene===true?r.overrideMaterial:null;for(let e=0,t=n.length;e<t;e++){const s=n[e];const o=s.object;const c=s.geometry;const l=a===null?s.material:a;const u=s.group;if(i.isArrayCamera){const h=i.cameras;for(let e=0,t=h.length;e<t;e++){const d=h[e];if(o.layers.test(d.layers)){P.viewport(f.copy(d.viewport));M.setupLightsView(d);Ee(o,r,d,c,l,u)}}}else{Ee(o,r,i,c,l,u)}}}function Ee(e,t,n,r,i,a){e.onBeforeRender(w,t,n,r,i,a);e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld);e.normalMatrix.getNormalMatrix(e.modelViewMatrix);if(e.isImmediateRenderObject){const s=Ae(n,t,i,e);P.setMaterial(i);N.reset();be(e,s)}else{w.renderBufferDirect(n,t,r,i,e,a)}e.onAfterRender(w,t,n,r,i,a)}function V(e,t,n){if(t.isScene!==true)t=ie;const r=B.get(e);const i=M.state.lights;const a=M.state.shadowsArray;const s=i.state.version;const o=y.getParameters(e,i.state,a,t,n);const c=y.getProgramCacheKey(o);let l=r.program;let u=true;r.environment=e.isMeshStandardMaterial?t.environment:null;r.fog=t.fog;r.envMap=I.get(e.envMap||r.environment);if(l===undefined){e.addEventListener("dispose",ye)}else if(l.cacheKey!==c){xe(e)}else if(r.lightsStateVersion!==s){u=false}else if(o.shaderID!==undefined){return}else{u=false}if(u){o.uniforms=y.getUniforms(e);e.onBeforeCompile(o,w);l=y.acquireProgram(o,c);r.program=l;r.uniforms=o.uniforms;r.outputEncoding=o.outputEncoding}const h=r.uniforms;if(!e.isShaderMaterial&&!e.isRawShaderMaterial||e.clipping===true){r.numClippingPlanes=F.numPlanes;r.numIntersection=F.numIntersection;h.clippingPlanes=F.uniform}r.needsLights=Ce(e);r.lightsStateVersion=s;if(r.needsLights){h.ambientLightColor.value=i.state.ambient;h.lightProbe.value=i.state.probe;h.directionalLights.value=i.state.directional;h.directionalLightShadows.value=i.state.directionalShadow;h.spotLights.value=i.state.spot;h.spotLightShadows.value=i.state.spotShadow;h.rectAreaLights.value=i.state.rectArea;h.ltc_1.value=i.state.rectAreaLTC1;h.ltc_2.value=i.state.rectAreaLTC2;h.pointLights.value=i.state.point;h.pointLightShadows.value=i.state.pointShadow;h.hemisphereLights.value=i.state.hemi;h.directionalShadowMap.value=i.state.directionalShadowMap;h.directionalShadowMatrix.value=i.state.directionalShadowMatrix;h.spotShadowMap.value=i.state.spotShadowMap;h.spotShadowMatrix.value=i.state.spotShadowMatrix;h.pointShadowMap.value=i.state.pointShadowMap;h.pointShadowMatrix.value=i.state.pointShadowMatrix}const d=r.program.getUniforms();const f=WebGLUniforms.seqWithValue(d.seq,h);r.uniformsList=f}function Ae(e,t,n,r){if(t.isScene!==true)t=ie;D.resetTextureUnits();const i=t.fog;const a=n.isMeshStandardMaterial?t.environment:null;const s=S===null?w.outputEncoding:S.texture.encoding;const o=I.get(n.envMap||a);const c=B.get(n);const l=M.state.lights;if(ne===true){if(re===true||e!==T){const g=e===T&&n.id===Z;F.setState(n,e,g)}}if(n.version===c.__version){if(n.fog&&c.fog!==i){V(n,t,r)}else if(c.environment!==a){V(n,t,r)}else if(c.needsLights&&c.lightsStateVersion!==l.state.version){V(n,t,r)}else if(c.numClippingPlanes!==undefined&&(c.numClippingPlanes!==F.numPlanes||c.numIntersection!==F.numIntersection)){V(n,t,r)}else if(c.outputEncoding!==s){V(n,t,r)}else if(c.envMap!==o){V(n,t,r)}}else{V(n,t,r);c.__version=n.version}let u=false;let h=false;let d=false;const f=c.program,p=f.getUniforms(),m=c.uniforms;if(P.useProgram(f.program)){u=true;h=true;d=true}if(n.id!==Z){Z=n.id;h=true}if(u||T!==e){p.setValue(C,"projectionMatrix",e.projectionMatrix);if(R.logarithmicDepthBuffer){p.setValue(C,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2))}if(T!==e){T=e;h=true;d=true}if(n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const _=p.map.cameraPosition;if(_!==undefined){_.setValue(C,L.setFromMatrixPosition(e.matrixWorld))}}if(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial){p.setValue(C,"isOrthographic",e.isOrthographicCamera===true)}if(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||n.skinning){p.setValue(C,"viewMatrix",e.matrixWorldInverse)}}if(n.skinning){p.setOptional(C,r,"bindMatrix");p.setOptional(C,r,"bindMatrixInverse");const y=r.skeleton;if(y){const v=y.bones;if(R.floatVertexTextures){if(y.boneTexture===null){let e=Math.sqrt(v.length*4);e=MathUtils.ceilPowerOfTwo(e);e=Math.max(e,4);const x=new Float32Array(e*e*4);x.set(y.boneMatrices);const b=new DataTexture(x,e,e,RGBAFormat,FloatType);y.boneMatrices=x;y.boneTexture=b;y.boneTextureSize=e}p.setValue(C,"boneTexture",y.boneTexture,D);p.setValue(C,"boneTextureSize",y.boneTextureSize)}else{p.setOptional(C,y,"boneMatrices")}}}if(h||c.receiveShadow!==r.receiveShadow){c.receiveShadow=r.receiveShadow;p.setValue(C,"receiveShadow",r.receiveShadow)}if(h){p.setValue(C,"toneMappingExposure",w.toneMappingExposure);if(c.needsLights){Le(m,d)}if(i&&n.fog){ce.refreshFogUniforms(m,i)}ce.refreshMaterialUniforms(m,n,A,E);WebGLUniforms.upload(C,c.uniformsList,m,D)}if(n.isShaderMaterial&&n.uniformsNeedUpdate===true){WebGLUniforms.upload(C,c.uniformsList,m,D);n.uniformsNeedUpdate=false}if(n.isSpriteMaterial){p.setValue(C,"center",r.center)}p.setValue(C,"modelViewMatrix",r.modelViewMatrix);p.setValue(C,"normalMatrix",r.normalMatrix);p.setValue(C,"modelMatrix",r.matrixWorld);return f}function Le(e,t){e.ambientLightColor.needsUpdate=t;e.lightProbe.needsUpdate=t;e.directionalLights.needsUpdate=t;e.directionalLightShadows.needsUpdate=t;e.pointLights.needsUpdate=t;e.pointLightShadows.needsUpdate=t;e.spotLights.needsUpdate=t;e.spotLightShadows.needsUpdate=t;e.rectAreaLights.needsUpdate=t;e.hemisphereLights.needsUpdate=t}function Ce(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&e.lights===true}this.setFramebuffer=function(e){if(q!==e&&S===null)C.bindFramebuffer(36160,e);q=e};this.getActiveCubeFace=function(){return $};this.getActiveMipmapLevel=function(){return X};this.getRenderTarget=function(){return S};this.setRenderTarget=function(e,t=0,n=0){S=e;$=t;X=n;if(e&&B.get(e).__webglFramebuffer===undefined){D.setupRenderTarget(e)}let r=q;let i=false;let a=false;if(e){const s=e.texture;if(s.isDataTexture3D||s.isDataTexture2DArray){a=true}const o=B.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget){r=o[t];i=true}else if(e.isWebGLMultisampleRenderTarget){r=B.get(e).__webglMultisampledFramebuffer}else{r=o}f.copy(e.viewport);u.copy(e.scissor);J=e.scissorTest}else{f.copy(h).multiplyScalar(A).floor();u.copy(p).multiplyScalar(A).floor();J=ee}if(Y!==r){C.bindFramebuffer(36160,r);Y=r}P.viewport(f);P.scissor(u);P.setScissorTest(J);if(i){const c=B.get(e.texture);C.framebufferTexture2D(36160,36064,34069+t,c.__webglTexture,n)}else if(a){const c=B.get(e.texture);const l=t||0;C.framebufferTextureLayer(36160,36064,c.__webglTexture,n||0,l)}};this.readRenderTargetPixels=function(t,n,r,i,a,s,e){if(!(t&&t.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let o=B.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&e!==undefined){o=o[e]}if(o){let e=false;if(o!==Y){C.bindFramebuffer(36160,o);e=true}try{const c=t.texture;const l=c.format;const u=c.type;if(l!==RGBAFormat&&v.convert(l)!==C.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const h=u===HalfFloatType&&(g.has("EXT_color_buffer_half_float")||R.isWebGL2&&g.has("EXT_color_buffer_float"));if(u!==UnsignedByteType&&v.convert(u)!==C.getParameter(35738)&&!(u===FloatType&&(R.isWebGL2||g.has("OES_texture_float")||g.has("WEBGL_color_buffer_float")))&&!h){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}if(C.checkFramebufferStatus(36160)===36053){if(n>=0&&n<=t.width-i&&(r>=0&&r<=t.height-a)){C.readPixels(n,r,i,a,v.convert(l),v.convert(u),s)}}else{console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}}finally{if(e){C.bindFramebuffer(36160,Y)}}}};this.copyFramebufferToTexture=function(e,t,n=0){const r=Math.pow(2,-n);const i=Math.floor(t.image.width*r);const a=Math.floor(t.image.height*r);const s=v.convert(t.format);D.setTexture2D(t,0);C.copyTexImage2D(3553,n,s,e.x,e.y,i,a,0);P.unbindTexture()};this.copyTextureToTexture=function(e,t,n,r=0){const i=t.image.width;const a=t.image.height;const s=v.convert(n.format);const o=v.convert(n.type);D.setTexture2D(n,0);C.pixelStorei(37440,n.flipY);C.pixelStorei(37441,n.premultiplyAlpha);C.pixelStorei(3317,n.unpackAlignment);if(t.isDataTexture){C.texSubImage2D(3553,r,e.x,e.y,i,a,s,o,t.image.data)}else{if(t.isCompressedTexture){C.compressedTexSubImage2D(3553,r,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,s,t.mipmaps[0].data)}else{C.texSubImage2D(3553,r,e.x,e.y,s,o,t.image)}}if(r===0&&n.generateMipmaps)C.generateMipmap(3553);P.unbindTexture()};this.copyTextureToTexture3D=function(e,t,n,r,i=0){if(w.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const{width:a,height:s,data:o}=n.image;const c=v.convert(r.format);const l=v.convert(r.type);let u;if(r.isDataTexture3D){D.setTexture3D(r,0);u=32879}else if(r.isDataTexture2DArray){D.setTexture2DArray(r,0);u=35866}else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}C.pixelStorei(37440,r.flipY);C.pixelStorei(37441,r.premultiplyAlpha);C.pixelStorei(3317,r.unpackAlignment);const h=C.getParameter(3314);const d=C.getParameter(32878);const f=C.getParameter(3316);const p=C.getParameter(3315);const m=C.getParameter(32877);C.pixelStorei(3314,a);C.pixelStorei(32878,s);C.pixelStorei(3316,e.min.x);C.pixelStorei(3315,e.min.y);C.pixelStorei(32877,e.min.z);C.texSubImage3D(u,i,t.x,t.y,t.z,e.max.x-e.min.x+1,e.max.y-e.min.y+1,e.max.z-e.min.z+1,c,l,o);C.pixelStorei(3314,h);C.pixelStorei(32878,d);C.pixelStorei(3316,f);C.pixelStorei(3315,p);C.pixelStorei(32877,m);if(i===0&&r.generateMipmaps)C.generateMipmap(u);P.unbindTexture()};this.initTexture=function(e){D.setTexture2D(e,0);P.unbindTexture()};this.resetState=function(){P.reset();N.reset()};if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}class WebGL1Renderer extends WebGLRenderer{}WebGL1Renderer.prototype.isWebGL1Renderer=true;class FogExp2{constructor(e,t){this.name="";this.color=new Color(e);this.density=t!==undefined?t:25e-5}clone(){return new FogExp2(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}FogExp2.prototype.isFogExp2=true;class Fog{constructor(e,t,n){this.name="";this.color=new Color(e);this.near=t!==undefined?t:1;this.far=n!==undefined?n:1e3}clone(){return new Fog(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}Fog.prototype.isFog=true;class Scene extends Object3D{constructor(){super();this.type="Scene";this.background=null;this.environment=null;this.fog=null;this.overrideMaterial=null;this.autoUpdate=true;if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}copy(e,t){super.copy(e,t);if(e.background!==null)this.background=e.background.clone();if(e.environment!==null)this.environment=e.environment.clone();if(e.fog!==null)this.fog=e.fog.clone();if(e.overrideMaterial!==null)this.overrideMaterial=e.overrideMaterial.clone();this.autoUpdate=e.autoUpdate;this.matrixAutoUpdate=e.matrixAutoUpdate;return this}toJSON(e){const t=super.toJSON(e);if(this.background!==null)t.object.background=this.background.toJSON(e);if(this.environment!==null)t.object.environment=this.environment.toJSON(e);if(this.fog!==null)t.object.fog=this.fog.toJSON();return t}}Scene.prototype.isScene=true;function InterleavedBuffer(e,t){this.array=e;this.stride=t;this.count=e!==undefined?e.length/t:0;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;this.uuid=MathUtils.generateUUID()}Object.defineProperty(InterleavedBuffer.prototype,"needsUpdate",{set:function(e){if(e===true)this.version++}});Object.assign(InterleavedBuffer.prototype,{isInterleavedBuffer:true,onUploadCallback:function(){},setUsage:function(e){this.usage=e;return this},copy:function(e){this.array=new e.array.constructor(e.array);this.count=e.count;this.stride=e.stride;this.usage=e.usage;return this},copyAt:function(n,r,i){n*=this.stride;i*=r.stride;for(let e=0,t=this.stride;e<t;e++){this.array[n+e]=r.array[i+e]}return this},set:function(e,t=0){this.array.set(e,t);return this},clone:function(e){if(e.arrayBuffers===undefined){e.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=MathUtils.generateUUID()}if(e.arrayBuffers[this.array.buffer._uuid]===undefined){e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer}const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]);const n=new InterleavedBuffer(t,this.stride);n.setUsage(this.usage);return n},onUpload:function(e){this.onUploadCallback=e;return this},toJSON:function(e){if(e.arrayBuffers===undefined){e.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=MathUtils.generateUUID()}if(e.arrayBuffers[this.array.buffer._uuid]===undefined){e.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))}return{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}});const _vector$6=new Vector3;function InterleavedBufferAttribute(e,t,n,r){this.name="";this.data=e;this.itemSize=t;this.offset=n;this.normalized=r===true}Object.defineProperties(InterleavedBufferAttribute.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}},needsUpdate:{set:function(e){this.data.needsUpdate=e}}});Object.assign(InterleavedBufferAttribute.prototype,{isInterleavedBufferAttribute:true,applyMatrix4:function(n){for(let e=0,t=this.data.count;e<t;e++){_vector$6.x=this.getX(e);_vector$6.y=this.getY(e);_vector$6.z=this.getZ(e);_vector$6.applyMatrix4(n);this.setXYZ(e,_vector$6.x,_vector$6.y,_vector$6.z)}return this},setX:function(e,t){this.data.array[e*this.data.stride+this.offset]=t;return this},setY:function(e,t){this.data.array[e*this.data.stride+this.offset+1]=t;return this},setZ:function(e,t){this.data.array[e*this.data.stride+this.offset+2]=t;return this},setW:function(e,t){this.data.array[e*this.data.stride+this.offset+3]=t;return this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,n){e=e*this.data.stride+this.offset;this.data.array[e+0]=t;this.data.array[e+1]=n;return this},setXYZ:function(e,t,n,r){e=e*this.data.stride+this.offset;this.data.array[e+0]=t;this.data.array[e+1]=n;this.data.array[e+2]=r;return this},setXYZW:function(e,t,n,r,i){e=e*this.data.stride+this.offset;this.data.array[e+0]=t;this.data.array[e+1]=n;this.data.array[e+2]=r;this.data.array[e+3]=i;return this},clone:function(e){if(e===undefined){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++){t.push(this.data.array[n+e])}}return new BufferAttribute(new this.array.constructor(t),this.itemSize,this.normalized)}else{if(e.interleavedBuffers===undefined){e.interleavedBuffers={}}if(e.interleavedBuffers[this.data.uuid]===undefined){e.interleavedBuffers[this.data.uuid]=this.data.clone(e)}return new InterleavedBufferAttribute(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}},toJSON:function(e){if(e===undefined){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++){t.push(this.data.array[n+e])}}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else{if(e.interleavedBuffers===undefined){e.interleavedBuffers={}}if(e.interleavedBuffers[this.data.uuid]===undefined){e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)}return{isInterleavedBufferAttribute:true,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}});class SpriteMaterial extends Material{constructor(e){super();this.type="SpriteMaterial";this.color=new Color(16777215);this.map=null;this.alphaMap=null;this.rotation=0;this.sizeAttenuation=true;this.transparent=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.alphaMap=e.alphaMap;this.rotation=e.rotation;this.sizeAttenuation=e.sizeAttenuation;return this}}SpriteMaterial.prototype.isSpriteMaterial=true;let _geometry;const _intersectPoint=new Vector3;const _worldScale=new Vector3;const _mvPosition=new Vector3;const _alignedPosition=new Vector2;const _rotatedPosition=new Vector2;const _viewWorldMatrix=new Matrix4;const _vA$1=new Vector3;const _vB$1=new Vector3;const _vC$1=new Vector3;const _uvA$1=new Vector2;const _uvB$1=new Vector2;const _uvC$1=new Vector2;class Sprite extends Object3D{constructor(e){super();this.type="Sprite";if(_geometry===undefined){_geometry=new BufferGeometry;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]);const n=new InterleavedBuffer(t,5);_geometry.setIndex([0,1,2,0,2,3]);_geometry.setAttribute("position",new InterleavedBufferAttribute(n,3,0,false));_geometry.setAttribute("uv",new InterleavedBufferAttribute(n,2,3,false))}this.geometry=_geometry;this.material=e!==undefined?e:new SpriteMaterial;this.center=new Vector2(.5,.5)}raycast(e,t){if(e.camera===null){console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.')}_worldScale.setFromMatrixScale(this.matrixWorld);_viewWorldMatrix.copy(e.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld);_mvPosition.setFromMatrixPosition(this.modelViewMatrix);if(e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===false){_worldScale.multiplyScalar(-_mvPosition.z)}const n=this.material.rotation;let r,i;if(n!==0){i=Math.cos(n);r=Math.sin(n)}const a=this.center;transformVertex(_vA$1.set(-.5,-.5,0),_mvPosition,a,_worldScale,r,i);transformVertex(_vB$1.set(.5,-.5,0),_mvPosition,a,_worldScale,r,i);transformVertex(_vC$1.set(.5,.5,0),_mvPosition,a,_worldScale,r,i);_uvA$1.set(0,0);_uvB$1.set(1,0);_uvC$1.set(1,1);let s=e.ray.intersectTriangle(_vA$1,_vB$1,_vC$1,false,_intersectPoint);if(s===null){transformVertex(_vB$1.set(-.5,.5,0),_mvPosition,a,_worldScale,r,i);_uvB$1.set(0,1);s=e.ray.intersectTriangle(_vA$1,_vC$1,_vB$1,false,_intersectPoint);if(s===null){return}}const o=e.ray.origin.distanceTo(_intersectPoint);if(o<e.near||o>e.far)return;t.push({distance:o,point:_intersectPoint.clone(),uv:Triangle.getUV(_intersectPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2),face:null,object:this})}copy(e){super.copy(e);if(e.center!==undefined)this.center.copy(e.center);this.material=e.material;return this}}Sprite.prototype.isSprite=true;function transformVertex(e,t,n,r,i,a){_alignedPosition.subVectors(e,n).addScalar(.5).multiply(r);if(i!==undefined){_rotatedPosition.x=a*_alignedPosition.x-i*_alignedPosition.y;_rotatedPosition.y=i*_alignedPosition.x+a*_alignedPosition.y}else{_rotatedPosition.copy(_alignedPosition)}e.copy(t);e.x+=_rotatedPosition.x;e.y+=_rotatedPosition.y;e.applyMatrix4(_viewWorldMatrix)}const _v1$4=new Vector3;const _v2$2=new Vector3;class LOD extends Object3D{constructor(){super();this._currentLevel=0;this.type="LOD";Object.defineProperties(this,{levels:{enumerable:true,value:[]},isLOD:{value:true}});this.autoUpdate=true}copy(e){super.copy(e,false);const n=e.levels;for(let e=0,t=n.length;e<t;e++){const r=n[e];this.addLevel(r.object.clone(),r.distance)}this.autoUpdate=e.autoUpdate;return this}addLevel(e,t=0){t=Math.abs(t);const n=this.levels;let r;for(r=0;r<n.length;r++){if(t<n[r].distance){break}}n.splice(r,0,{distance:t,object:e});this.add(e);return this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(n){const r=this.levels;if(r.length>0){let e,t;for(e=1,t=r.length;e<t;e++){if(n<r[e].distance){break}}return r[e-1].object}return null}raycast(e,t){const n=this.levels;if(n.length>0){_v1$4.setFromMatrixPosition(this.matrixWorld);const r=e.ray.origin.distanceTo(_v1$4);this.getObjectForDistance(r).raycast(e,t)}}update(n){const r=this.levels;if(r.length>1){_v1$4.setFromMatrixPosition(n.matrixWorld);_v2$2.setFromMatrixPosition(this.matrixWorld);const i=_v1$4.distanceTo(_v2$2)/n.zoom;r[0].object.visible=true;let e,t;for(e=1,t=r.length;e<t;e++){if(i>=r[e].distance){r[e-1].object.visible=false;r[e].object.visible=true}else{break}}this._currentLevel=e-1;for(;e<t;e++){r[e].object.visible=false}}}toJSON(e){const n=super.toJSON(e);if(this.autoUpdate===false)n.object.autoUpdate=false;n.object.levels=[];const r=this.levels;for(let e=0,t=r.length;e<t;e++){const i=r[e];n.object.levels.push({object:i.object.uuid,distance:i.distance})}return n}}const _basePosition=new Vector3;const _skinIndex=new Vector4;const _skinWeight=new Vector4;const _vector$7=new Vector3;const _matrix$1=new Matrix4;function SkinnedMesh(e,t){Mesh.call(this,e,t);this.type="SkinnedMesh";this.bindMode="attached";this.bindMatrix=new Matrix4;this.bindMatrixInverse=new Matrix4}SkinnedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:SkinnedMesh,isSkinnedMesh:true,copy:function(e){Mesh.prototype.copy.call(this,e);this.bindMode=e.bindMode;this.bindMatrix.copy(e.bindMatrix);this.bindMatrixInverse.copy(e.bindMatrixInverse);this.skeleton=e.skeleton;return this},bind:function(e,t){this.skeleton=e;if(t===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();t=this.matrixWorld}this.bindMatrix.copy(t);this.bindMatrixInverse.copy(t).invert()},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){const n=new Vector4;const r=this.geometry.attributes.skinWeight;for(let e=0,t=r.count;e<t;e++){n.x=r.getX(e);n.y=r.getY(e);n.z=r.getZ(e);n.w=r.getW(e);const i=1/n.manhattanLength();if(i!==Infinity){n.multiplyScalar(i)}else{n.set(1,0,0,0)}r.setXYZW(e,n.x,n.y,n.z,n.w)}},updateMatrixWorld:function(e){Mesh.prototype.updateMatrixWorld.call(this,e);if(this.bindMode==="attached"){this.bindMatrixInverse.copy(this.matrixWorld).invert()}else if(this.bindMode==="detached"){this.bindMatrixInverse.copy(this.bindMatrix).invert()}else{console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}},boneTransform:function(e,t){const n=this.skeleton;const r=this.geometry;_skinIndex.fromBufferAttribute(r.attributes.skinIndex,e);_skinWeight.fromBufferAttribute(r.attributes.skinWeight,e);_basePosition.fromBufferAttribute(r.attributes.position,e).applyMatrix4(this.bindMatrix);t.set(0,0,0);for(let e=0;e<4;e++){const i=_skinWeight.getComponent(e);if(i!==0){const a=_skinIndex.getComponent(e);_matrix$1.multiplyMatrices(n.bones[a].matrixWorld,n.boneInverses[a]);t.addScaledVector(_vector$7.copy(_basePosition).applyMatrix4(_matrix$1),i)}}return t.applyMatrix4(this.bindMatrixInverse)}});function Bone(){Object3D.call(this);this.type="Bone"}Bone.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Bone,isBone:true});const _offsetMatrix=new Matrix4;const _identityMatrix=new Matrix4;class Skeleton{constructor(e=[],t=[]){this.uuid=MathUtils.generateUUID();this.bones=e.slice(0);this.boneInverses=t;this.boneMatrices=null;this.boneTexture=null;this.boneTextureSize=0;this.frame=-1;this.init()}init(){const e=this.bones;const t=this.boneInverses;this.boneMatrices=new Float32Array(e.length*16);if(t.length===0){this.calculateInverses()}else{if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");this.boneInverses=[];for(let e=0,t=this.bones.length;e<t;e++){this.boneInverses.push(new Matrix4)}}}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new Matrix4;if(this.bones[e]){n.copy(this.bones[e].matrixWorld).invert()}this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];if(n){n.matrixWorld.copy(this.boneInverses[e]).invert()}}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];if(n){if(n.parent&&n.parent.isBone){n.matrix.copy(n.parent.matrixWorld).invert();n.matrix.multiply(n.matrixWorld)}else{n.matrix.copy(n.matrixWorld)}n.matrix.decompose(n.position,n.quaternion,n.scale)}}}update(){const n=this.bones;const r=this.boneInverses;const i=this.boneMatrices;const e=this.boneTexture;for(let e=0,t=n.length;e<t;e++){const a=n[e]?n[e].matrixWorld:_identityMatrix;_offsetMatrix.multiplyMatrices(a,r[e]);_offsetMatrix.toArray(i,e*16)}if(e!==null){e.needsUpdate=true}}clone(){return new Skeleton(this.bones,this.boneInverses)}getBoneByName(n){for(let e=0,t=this.bones.length;e<t;e++){const r=this.bones[e];if(r.name===n){return r}}return undefined}dispose(){if(this.boneTexture!==null){this.boneTexture.dispose();this.boneTexture=null}}fromJSON(n,r){this.uuid=n.uuid;for(let t=0,e=n.bones.length;t<e;t++){const i=n.bones[t];let e=r[i];if(e===undefined){console.warn("THREE.Skeleton: No bone found with UUID:",i);e=new Bone}this.bones.push(e);this.boneInverses.push((new Matrix4).fromArray(n.boneInverses[t]))}this.init();return this}toJSON(){const n={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};n.uuid=this.uuid;const r=this.bones;const i=this.boneInverses;for(let e=0,t=r.length;e<t;e++){const a=r[e];n.bones.push(a.uuid);const s=i[e];n.boneInverses.push(s.toArray())}return n}}const _instanceLocalMatrix=new Matrix4;const _instanceWorldMatrix=new Matrix4;const _instanceIntersects=[];const _mesh=new Mesh;function InstancedMesh(e,t,n){Mesh.call(this,e,t);this.instanceMatrix=new BufferAttribute(new Float32Array(n*16),16);this.instanceColor=null;this.count=n;this.frustumCulled=false}InstancedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:InstancedMesh,isInstancedMesh:true,copy:function(e){Mesh.prototype.copy.call(this,e);this.instanceMatrix.copy(e.instanceMatrix);if(e.instanceColor!==null)this.instanceColor=e.instanceColor.clone();this.count=e.count;return this},getColorAt:function(e,t){t.fromArray(this.instanceColor.array,e*3)},getMatrixAt:function(e,t){t.fromArray(this.instanceMatrix.array,e*16)},raycast:function(e,r){const t=this.matrixWorld;const i=this.count;_mesh.geometry=this.geometry;_mesh.material=this.material;if(_mesh.material===undefined)return;for(let n=0;n<i;n++){this.getMatrixAt(n,_instanceLocalMatrix);_instanceWorldMatrix.multiplyMatrices(t,_instanceLocalMatrix);_mesh.matrixWorld=_instanceWorldMatrix;_mesh.raycast(e,_instanceIntersects);for(let e=0,t=_instanceIntersects.length;e<t;e++){const a=_instanceIntersects[e];a.instanceId=n;a.object=this;r.push(a)}_instanceIntersects.length=0}},setColorAt:function(e,t){if(this.instanceColor===null){this.instanceColor=new BufferAttribute(new Float32Array(this.count*3),3)}t.toArray(this.instanceColor.array,e*3)},setMatrixAt:function(e,t){t.toArray(this.instanceMatrix.array,e*16)},updateMorphTargets:function(){},dispose:function(){this.dispatchEvent({type:"dispose"})}});class LineBasicMaterial extends Material{constructor(e){super();this.type="LineBasicMaterial";this.color=new Color(16777215);this.linewidth=1;this.linecap="round";this.linejoin="round";this.morphTargets=false;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.linewidth=e.linewidth;this.linecap=e.linecap;this.linejoin=e.linejoin;this.morphTargets=e.morphTargets;return this}}LineBasicMaterial.prototype.isLineBasicMaterial=true;const _start=new Vector3;const _end=new Vector3;const _inverseMatrix$1=new Matrix4;const _ray$1=new Ray;const _sphere$2=new Sphere;function Line(e=new BufferGeometry,t=new LineBasicMaterial){Object3D.call(this);this.type="Line";this.geometry=e;this.material=t;this.updateMorphTargets()}Line.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Line,isLine:true,copy:function(e){Object3D.prototype.copy.call(this,e);this.material=e.material;this.geometry=e.geometry;return this},computeLineDistances:function(){const e=this.geometry;if(e.isBufferGeometry){if(e.index===null){const n=e.attributes.position;const r=[0];for(let e=1,t=n.count;e<t;e++){_start.fromBufferAttribute(n,e-1);_end.fromBufferAttribute(n,e);r[e]=r[e-1];r[e]+=_start.distanceTo(_end)}e.setAttribute("lineDistance",new Float32BufferAttribute(r,1))}else{console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}}else if(e.isGeometry){console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}return this},raycast:function(n,r){const e=this.geometry;const t=this.matrixWorld;const i=n.params.Line.threshold;if(e.boundingSphere===null)e.computeBoundingSphere();_sphere$2.copy(e.boundingSphere);_sphere$2.applyMatrix4(t);_sphere$2.radius+=i;if(n.ray.intersectsSphere(_sphere$2)===false)return;_inverseMatrix$1.copy(t).invert();_ray$1.copy(n.ray).applyMatrix4(_inverseMatrix$1);const a=i/((this.scale.x+this.scale.y+this.scale.z)/3);const s=a*a;const o=new Vector3;const c=new Vector3;const l=new Vector3;const u=new Vector3;const h=this.isLineSegments?2:1;if(e.isBufferGeometry){const d=e.index;const f=e.attributes;const p=f.position;if(d!==null){const m=d.array;for(let e=0,t=m.length-1;e<t;e+=h){const g=m[e];const _=m[e+1];o.fromBufferAttribute(p,g);c.fromBufferAttribute(p,_);const y=_ray$1.distanceSqToSegment(o,c,u,l);if(y>s)continue;u.applyMatrix4(this.matrixWorld);const v=n.ray.origin.distanceTo(u);if(v<n.near||v>n.far)continue;r.push({distance:v,point:l.clone().applyMatrix4(this.matrixWorld),index:e,face:null,faceIndex:null,object:this})}}else{for(let e=0,t=p.count-1;e<t;e+=h){o.fromBufferAttribute(p,e);c.fromBufferAttribute(p,e+1);const y=_ray$1.distanceSqToSegment(o,c,u,l);if(y>s)continue;u.applyMatrix4(this.matrixWorld);const v=n.ray.origin.distanceTo(u);if(v<n.near||v>n.far)continue;r.push({distance:v,point:l.clone().applyMatrix4(this.matrixWorld),index:e,face:null,faceIndex:null,object:this})}}}else if(e.isGeometry){console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},updateMorphTargets:function(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const r=t[n[0]];if(r!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,t=r.length;e<t;e++){const i=r[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[i]=e}}}}else{const a=e.morphTargets;if(a!==undefined&&a.length>0){console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}});const _start$1=new Vector3;const _end$1=new Vector3;function LineSegments(e,t){Line.call(this,e,t);this.type="LineSegments"}LineSegments.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineSegments,isLineSegments:true,computeLineDistances:function(){const e=this.geometry;if(e.isBufferGeometry){if(e.index===null){const n=e.attributes.position;const r=[];for(let e=0,t=n.count;e<t;e+=2){_start$1.fromBufferAttribute(n,e);_end$1.fromBufferAttribute(n,e+1);r[e]=e===0?0:r[e-1];r[e+1]=r[e]+_start$1.distanceTo(_end$1)}e.setAttribute("lineDistance",new Float32BufferAttribute(r,1))}else{console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}}else if(e.isGeometry){console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}return this}});class LineLoop extends Line{constructor(e,t){super(e,t);this.type="LineLoop"}}LineLoop.prototype.isLineLoop=true;class PointsMaterial extends Material{constructor(e){super();this.type="PointsMaterial";this.color=new Color(16777215);this.map=null;this.alphaMap=null;this.size=1;this.sizeAttenuation=true;this.morphTargets=false;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.alphaMap=e.alphaMap;this.size=e.size;this.sizeAttenuation=e.sizeAttenuation;this.morphTargets=e.morphTargets;return this}}PointsMaterial.prototype.isPointsMaterial=true;const _inverseMatrix$2=new Matrix4;const _ray$2=new Ray;const _sphere$3=new Sphere;const _position$1=new Vector3;function Points(e=new BufferGeometry,t=new PointsMaterial){Object3D.call(this);this.type="Points";this.geometry=e;this.material=t;this.updateMorphTargets()}Points.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Points,isPoints:true,copy:function(e){Object3D.prototype.copy.call(this,e);this.material=e.material;this.geometry=e.geometry;return this},raycast:function(n,r){const e=this.geometry;const i=this.matrixWorld;const t=n.params.Points.threshold;if(e.boundingSphere===null)e.computeBoundingSphere();_sphere$3.copy(e.boundingSphere);_sphere$3.applyMatrix4(i);_sphere$3.radius+=t;if(n.ray.intersectsSphere(_sphere$3)===false)return;_inverseMatrix$2.copy(i).invert();_ray$2.copy(n.ray).applyMatrix4(_inverseMatrix$2);const a=t/((this.scale.x+this.scale.y+this.scale.z)/3);const s=a*a;if(e.isBufferGeometry){const o=e.index;const c=e.attributes;const l=c.position;if(o!==null){const u=o.array;for(let e=0,t=u.length;e<t;e++){const h=u[e];_position$1.fromBufferAttribute(l,h);testPoint(_position$1,h,s,i,n,r,this)}}else{for(let e=0,t=l.count;e<t;e++){_position$1.fromBufferAttribute(l,e);testPoint(_position$1,e,s,i,n,r,this)}}}else{console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},updateMorphTargets:function(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const r=t[n[0]];if(r!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,t=r.length;e<t;e++){const i=r[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[i]=e}}}}else{const a=e.morphTargets;if(a!==undefined&&a.length>0){console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}});function testPoint(e,t,n,r,i,a,s){const o=_ray$2.distanceSqToPoint(e);if(o<n){const c=new Vector3;_ray$2.closestPointToPoint(e,c);c.applyMatrix4(r);const l=i.ray.origin.distanceTo(c);if(l<i.near||l>i.far)return;a.push({distance:l,distanceToRay:Math.sqrt(o),point:c,index:t,face:null,object:s})}}class VideoTexture extends Texture{constructor(e,t,n,r,i,a,s,o,c){super(e,t,n,r,i,a,s,o,c);this.format=s!==undefined?s:RGBFormat;this.minFilter=a!==undefined?a:LinearFilter;this.magFilter=i!==undefined?i:LinearFilter;this.generateMipmaps=false;const l=this;function u(){l.needsUpdate=true;e.requestVideoFrameCallback(u)}if("requestVideoFrameCallback"in e){e.requestVideoFrameCallback(u)}}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;const t="requestVideoFrameCallback"in e;if(t===false&&e.readyState>=e.HAVE_CURRENT_DATA){this.needsUpdate=true}}}VideoTexture.prototype.isVideoTexture=true;class CompressedTexture extends Texture{constructor(e,t,n,r,i,a,s,o,c,l,u,h){super(null,a,s,o,c,l,r,i,u,h);this.image={width:t,height:n};this.mipmaps=e;this.flipY=false;this.generateMipmaps=false}}CompressedTexture.prototype.isCompressedTexture=true;class CanvasTexture extends Texture{constructor(e,t,n,r,i,a,s,o,c){super(e,t,n,r,i,a,s,o,c);this.needsUpdate=true}}CanvasTexture.prototype.isCanvasTexture=true;class DepthTexture extends Texture{constructor(e,t,n,r,i,a,s,o,c,l){l=l!==undefined?l:DepthFormat;if(l!==DepthFormat&&l!==DepthStencilFormat){throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat")}if(n===undefined&&l===DepthFormat)n=UnsignedShortType;if(n===undefined&&l===DepthStencilFormat)n=UnsignedInt248Type;super(null,r,i,a,s,o,l,n,c);this.image={width:e,height:t};this.magFilter=s!==undefined?s:NearestFilter;this.minFilter=o!==undefined?o:NearestFilter;this.flipY=false;this.generateMipmaps=false}}DepthTexture.prototype.isDepthTexture=true;class CircleGeometry extends BufferGeometry{constructor(n=1,r=8,i=0,a=Math.PI*2){super();this.type="CircleGeometry";this.parameters={radius:n,segments:r,thetaStart:i,thetaLength:a};r=Math.max(3,r);const t=[];const s=[];const o=[];const c=[];const l=new Vector3;const u=new Vector2;s.push(0,0,0);o.push(0,0,1);c.push(.5,.5);for(let e=0,t=3;e<=r;e++,t+=3){const h=i+e/r*a;l.x=n*Math.cos(h);l.y=n*Math.sin(h);s.push(l.x,l.y,l.z);o.push(0,0,1);u.x=(s[t]/n+1)/2;u.y=(s[t+1]/n+1)/2;c.push(u.x,u.y)}for(let e=1;e<=r;e++){t.push(e,e+1,0)}this.setIndex(t);this.setAttribute("position",new Float32BufferAttribute(s,3));this.setAttribute("normal",new Float32BufferAttribute(o,3));this.setAttribute("uv",new Float32BufferAttribute(c,2))}}class CylinderGeometry extends BufferGeometry{constructor(g=1,_=1,y=1,v=8,x=1,e=false,b=0,M=Math.PI*2){super();this.type="CylinderGeometry";this.parameters={radiusTop:g,radiusBottom:_,height:y,radialSegments:v,heightSegments:x,openEnded:e,thetaStart:b,thetaLength:M};const w=this;v=Math.floor(v);x=Math.floor(x);const S=[];const T=[];const E=[];const A=[];let L=0;const C=[];const R=y/2;let P=0;t();if(e===false){if(g>0)n(true);if(_>0)n(false)}this.setIndex(S);this.setAttribute("position",new Float32BufferAttribute(T,3));this.setAttribute("normal",new Float32BufferAttribute(E,3));this.setAttribute("uv",new Float32BufferAttribute(A,2));function t(){const t=new Vector3;const n=new Vector3;let r=0;const i=(_-g)/y;for(let e=0;e<=x;e++){const a=[];const s=e/x;const o=s*(_-g)+g;for(let e=0;e<=v;e++){const c=e/v;const l=c*M+b;const u=Math.sin(l);const h=Math.cos(l);n.x=o*u;n.y=-s*y+R;n.z=o*h;T.push(n.x,n.y,n.z);t.set(u,i,h).normalize();E.push(t.x,t.y,t.z);A.push(c,1-s);a.push(L++)}C.push(a)}for(let t=0;t<v;t++){for(let e=0;e<x;e++){const d=C[e][t];const f=C[e+1][t];const p=C[e+1][t+1];const m=C[e][t+1];S.push(d,f,m);S.push(f,p,m);r+=6}}w.addGroup(P,r,0);P+=r}function n(t){const n=L;const r=new Vector2;const i=new Vector3;let a=0;const s=t===true?g:_;const o=t===true?1:-1;for(let e=1;e<=v;e++){T.push(0,R*o,0);E.push(0,o,0);A.push(.5,.5);L++}const c=L;for(let e=0;e<=v;e++){const l=e/v;const u=l*M+b;const h=Math.cos(u);const d=Math.sin(u);i.x=s*d;i.y=R*o;i.z=s*h;T.push(i.x,i.y,i.z);E.push(0,o,0);r.x=h*.5+.5;r.y=d*.5*o+.5;A.push(r.x,r.y);L++}for(let e=0;e<v;e++){const f=n+e;const p=c+e;if(t===true){S.push(p,p+1,f)}else{S.push(p+1,p,f)}a+=3}w.addGroup(P,a,t===true?1:2);P+=a}}}class ConeGeometry extends CylinderGeometry{constructor(e=1,t=1,n=8,r=1,i=false,a=0,s=Math.PI*2){super(0,e,t,n,r,i,a,s);this.type="ConeGeometry";this.parameters={radius:e,height:t,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:a,thetaLength:s}}}class PolyhedronGeometry extends BufferGeometry{constructor(r,a,e=1,t=0){super();this.type="PolyhedronGeometry";this.parameters={vertices:r,indices:a,radius:e,detail:t};const u=[];const h=[];n(t);i(e);o();this.setAttribute("position",new Float32BufferAttribute(u,3));this.setAttribute("normal",new Float32BufferAttribute(u.slice(),3));this.setAttribute("uv",new Float32BufferAttribute(h,2));if(t===0){this.computeVertexNormals()}else{this.normalizeNormals()}function n(t){const n=new Vector3;const r=new Vector3;const i=new Vector3;for(let e=0;e<a.length;e+=3){l(a[e+0],n);l(a[e+1],r);l(a[e+2],i);s(n,r,i,t)}}function s(e,n,r,t){const i=t+1;const a=[];for(let t=0;t<=i;t++){a[t]=[];const s=e.clone().lerp(r,t/i);const o=n.clone().lerp(r,t/i);const c=i-t;for(let e=0;e<=c;e++){if(e===0&&t===i){a[t][e]=s}else{a[t][e]=s.clone().lerp(o,e/c)}}}for(let t=0;t<i;t++){for(let e=0;e<2*(i-t)-1;e++){const l=Math.floor(e/2);if(e%2===0){d(a[t][l+1]);d(a[t+1][l]);d(a[t][l])}else{d(a[t][l+1]);d(a[t+1][l+1]);d(a[t+1][l])}}}}function i(t){const n=new Vector3;for(let e=0;e<u.length;e+=3){n.x=u[e+0];n.y=u[e+1];n.z=u[e+2];n.normalize().multiplyScalar(t);u[e+0]=n.x;u[e+1]=n.y;u[e+2]=n.z}}function o(){const t=new Vector3;for(let e=0;e<u.length;e+=3){t.x=u[e+0];t.y=u[e+1];t.z=u[e+2];const n=m(t)/2/Math.PI+.5;const r=g(t)/Math.PI+.5;h.push(n,1-r)}f();c()}function c(){for(let e=0;e<h.length;e+=6){const t=h[e+0];const n=h[e+2];const r=h[e+4];const i=Math.max(t,n,r);const a=Math.min(t,n,r);if(i>.9&&a<.1){if(t<.2)h[e+0]+=1;if(n<.2)h[e+2]+=1;if(r<.2)h[e+4]+=1}}}function d(e){u.push(e.x,e.y,e.z)}function l(e,t){const n=e*3;t.x=r[n+0];t.y=r[n+1];t.z=r[n+2]}function f(){const n=new Vector3;const r=new Vector3;const i=new Vector3;const a=new Vector3;const s=new Vector2;const o=new Vector2;const c=new Vector2;for(let e=0,t=0;e<u.length;e+=9,t+=6){n.set(u[e+0],u[e+1],u[e+2]);r.set(u[e+3],u[e+4],u[e+5]);i.set(u[e+6],u[e+7],u[e+8]);s.set(h[t+0],h[t+1]);o.set(h[t+2],h[t+3]);c.set(h[t+4],h[t+5]);a.copy(n).add(r).add(i).divideScalar(3);const l=m(a);p(s,t+0,n,l);p(o,t+2,r,l);p(c,t+4,i,l)}}function p(e,t,n,r){if(r<0&&e.x===1){h[t]=e.x-1}if(n.x===0&&n.z===0){h[t]=r/2/Math.PI+.5}}function m(e){return Math.atan2(e.z,-e.x)}function g(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}}}class DodecahedronGeometry extends PolyhedronGeometry{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2;const r=1/n;const i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-n,0,-r,n,0,r,-n,0,r,n,-r,-n,0,-r,n,0,r,-n,0,r,n,0,-n,0,-r,n,0,-r,-n,0,r,n,0,r];const a=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(i,a,e,t);this.type="DodecahedronGeometry";this.parameters={radius:e,detail:t}}}const _v0$2=new Vector3;const _v1$5=new Vector3;const _normal$1=new Vector3;const _triangle=new Triangle;class EdgesGeometry extends BufferGeometry{constructor(e,t){super();this.type="EdgesGeometry";this.parameters={thresholdAngle:t};t=t!==undefined?t:1;if(e.isGeometry===true){console.error("THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return}const n=4;const r=Math.pow(10,n);const i=Math.cos(MathUtils.DEG2RAD*t);const a=e.getIndex();const s=e.getAttribute("position");const o=a?a.count:s.count;const c=[0,0,0];const l=["a","b","c"];const u=new Array(3);const h={};const d=[];for(let e=0;e<o;e+=3){if(a){c[0]=a.getX(e);c[1]=a.getX(e+1);c[2]=a.getX(e+2)}else{c[0]=e;c[1]=e+1;c[2]=e+2}const{a:f,b:p,c:m}=_triangle;f.fromBufferAttribute(s,c[0]);p.fromBufferAttribute(s,c[1]);m.fromBufferAttribute(s,c[2]);_triangle.getNormal(_normal$1);u[0]=`${Math.round(f.x*r)},${Math.round(f.y*r)},${Math.round(f.z*r)}`;u[1]=`${Math.round(p.x*r)},${Math.round(p.y*r)},${Math.round(p.z*r)}`;u[2]=`${Math.round(m.x*r)},${Math.round(m.y*r)},${Math.round(m.z*r)}`;if(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]){continue}for(let e=0;e<3;e++){const g=(e+1)%3;const _=u[e];const y=u[g];const v=_triangle[l[e]];const x=_triangle[l[g]];const b=`${_}_${y}`;const M=`${y}_${_}`;if(M in h&&h[M]){if(_normal$1.dot(h[M].normal)<=i){d.push(v.x,v.y,v.z);d.push(x.x,x.y,x.z)}h[M]=null}else if(!(b in h)){h[b]={index0:c[e],index1:c[g],normal:_normal$1.clone()}}}}for(const w in h){if(h[w]){const{index0:S,index1:T}=h[w];_v0$2.fromBufferAttribute(s,S);_v1$5.fromBufferAttribute(s,T);d.push(_v0$2.x,_v0$2.y,_v0$2.z);d.push(_v1$5.x,_v1$5.y,_v1$5.z)}}this.setAttribute("position",new Float32BufferAttribute(d,3))}}const Earcut={triangulate:function(t,e,n){n=n||2;const r=e&&e.length;const i=r?e[0]*n:t.length;let a=linkedList(t,0,i,n,true);const s=[];if(!a||a.next===a.prev)return s;let o,c,l,u,h,d,f;if(r)a=eliminateHoles(t,e,a,n);if(t.length>80*n){o=l=t[0];c=u=t[1];for(let e=n;e<i;e+=n){h=t[e];d=t[e+1];if(h<o)o=h;if(d<c)c=d;if(h>l)l=h;if(d>u)u=d}f=Math.max(l-o,u-c);f=f!==0?1/f:0}earcutLinked(a,s,n,o,c,f);return s}};function linkedList(e,t,n,r,i){let a,s;if(i===signedArea(e,t,n,r)>0){for(a=t;a<n;a+=r)s=insertNode(a,e[a],e[a+1],s)}else{for(a=n-r;a>=t;a-=r)s=insertNode(a,e[a],e[a+1],s)}if(s&&equals(s,s.next)){removeNode(s);s=s.next}return s}function filterPoints(e,t){if(!e)return e;if(!t)t=e;let n=e,r;do{r=false;if(!n.steiner&&(equals(n,n.next)||area(n.prev,n,n.next)===0)){removeNode(n);n=t=n.prev;if(n===n.next)break;r=true}else{n=n.next}}while(r||n!==t);return t}function earcutLinked(e,t,n,r,i,a,s){if(!e)return;if(!s&&a)indexCurve(e,r,i,a);let o=e,c,l;while(e.prev!==e.next){c=e.prev;l=e.next;if(a?isEarHashed(e,r,i,a):isEar(e)){t.push(c.i/n);t.push(e.i/n);t.push(l.i/n);removeNode(e);e=l.next;o=l.next;continue}e=l;if(e===o){if(!s){earcutLinked(filterPoints(e),t,n,r,i,a,1)}else if(s===1){e=cureLocalIntersections(filterPoints(e),t,n);earcutLinked(e,t,n,r,i,a,2)}else if(s===2){splitEarcut(e,t,n,r,i,a)}break}}}function isEar(e){const t=e.prev,n=e,r=e.next;if(area(t,n,r)>=0)return false;let i=e.next.next;while(i!==e.prev){if(pointInTriangle(t.x,t.y,n.x,n.y,r.x,r.y,i.x,i.y)&&area(i.prev,i,i.next)>=0)return false;i=i.next}return true}function isEarHashed(e,t,n,r){const i=e.prev,a=e,s=e.next;if(area(i,a,s)>=0)return false;const o=i.x<a.x?i.x<s.x?i.x:s.x:a.x<s.x?a.x:s.x,c=i.y<a.y?i.y<s.y?i.y:s.y:a.y<s.y?a.y:s.y,l=i.x>a.x?i.x>s.x?i.x:s.x:a.x>s.x?a.x:s.x,u=i.y>a.y?i.y>s.y?i.y:s.y:a.y>s.y?a.y:s.y;const h=zOrder(o,c,t,n,r),d=zOrder(l,u,t,n,r);let f=e.prevZ,p=e.nextZ;while(f&&f.z>=h&&p&&p.z<=d){if(f!==e.prev&&f!==e.next&&pointInTriangle(i.x,i.y,a.x,a.y,s.x,s.y,f.x,f.y)&&area(f.prev,f,f.next)>=0)return false;f=f.prevZ;if(p!==e.prev&&p!==e.next&&pointInTriangle(i.x,i.y,a.x,a.y,s.x,s.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.nextZ}while(f&&f.z>=h){if(f!==e.prev&&f!==e.next&&pointInTriangle(i.x,i.y,a.x,a.y,s.x,s.y,f.x,f.y)&&area(f.prev,f,f.next)>=0)return false;f=f.prevZ}while(p&&p.z<=d){if(p!==e.prev&&p!==e.next&&pointInTriangle(i.x,i.y,a.x,a.y,s.x,s.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.nextZ}return true}function cureLocalIntersections(e,t,n){let r=e;do{const i=r.prev,a=r.next.next;if(!equals(i,a)&&intersects(i,r,r.next,a)&&locallyInside(i,a)&&locallyInside(a,i)){t.push(i.i/n);t.push(r.i/n);t.push(a.i/n);removeNode(r);removeNode(r.next);r=e=a}r=r.next}while(r!==e);return filterPoints(r)}function splitEarcut(e,n,r,i,a,s){let o=e;do{let t=o.next.next;while(t!==o.prev){if(o.i!==t.i&&isValidDiagonal(o,t)){let e=splitPolygon(o,t);o=filterPoints(o,o.next);e=filterPoints(e,e.next);earcutLinked(o,n,r,i,a,s);earcutLinked(e,n,r,i,a,s);return}t=t.next}o=o.next}while(o!==e)}function eliminateHoles(e,t,n,r){const i=[];let a,s,o,c,l;for(a=0,s=t.length;a<s;a++){o=t[a]*r;c=a<s-1?t[a+1]*r:e.length;l=linkedList(e,o,c,r,false);if(l===l.next)l.steiner=true;i.push(getLeftmost(l))}i.sort(compareX);for(a=0;a<i.length;a++){eliminateHole(i[a],n);n=filterPoints(n,n.next)}return n}function compareX(e,t){return e.x-t.x}function eliminateHole(e,t){t=findHoleBridge(e,t);if(t){const n=splitPolygon(t,e);filterPoints(t,t.next);filterPoints(n,n.next)}}function findHoleBridge(e,t){let n=t;const r=e.x;const i=e.y;let a=-Infinity,s;do{if(i<=n.y&&i>=n.next.y&&n.next.y!==n.y){const d=n.x+(i-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(d<=r&&d>a){a=d;if(d===r){if(i===n.y)return n;if(i===n.next.y)return n.next}s=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t);if(!s)return null;if(r===a)return s;const o=s,c=s.x,l=s.y;let u=Infinity,h;n=s;do{if(r>=n.x&&n.x>=c&&r!==n.x&&pointInTriangle(i<l?r:a,i,c,l,i<l?a:r,i,n.x,n.y)){h=Math.abs(i-n.y)/(r-n.x);if(locallyInside(n,e)&&(h<u||h===u&&(n.x>s.x||n.x===s.x&&sectorContainsSector(s,n)))){s=n;u=h}}n=n.next}while(n!==o);return s}function sectorContainsSector(e,t){return area(e.prev,e,t.prev)<0&&area(t.next,e,e.next)<0}function indexCurve(e,t,n,r){let i=e;do{if(i.z===null)i.z=zOrder(i.x,i.y,t,n,r);i.prevZ=i.prev;i.nextZ=i.next;i=i.next}while(i!==e);i.prevZ.nextZ=null;i.prevZ=null;sortLinked(i)}function sortLinked(e){let t,n,r,i,a,s,o,c,l=1;do{n=e;e=null;a=null;s=0;while(n){s++;r=n;o=0;for(t=0;t<l;t++){o++;r=r.nextZ;if(!r)break}c=l;while(o>0||c>0&&r){if(o!==0&&(c===0||!r||n.z<=r.z)){i=n;n=n.nextZ;o--}else{i=r;r=r.nextZ;c--}if(a)a.nextZ=i;else e=i;i.prevZ=a;a=i}n=r}a.nextZ=null;l*=2}while(s>1);return e}function zOrder(e,t,n,r,i){e=32767*(e-n)*i;t=32767*(t-r)*i;e=(e|e<<8)&16711935;e=(e|e<<4)&252645135;e=(e|e<<2)&858993459;e=(e|e<<1)&1431655765;t=(t|t<<8)&16711935;t=(t|t<<4)&252645135;t=(t|t<<2)&858993459;t=(t|t<<1)&1431655765;return e|t<<1}function getLeftmost(e){let t=e,n=e;do{if(t.x<n.x||t.x===n.x&&t.y<n.y)n=t;t=t.next}while(t!==e);return n}function pointInTriangle(e,t,n,r,i,a,s,o){return(i-s)*(t-o)-(e-s)*(a-o)>=0&&(e-s)*(r-o)-(n-s)*(t-o)>=0&&(n-s)*(a-o)-(i-s)*(r-o)>=0}function isValidDiagonal(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!intersectsPolygon(e,t)&&(locallyInside(e,t)&&locallyInside(t,e)&&middleInside(e,t)&&(area(e.prev,e,t.prev)||area(e,t.prev,t))||equals(e,t)&&area(e.prev,e,e.next)>0&&area(t.prev,t,t.next)>0)}function area(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function equals(e,t){return e.x===t.x&&e.y===t.y}function intersects(e,t,n,r){const i=sign(area(e,t,n));const a=sign(area(e,t,r));const s=sign(area(n,r,e));const o=sign(area(n,r,t));if(i!==a&&s!==o)return true;if(i===0&&onSegment(e,n,t))return true;if(a===0&&onSegment(e,r,t))return true;if(s===0&&onSegment(n,e,r))return true;if(o===0&&onSegment(n,t,r))return true;return false}function onSegment(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function sign(e){return e>0?1:e<0?-1:0}function intersectsPolygon(e,t){let n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&intersects(n,n.next,e,t))return true;n=n.next}while(n!==e);return false}function locallyInside(e,t){return area(e.prev,e,e.next)<0?area(e,t,e.next)>=0&&area(e,e.prev,t)>=0:area(e,t,e.prev)<0||area(e,e.next,t)<0}function middleInside(e,t){let n=e,r=false;const i=(e.x+t.x)/2,a=(e.y+t.y)/2;do{if(n.y>a!==n.next.y>a&&n.next.y!==n.y&&i<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x)r=!r;n=n.next}while(n!==e);return r}function splitPolygon(e,t){const n=new Node(e.i,e.x,e.y),r=new Node(t.i,t.x,t.y),i=e.next,a=t.prev;e.next=t;t.prev=e;n.next=i;i.prev=n;r.next=n;n.prev=r;a.next=r;r.prev=a;return r}function insertNode(e,t,n,r){const i=new Node(e,t,n);if(!r){i.prev=i;i.next=i}else{i.next=r.next;i.prev=r;r.next.prev=i;r.next=i}return i}function removeNode(e){e.next.prev=e.prev;e.prev.next=e.next;if(e.prevZ)e.prevZ.nextZ=e.nextZ;if(e.nextZ)e.nextZ.prevZ=e.prevZ}function Node(e,t,n){this.i=e;this.x=t;this.y=n;this.prev=null;this.next=null;this.z=null;this.prevZ=null;this.nextZ=null;this.steiner=false}function signedArea(n,r,i,a){let s=0;for(let e=r,t=i-a;e<i;e+=a){s+=(n[t]-n[e])*(n[e+1]+n[t+1]);t=e}return s}const ShapeUtils={area:function(n){const r=n.length;let i=0;for(let e=r-1,t=0;t<r;e=t++){i+=n[e].x*n[t].y-n[t].x*n[e].y}return i*.5},isClockWise:function(e){return ShapeUtils.area(e)<0},triangulateShape:function(e,t){const n=[];const r=[];const i=[];removeDupEndPts(e);addContour(n,e);let a=e.length;t.forEach(removeDupEndPts);for(let e=0;e<t.length;e++){r.push(a);a+=t[e].length;addContour(n,t[e])}const s=Earcut.triangulate(n,r);for(let e=0;e<s.length;e+=3){i.push(s.slice(e,e+3))}return i}};function removeDupEndPts(e){const t=e.length;if(t>2&&e[t-1].equals(e[0])){e.pop()}}function addContour(t,n){for(let e=0;e<n.length;e++){t.push(n[e].x);t.push(n[e].y)}}class ExtrudeGeometry extends BufferGeometry{constructor(n,j){super();this.type="ExtrudeGeometry";this.parameters={shapes:n,options:j};n=Array.isArray(n)?n:[n];const q=this;const $=[];const X=[];for(let e=0,t=n.length;e<t;e++){const i=n[e];r(i)}this.setAttribute("position",new Float32BufferAttribute($,3));this.setAttribute("uv",new Float32BufferAttribute(X,2));this.computeVertexNormals();function r(F){const r=[];const N=j.curveSegments!==undefined?j.curveSegments:12;const h=j.steps!==undefined?j.steps:1;let n=j.depth!==undefined?j.depth:100;let i=j.bevelEnabled!==undefined?j.bevelEnabled:true;let t=j.bevelThickness!==undefined?j.bevelThickness:6;let a=j.bevelSize!==undefined?j.bevelSize:t-2;let s=j.bevelOffset!==undefined?j.bevelOffset:0;let d=j.bevelSegments!==undefined?j.bevelSegments:3;const e=j.extrudePath;const o=j.UVGenerator!==undefined?j.UVGenerator:WorldUVGenerator;if(j.amount!==undefined){console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");n=j.amount}let c,l=false;let u,f,p,m;if(e){c=e.getSpacedPoints(h);l=true;i=false;u=e.computeFrenetFrames(h,false);f=new Vector3;p=new Vector3;m=new Vector3}if(!i){d=0;t=0;a=0;s=0}const V=F.extractPoints(N);let g=V.shape;const _=V.holes;const U=!ShapeUtils.isClockWise(g);if(U){g=g.reverse();for(let e=0,t=_.length;e<t;e++){const B=_[e];if(ShapeUtils.isClockWise(B)){_[e]=B.reverse()}}}const y=ShapeUtils.triangulateShape(g,_);const v=g;for(let e=0,t=_.length;e<t;e++){const B=_[e];g=g.concat(B)}function x(e,t,n){if(!t)console.error("THREE.ExtrudeGeometry: vec does not exist");return t.clone().multiplyScalar(n).add(e)}const b=g.length,M=y.length;function O(e,t,n){let r,i,a;const s=e.x-t.x,o=e.y-t.y;const c=n.x-e.x,l=n.y-e.y;const u=s*s+o*o;const h=s*l-o*c;if(Math.abs(h)>Number.EPSILON){const d=Math.sqrt(u);const f=Math.sqrt(c*c+l*l);const p=t.x-o/d;const m=t.y+s/d;const g=n.x-l/f;const _=n.y+c/f;const y=((g-p)*l-(_-m)*c)/(s*l-o*c);r=p+s*y-e.x;i=m+o*y-e.y;const v=r*r+i*i;if(v<=2){return new Vector2(r,i)}else{a=Math.sqrt(v/2)}}else{let e=false;if(s>Number.EPSILON){if(c>Number.EPSILON){e=true}}else{if(s<-Number.EPSILON){if(c<-Number.EPSILON){e=true}}else{if(Math.sign(o)===Math.sign(l)){e=true}}}if(e){r=-o;i=s;a=Math.sqrt(u)}else{r=s;i=o;a=Math.sqrt(u/2)}}return new Vector2(r/a,i/a)}const w=[];for(let e=0,t=v.length,n=t-1,r=e+1;e<t;e++,n++,r++){if(n===t)n=0;if(r===t)r=0;w[e]=O(v[e],v[n],v[r])}const S=[];let T,E=w.concat();for(let e=0,t=_.length;e<t;e++){const B=_[e];T=[];for(let e=0,t=B.length,n=t-1,r=e+1;e<t;e++,n++,r++){if(n===t)n=0;if(r===t)r=0;T[e]=O(B[e],B[n],B[r])}S.push(T);E=E.concat(T)}for(let e=0;e<d;e++){const D=e/d;const I=t*Math.cos(D*Math.PI/2);const A=a*Math.sin(D*Math.PI/2)+s;for(let e=0,t=v.length;e<t;e++){const G=x(v[e],w[e],A);L(G.x,G.y,-I)}for(let e=0,t=_.length;e<t;e++){const B=_[e];T=S[e];for(let e=0,t=B.length;e<t;e++){const G=x(B[e],T[e],A);L(G.x,G.y,-I)}}}const A=a+s;for(let e=0;e<b;e++){const G=i?x(g[e],E[e],A):g[e];if(!l){L(G.x,G.y,0)}else{p.copy(u.normals[0]).multiplyScalar(G.x);f.copy(u.binormals[0]).multiplyScalar(G.y);m.copy(c[0]).add(p).add(f);L(m.x,m.y,m.z)}}for(let t=1;t<=h;t++){for(let e=0;e<b;e++){const G=i?x(g[e],E[e],A):g[e];if(!l){L(G.x,G.y,n/h*t)}else{p.copy(u.normals[t]).multiplyScalar(G.x);f.copy(u.binormals[t]).multiplyScalar(G.y);m.copy(c[t]).add(p).add(f);L(m.x,m.y,m.z)}}}for(let e=d-1;e>=0;e--){const D=e/d;const I=t*Math.cos(D*Math.PI/2);const A=a*Math.sin(D*Math.PI/2)+s;for(let e=0,t=v.length;e<t;e++){const G=x(v[e],w[e],A);L(G.x,G.y,n+I)}for(let e=0,t=_.length;e<t;e++){const B=_[e];T=S[e];for(let e=0,t=B.length;e<t;e++){const G=x(B[e],T[e],A);if(!l){L(G.x,G.y,n+I)}else{L(G.x,G.y+c[h-1].y,c[h-1].x+I)}}}}z();H();function z(){const e=$.length/3;if(i){let e=0;let t=b*e;for(let e=0;e<M;e++){const n=y[e];C(n[2]+t,n[1]+t,n[0]+t)}e=h+d*2;t=b*e;for(let e=0;e<M;e++){const n=y[e];C(n[0]+t,n[1]+t,n[2]+t)}}else{for(let e=0;e<M;e++){const n=y[e];C(n[2],n[1],n[0])}for(let e=0;e<M;e++){const n=y[e];C(n[0]+b*h,n[1]+b*h,n[2]+b*h)}}q.addGroup(e,$.length/3-e,0)}function H(){const e=$.length/3;let n=0;k(v,n);n+=v.length;for(let t=0,e=_.length;t<e;t++){const e=_[t];k(e,n);n+=e.length}q.addGroup(e,$.length/3-e,1)}function k(e,r){let t=e.length;while(--t>=0){const i=t;let n=t-1;if(n<0)n=e.length-1;for(let e=0,t=h+d*2;e<t;e++){const a=b*e;const s=b*(e+1);const o=r+i+a,c=r+n+a,l=r+n+s,u=r+i+s;W(o,c,l,u)}}}function L(e,t,n){r.push(e);r.push(t);r.push(n)}function C(e,t,n){R(e);R(t);R(n);const r=$.length/3;const i=o.generateTopUV(q,$,r-3,r-2,r-1);P(i[0]);P(i[1]);P(i[2])}function W(e,t,n,r){R(e);R(t);R(r);R(t);R(n);R(r);const i=$.length/3;const a=o.generateSideWallUV(q,$,i-6,i-3,i-2,i-1);P(a[0]);P(a[1]);P(a[3]);P(a[1]);P(a[2]);P(a[3])}function R(e){$.push(r[e*3+0]);$.push(r[e*3+1]);$.push(r[e*3+2])}function P(e){X.push(e.x);X.push(e.y)}}}toJSON(){const e=BufferGeometry.prototype.toJSON.call(this);const t=this.parameters.shapes;const n=this.parameters.options;return toJSON(t,n,e)}}const WorldUVGenerator={generateTopUV:function(e,t,n,r,i){const a=t[n*3];const s=t[n*3+1];const o=t[r*3];const c=t[r*3+1];const l=t[i*3];const u=t[i*3+1];return[new Vector2(a,s),new Vector2(o,c),new Vector2(l,u)]},generateSideWallUV:function(e,t,n,r,i,a){const s=t[n*3];const o=t[n*3+1];const c=t[n*3+2];const l=t[r*3];const u=t[r*3+1];const h=t[r*3+2];const d=t[i*3];const f=t[i*3+1];const p=t[i*3+2];const m=t[a*3];const g=t[a*3+1];const _=t[a*3+2];if(Math.abs(o-u)<.01){return[new Vector2(s,1-c),new Vector2(l,1-h),new Vector2(d,1-p),new Vector2(m,1-_)]}else{return[new Vector2(o,1-c),new Vector2(u,1-h),new Vector2(f,1-p),new Vector2(g,1-_)]}}};function toJSON(n,e,r){r.shapes=[];if(Array.isArray(n)){for(let e=0,t=n.length;e<t;e++){const i=n[e];r.shapes.push(i.uuid)}}else{r.shapes.push(n.uuid)}if(e.extrudePath!==undefined)r.options.extrudePath=e.extrudePath.toJSON();return r}class IcosahedronGeometry extends PolyhedronGeometry{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2;const r=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];const i=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(r,i,e,t);this.type="IcosahedronGeometry";this.parameters={radius:e,detail:t}}}class LatheGeometry extends BufferGeometry{constructor(n,r=12,e=0,i=Math.PI*2){super();this.type="LatheGeometry";this.parameters={points:n,segments:r,phiStart:e,phiLength:i};r=Math.floor(r);i=MathUtils.clamp(i,0,Math.PI*2);const a=[];const s=[];const o=[];const c=1/r;const l=new Vector3;const u=new Vector2;for(let t=0;t<=r;t++){const h=e+t*c*i;const d=Math.sin(h);const f=Math.cos(h);for(let e=0;e<=n.length-1;e++){l.x=n[e].x*d;l.y=n[e].y;l.z=n[e].x*f;s.push(l.x,l.y,l.z);u.x=t/r;u.y=e/(n.length-1);o.push(u.x,u.y)}}for(let t=0;t<r;t++){for(let e=0;e<n.length-1;e++){const p=e+t*n.length;const m=p;const g=p+n.length;const _=p+n.length+1;const y=p+1;a.push(m,g,y);a.push(g,_,y)}}this.setIndex(a);this.setAttribute("position",new Float32BufferAttribute(s,3));this.setAttribute("uv",new Float32BufferAttribute(o,2));this.computeVertexNormals();if(i===Math.PI*2){const v=this.attributes.normal.array;const x=new Vector3;const b=new Vector3;const M=new Vector3;const p=r*n.length*3;for(let e=0,t=0;e<n.length;e++,t+=3){x.x=v[t+0];x.y=v[t+1];x.z=v[t+2];b.x=v[p+t+0];b.y=v[p+t+1];b.z=v[p+t+2];M.addVectors(x,b).normalize();v[t+0]=v[p+t+0]=M.x;v[t+1]=v[p+t+1]=M.y;v[t+2]=v[p+t+2]=M.z}}}}class OctahedronGeometry extends PolyhedronGeometry{constructor(e=1,t=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1];const r=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,r,e,t);this.type="OctahedronGeometry";this.parameters={radius:e,detail:t}}}function ParametricGeometry(t,n,r){BufferGeometry.call(this);this.type="ParametricGeometry";this.parameters={func:t,slices:n,stacks:r};const i=[];const a=[];const s=[];const o=[];const c=1e-5;const l=new Vector3;const u=new Vector3,h=new Vector3;const d=new Vector3,f=new Vector3;if(t.length<3){console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.")}const p=n+1;for(let e=0;e<=r;e++){const m=e/r;for(let e=0;e<=n;e++){const g=e/n;t(g,m,u);a.push(u.x,u.y,u.z);if(g-c>=0){t(g-c,m,h);d.subVectors(u,h)}else{t(g+c,m,h);d.subVectors(h,u)}if(m-c>=0){t(g,m-c,h);f.subVectors(u,h)}else{t(g,m+c,h);f.subVectors(h,u)}l.crossVectors(d,f).normalize();s.push(l.x,l.y,l.z);o.push(g,m)}}for(let t=0;t<r;t++){for(let e=0;e<n;e++){const _=t*p+e;const y=t*p+e+1;const v=(t+1)*p+e+1;const x=(t+1)*p+e;i.push(_,y,x);i.push(y,v,x)}}this.setIndex(i);this.setAttribute("position",new Float32BufferAttribute(a,3));this.setAttribute("normal",new Float32BufferAttribute(s,3));this.setAttribute("uv",new Float32BufferAttribute(o,2))}ParametricGeometry.prototype=Object.create(BufferGeometry.prototype);ParametricGeometry.prototype.constructor=ParametricGeometry;class RingGeometry extends BufferGeometry{constructor(e=.5,t=1,n=8,r=1,i=0,a=Math.PI*2){super();this.type="RingGeometry";this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:a};n=Math.max(3,n);r=Math.max(1,r);const s=[];const o=[];const c=[];const l=[];let u=e;const h=(t-e)/r;const d=new Vector3;const f=new Vector2;for(let e=0;e<=r;e++){for(let e=0;e<=n;e++){const p=i+e/n*a;d.x=u*Math.cos(p);d.y=u*Math.sin(p);o.push(d.x,d.y,d.z);c.push(0,0,1);f.x=(d.x/t+1)/2;f.y=(d.y/t+1)/2;l.push(f.x,f.y)}u+=h}for(let e=0;e<r;e++){const m=e*(n+1);for(let e=0;e<n;e++){const p=e+m;const g=p;const _=p+n+1;const y=p+n+2;const v=p+1;s.push(g,_,v);s.push(_,y,v)}}this.setIndex(s);this.setAttribute("position",new Float32BufferAttribute(o,3));this.setAttribute("normal",new Float32BufferAttribute(c,3));this.setAttribute("uv",new Float32BufferAttribute(l,2))}}class ShapeGeometry extends BufferGeometry{constructor(t,d=12){super();this.type="ShapeGeometry";this.parameters={shapes:t,curveSegments:d};const f=[];const p=[];const m=[];const g=[];let n=0;let _=0;if(Array.isArray(t)===false){r(t)}else{for(let e=0;e<t.length;e++){r(t[e]);this.addGroup(n,_,e);n+=_;_=0}}this.setIndex(f);this.setAttribute("position",new Float32BufferAttribute(p,3));this.setAttribute("normal",new Float32BufferAttribute(m,3));this.setAttribute("uv",new Float32BufferAttribute(g,2));function r(e){const n=p.length/3;const t=e.extractPoints(d);let r=t.shape;const i=t.holes;if(ShapeUtils.isClockWise(r)===false){r=r.reverse()}for(let e=0,t=i.length;e<t;e++){const s=i[e];if(ShapeUtils.isClockWise(s)===true){i[e]=s.reverse()}}const a=ShapeUtils.triangulateShape(r,i);for(let e=0,t=i.length;e<t;e++){const s=i[e];r=r.concat(s)}for(let e=0,t=r.length;e<t;e++){const o=r[e];p.push(o.x,o.y,0);m.push(0,0,1);g.push(o.x,o.y)}for(let e=0,t=a.length;e<t;e++){const c=a[e];const l=c[0]+n;const u=c[1]+n;const h=c[2]+n;f.push(l,u,h);_+=3}}}toJSON(){const e=BufferGeometry.prototype.toJSON.call(this);const t=this.parameters.shapes;return toJSON$1(t,e)}}function toJSON$1(n,r){r.shapes=[];if(Array.isArray(n)){for(let e=0,t=n.length;e<t;e++){const i=n[e];r.shapes.push(i.uuid)}}else{r.shapes.push(n.uuid)}return r}class SphereGeometry extends BufferGeometry{constructor(n=1,r=8,i=6,a=0,s=Math.PI*2,o=0,c=Math.PI){super();this.type="SphereGeometry";this.parameters={radius:n,widthSegments:r,heightSegments:i,phiStart:a,phiLength:s,thetaStart:o,thetaLength:c};r=Math.max(3,Math.floor(r));i=Math.max(2,Math.floor(i));const l=Math.min(o+c,Math.PI);let u=0;const h=[];const d=new Vector3;const f=new Vector3;const p=[];const m=[];const g=[];const _=[];for(let e=0;e<=i;e++){const y=[];const v=e/i;let t=0;if(e==0&&o==0){t=.5/r}else if(e==i&&l==Math.PI){t=-.5/r}for(let e=0;e<=r;e++){const x=e/r;d.x=-n*Math.cos(a+x*s)*Math.sin(o+v*c);d.y=n*Math.cos(o+v*c);d.z=n*Math.sin(a+x*s)*Math.sin(o+v*c);m.push(d.x,d.y,d.z);f.copy(d).normalize();g.push(f.x,f.y,f.z);_.push(x+t,1-v);y.push(u++)}h.push(y)}for(let t=0;t<i;t++){for(let e=0;e<r;e++){const b=h[t][e+1];const M=h[t][e];const w=h[t+1][e];const S=h[t+1][e+1];if(t!==0||o>0)p.push(b,M,S);if(t!==i-1||l<Math.PI)p.push(M,w,S)}}this.setIndex(p);this.setAttribute("position",new Float32BufferAttribute(m,3));this.setAttribute("normal",new Float32BufferAttribute(g,3));this.setAttribute("uv",new Float32BufferAttribute(_,2))}}class TetrahedronGeometry extends PolyhedronGeometry{constructor(e=1,t=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1];const r=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,r,e,t);this.type="TetrahedronGeometry";this.parameters={radius:e,detail:t}}}class TextGeometry extends ExtrudeGeometry{constructor(e,t={}){const n=t.font;if(!(n&&n.isFont)){console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font.");return new BufferGeometry}const r=n.generateShapes(e,t.size);t.depth=t.height!==undefined?t.height:50;if(t.bevelThickness===undefined)t.bevelThickness=10;if(t.bevelSize===undefined)t.bevelSize=8;if(t.bevelEnabled===undefined)t.bevelEnabled=false;super(r,t);this.type="TextGeometry"}}class TorusGeometry extends BufferGeometry{constructor(n=1,r=.4,i=8,a=6,s=Math.PI*2){super();this.type="TorusGeometry";this.parameters={radius:n,tube:r,radialSegments:i,tubularSegments:a,arc:s};i=Math.floor(i);a=Math.floor(a);const o=[];const c=[];const l=[];const u=[];const h=new Vector3;const d=new Vector3;const f=new Vector3;for(let t=0;t<=i;t++){for(let e=0;e<=a;e++){const p=e/a*s;const m=t/i*Math.PI*2;d.x=(n+r*Math.cos(m))*Math.cos(p);d.y=(n+r*Math.cos(m))*Math.sin(p);d.z=r*Math.sin(m);c.push(d.x,d.y,d.z);h.x=n*Math.cos(p);h.y=n*Math.sin(p);f.subVectors(d,h).normalize();l.push(f.x,f.y,f.z);u.push(e/a);u.push(t/i)}}for(let t=1;t<=i;t++){for(let e=1;e<=a;e++){const g=(a+1)*t+e-1;const _=(a+1)*(t-1)+e-1;const y=(a+1)*(t-1)+e;const v=(a+1)*t+e;o.push(g,_,v);o.push(_,y,v)}}this.setIndex(o);this.setAttribute("position",new Float32BufferAttribute(c,3));this.setAttribute("normal",new Float32BufferAttribute(l,3));this.setAttribute("uv",new Float32BufferAttribute(u,2))}}class TorusKnotGeometry extends BufferGeometry{constructor(e=1,n=.4,r=64,i=8,a=2,s=3){super();this.type="TorusKnotGeometry";this.parameters={radius:e,tube:n,tubularSegments:r,radialSegments:i,p:a,q:s};r=Math.floor(r);i=Math.floor(i);const o=[];const c=[];const l=[];const u=[];const h=new Vector3;const d=new Vector3;const f=new Vector3;const p=new Vector3;const m=new Vector3;const g=new Vector3;const _=new Vector3;for(let t=0;t<=r;++t){const v=t/r*a*Math.PI*2;y(v,a,s,e,f);y(v+.01,a,s,e,p);g.subVectors(p,f);_.addVectors(p,f);m.crossVectors(g,_);_.crossVectors(m,g);m.normalize();_.normalize();for(let e=0;e<=i;++e){const x=e/i*Math.PI*2;const b=-n*Math.cos(x);const M=n*Math.sin(x);h.x=f.x+(b*_.x+M*m.x);h.y=f.y+(b*_.y+M*m.y);h.z=f.z+(b*_.z+M*m.z);c.push(h.x,h.y,h.z);d.subVectors(h,f).normalize();l.push(d.x,d.y,d.z);u.push(t/r);u.push(e/i)}}for(let t=1;t<=r;t++){for(let e=1;e<=i;e++){const w=(i+1)*(t-1)+(e-1);const S=(i+1)*t+(e-1);const T=(i+1)*t+e;const E=(i+1)*(t-1)+e;o.push(w,S,E);o.push(S,T,E)}}this.setIndex(o);this.setAttribute("position",new Float32BufferAttribute(c,3));this.setAttribute("normal",new Float32BufferAttribute(l,3));this.setAttribute("uv",new Float32BufferAttribute(u,2));function y(e,t,n,r,i){const a=Math.cos(e);const s=Math.sin(e);const o=n/t*e;const c=Math.cos(o);i.x=r*(2+c)*.5*a;i.y=r*(2+c)*s*.5;i.z=r*Math.sin(o)*.5}}}class TubeGeometry extends BufferGeometry{constructor(s,o=64,c=1,l=8,e=false){super();this.type="TubeGeometry";this.parameters={path:s,tubularSegments:o,radius:c,radialSegments:l,closed:e};const u=s.computeFrenetFrames(o,e);this.tangents=u.tangents;this.normals=u.normals;this.binormals=u.binormals;const h=new Vector3;const d=new Vector3;const n=new Vector2;let f=new Vector3;const p=[];const m=[];const r=[];const g=[];t();this.setIndex(g);this.setAttribute("position",new Float32BufferAttribute(p,3));this.setAttribute("normal",new Float32BufferAttribute(m,3));this.setAttribute("uv",new Float32BufferAttribute(r,2));function t(){for(let e=0;e<o;e++){i(e)}i(e===false?o:0);_();a()}function i(e){f=s.getPointAt(e/o,f);const t=u.normals[e];const n=u.binormals[e];for(let e=0;e<=l;e++){const r=e/l*Math.PI*2;const i=Math.sin(r);const a=-Math.cos(r);d.x=a*t.x+i*n.x;d.y=a*t.y+i*n.y;d.z=a*t.z+i*n.z;d.normalize();m.push(d.x,d.y,d.z);h.x=f.x+c*d.x;h.y=f.y+c*d.y;h.z=f.z+c*d.z;p.push(h.x,h.y,h.z)}}function a(){for(let t=1;t<=o;t++){for(let e=1;e<=l;e++){const n=(l+1)*(t-1)+(e-1);const r=(l+1)*t+(e-1);const i=(l+1)*t+e;const a=(l+1)*(t-1)+e;g.push(n,r,a);g.push(r,i,a)}}}function _(){for(let t=0;t<=o;t++){for(let e=0;e<=l;e++){n.x=t/o;n.y=e/l;r.push(n.x,n.y)}}}}toJSON(){const e=BufferGeometry.prototype.toJSON.call(this);e.path=this.parameters.path.toJSON();return e}}class WireframeGeometry extends BufferGeometry{constructor(e){super();this.type="WireframeGeometry";if(e.isGeometry===true){console.error("THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return}const r=[];const i=[0,0],a={};const s=new Vector3;if(e.index!==null){const o=e.attributes.position;const c=e.index;let n=e.groups;if(n.length===0){n=[{start:0,count:c.count,materialIndex:0}]}for(let e=0,t=n.length;e<t;++e){const l=n[e];const u=l.start;const h=l.count;for(let t=u,e=u+h;t<e;t+=3){for(let e=0;e<3;e++){const d=c.getX(t+e);const f=c.getX(t+(e+1)%3);i[0]=Math.min(d,f);i[1]=Math.max(d,f);const p=i[0]+","+i[1];if(a[p]===undefined){a[p]={index1:i[0],index2:i[1]}}}}}for(const p in a){const t=a[p];s.fromBufferAttribute(o,t.index1);r.push(s.x,s.y,s.z);s.fromBufferAttribute(o,t.index2);r.push(s.x,s.y,s.z)}}else{const o=e.attributes.position;for(let t=0,e=o.count/3;t<e;t++){for(let e=0;e<3;e++){const n=3*t+e;s.fromBufferAttribute(o,n);r.push(s.x,s.y,s.z);const m=3*t+(e+1)%3;s.fromBufferAttribute(o,m);r.push(s.x,s.y,s.z)}}}this.setAttribute("position",new Float32BufferAttribute(r,3))}}var Geometries=Object.freeze({__proto__:null,BoxGeometry:BoxGeometry,BoxBufferGeometry:BoxGeometry,CircleGeometry:CircleGeometry,CircleBufferGeometry:CircleGeometry,ConeGeometry:ConeGeometry,ConeBufferGeometry:ConeGeometry,CylinderGeometry:CylinderGeometry,CylinderBufferGeometry:CylinderGeometry,DodecahedronGeometry:DodecahedronGeometry,DodecahedronBufferGeometry:DodecahedronGeometry,EdgesGeometry:EdgesGeometry,ExtrudeGeometry:ExtrudeGeometry,ExtrudeBufferGeometry:ExtrudeGeometry,IcosahedronGeometry:IcosahedronGeometry,IcosahedronBufferGeometry:IcosahedronGeometry,LatheGeometry:LatheGeometry,LatheBufferGeometry:LatheGeometry,OctahedronGeometry:OctahedronGeometry,OctahedronBufferGeometry:OctahedronGeometry,ParametricGeometry:ParametricGeometry,ParametricBufferGeometry:ParametricGeometry,PlaneGeometry:PlaneGeometry,PlaneBufferGeometry:PlaneGeometry,PolyhedronGeometry:PolyhedronGeometry,PolyhedronBufferGeometry:PolyhedronGeometry,RingGeometry:RingGeometry,RingBufferGeometry:RingGeometry,ShapeGeometry:ShapeGeometry,ShapeBufferGeometry:ShapeGeometry,SphereGeometry:SphereGeometry,SphereBufferGeometry:SphereGeometry,TetrahedronGeometry:TetrahedronGeometry,TetrahedronBufferGeometry:TetrahedronGeometry,TextGeometry:TextGeometry,TextBufferGeometry:TextGeometry,TorusGeometry:TorusGeometry,TorusBufferGeometry:TorusGeometry,TorusKnotGeometry:TorusKnotGeometry,TorusKnotBufferGeometry:TorusKnotGeometry,TubeGeometry:TubeGeometry,TubeBufferGeometry:TubeGeometry,WireframeGeometry:WireframeGeometry});class ShadowMaterial extends Material{constructor(e){super();this.type="ShadowMaterial";this.color=new Color(0);this.transparent=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);return this}}ShadowMaterial.prototype.isShadowMaterial=true;class RawShaderMaterial extends ShaderMaterial{constructor(e){super(e);this.type="RawShaderMaterial"}}RawShaderMaterial.prototype.isRawShaderMaterial=true;function MeshStandardMaterial(e){Material.call(this);this.defines={STANDARD:""};this.type="MeshStandardMaterial";this.color=new Color(16777215);this.roughness=1;this.metalness=0;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.roughnessMap=null;this.metalnessMap=null;this.alphaMap=null;this.envMap=null;this.envMapIntensity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.flatShading=false;this.vertexTangents=false;this.setValues(e)}MeshStandardMaterial.prototype=Object.create(Material.prototype);MeshStandardMaterial.prototype.constructor=MeshStandardMaterial;MeshStandardMaterial.prototype.isMeshStandardMaterial=true;MeshStandardMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.defines={STANDARD:""};this.color.copy(e.color);this.roughness=e.roughness;this.metalness=e.metalness;this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.roughnessMap=e.roughnessMap;this.metalnessMap=e.metalnessMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapIntensity=e.envMapIntensity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;this.flatShading=e.flatShading;this.vertexTangents=e.vertexTangents;return this};function MeshPhysicalMaterial(e){MeshStandardMaterial.call(this);this.defines={STANDARD:"",PHYSICAL:""};this.type="MeshPhysicalMaterial";this.clearcoat=0;this.clearcoatMap=null;this.clearcoatRoughness=0;this.clearcoatRoughnessMap=null;this.clearcoatNormalScale=new Vector2(1,1);this.clearcoatNormalMap=null;this.reflectivity=.5;Object.defineProperty(this,"ior",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(e){this.reflectivity=MathUtils.clamp(2.5*(e-1)/(e+1),0,1)}});this.sheen=null;this.transmission=0;this.transmissionMap=null;this.setValues(e)}MeshPhysicalMaterial.prototype=Object.create(MeshStandardMaterial.prototype);MeshPhysicalMaterial.prototype.constructor=MeshPhysicalMaterial;MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial=true;MeshPhysicalMaterial.prototype.copy=function(e){MeshStandardMaterial.prototype.copy.call(this,e);this.defines={STANDARD:"",PHYSICAL:""};this.clearcoat=e.clearcoat;this.clearcoatMap=e.clearcoatMap;this.clearcoatRoughness=e.clearcoatRoughness;this.clearcoatRoughnessMap=e.clearcoatRoughnessMap;this.clearcoatNormalMap=e.clearcoatNormalMap;this.clearcoatNormalScale.copy(e.clearcoatNormalScale);this.reflectivity=e.reflectivity;if(e.sheen){this.sheen=(this.sheen||new Color).copy(e.sheen)}else{this.sheen=null}this.transmission=e.transmission;this.transmissionMap=e.transmissionMap;return this};class MeshPhongMaterial extends Material{constructor(e){super();this.type="MeshPhongMaterial";this.color=new Color(16777215);this.specular=new Color(1118481);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.flatShading=false;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.specular.copy(e.specular);this.shininess=e.shininess;this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;this.flatShading=e.flatShading;return this}}MeshPhongMaterial.prototype.isMeshPhongMaterial=true;class MeshToonMaterial extends Material{constructor(e){super();this.defines={TOON:""};this.type="MeshToonMaterial";this.color=new Color(16777215);this.map=null;this.gradientMap=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.gradientMap=e.gradientMap;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.alphaMap=e.alphaMap;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;return this}}MeshToonMaterial.prototype.isMeshToonMaterial=true;class MeshNormalMaterial extends Material{constructor(e){super();this.type="MeshNormalMaterial";this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.flatShading=false;this.setValues(e)}copy(e){super.copy(e);this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;this.flatShading=e.flatShading;return this}}MeshNormalMaterial.prototype.isMeshNormalMaterial=true;class MeshLambertMaterial extends Material{constructor(e){super();this.type="MeshLambertMaterial";this.color=new Color(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;return this}}MeshLambertMaterial.prototype.isMeshLambertMaterial=true;class MeshMatcapMaterial extends Material{constructor(e){super();this.defines={MATCAP:""};this.type="MeshMatcapMaterial";this.color=new Color(16777215);this.matcap=null;this.map=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.flatShading=false;this.setValues(e)}copy(e){super.copy(e);this.defines={MATCAP:""};this.color.copy(e.color);this.matcap=e.matcap;this.map=e.map;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.alphaMap=e.alphaMap;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;this.flatShading=e.flatShading;return this}}MeshMatcapMaterial.prototype.isMeshMatcapMaterial=true;class LineDashedMaterial extends LineBasicMaterial{constructor(e){super();this.type="LineDashedMaterial";this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(e)}copy(e){super.copy(e);this.scale=e.scale;this.dashSize=e.dashSize;this.gapSize=e.gapSize;return this}}LineDashedMaterial.prototype.isLineDashedMaterial=true;var Materials=Object.freeze({__proto__:null,ShadowMaterial:ShadowMaterial,SpriteMaterial:SpriteMaterial,RawShaderMaterial:RawShaderMaterial,ShaderMaterial:ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:MeshToonMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshDepthMaterial:MeshDepthMaterial,MeshDistanceMaterial:MeshDistanceMaterial,MeshBasicMaterial:MeshBasicMaterial,MeshMatcapMaterial:MeshMatcapMaterial,LineDashedMaterial:LineDashedMaterial,LineBasicMaterial:LineBasicMaterial,Material:Material});const AnimationUtils={arraySlice:function(e,t,n){if(AnimationUtils.isTypedArray(e)){return new e.constructor(e.subarray(t,n!==undefined?n:e.length))}return e.slice(t,n)},convertArray:function(e,t,n){if(!e||!n&&e.constructor===t)return e;if(typeof t.BYTES_PER_ELEMENT==="number"){return new t(e)}return Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(n){function e(e,t){return n[e]-n[t]}const t=n.length;const r=new Array(t);for(let e=0;e!==t;++e)r[e]=e;r.sort(e);return r},sortedArray:function(n,r,i){const a=n.length;const s=new n.constructor(a);for(let e=0,t=0;t!==a;++e){const o=i[e]*r;for(let e=0;e!==r;++e){s[t++]=n[o+e]}}return s},flattenJSON:function(e,t,n,r){let i=1,a=e[0];while(a!==undefined&&a[r]===undefined){a=e[i++]}if(a===undefined)return;let s=a[r];if(s===undefined)return;if(Array.isArray(s)){do{s=a[r];if(s!==undefined){t.push(a.time);n.push.apply(n,s)}a=e[i++]}while(a!==undefined)}else if(s.toArray!==undefined){do{s=a[r];if(s!==undefined){t.push(a.time);s.toArray(n,n.length)}a=e[i++]}while(a!==undefined)}else{do{s=a[r];if(s!==undefined){t.push(a.time);n.push(s)}a=e[i++]}while(a!==undefined)}},subclip:function(e,t,n,r,i=30){const a=e.clone();a.name=t;const s=[];for(let e=0;e<a.tracks.length;++e){const c=a.tracks[e];const l=c.getValueSize();const u=[];const h=[];for(let t=0;t<c.times.length;++t){const d=c.times[t]*i;if(d<n||d>=r)continue;u.push(c.times[t]);for(let e=0;e<l;++e){h.push(c.values[t*l+e])}}if(u.length===0)continue;c.times=AnimationUtils.convertArray(u,c.times.constructor);c.values=AnimationUtils.convertArray(h,c.values.constructor);s.push(c)}a.tracks=s;let o=Infinity;for(let e=0;e<a.tracks.length;++e){if(o>a.tracks[e].times[0]){o=a.tracks[e].times[0]}}for(let e=0;e<a.tracks.length;++e){a.tracks[e].shift(-1*o)}a.resetDuration();return a},makeClipAdditive:function(i,e=0,a=i,t=30){if(t<=0)t=30;const n=a.tracks.length;const s=e/t;for(let r=0;r<n;++r){const o=a.tracks[r];const c=o.ValueTypeName;if(c==="bool"||c==="string")continue;const l=i.tracks.find(function(e){return e.name===o.name&&e.ValueTypeName===c});if(l===undefined)continue;let e=0;const u=o.getValueSize();if(o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){e=u/3}let t=0;const h=l.getValueSize();if(l.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){t=h/3}const d=o.times.length-1;let n;if(s<=o.times[0]){const p=e;const m=u-e;n=AnimationUtils.arraySlice(o.values,p,m)}else if(s>=o.times[d]){const p=d*u+e;const m=p+u-e;n=AnimationUtils.arraySlice(o.values,p,m)}else{const g=o.createInterpolant();const p=e;const m=u-e;g.evaluate(s);n=AnimationUtils.arraySlice(g.resultBuffer,p,m)}if(c==="quaternion"){const _=(new Quaternion).fromArray(n).normalize().conjugate();_.toArray(n)}const f=l.times.length;for(let e=0;e<f;++e){const y=e*h+t;if(c==="quaternion"){Quaternion.multiplyQuaternionsFlat(l.values,y,n,0,l.values,y)}else{const v=h-t*2;for(let e=0;e<v;++e){l.values[y+e]-=n[e]}}}}i.blendMode=AdditiveAnimationBlendMode;return i}};function Interpolant(e,t,n,r){this.parameterPositions=e;this._cachedIndex=0;this.resultBuffer=r!==undefined?r:new t.constructor(n);this.sampleValues=t;this.valueSize=n}Object.assign(Interpolant.prototype,{evaluate:function(t){const n=this.parameterPositions;let r=this._cachedIndex,i=n[r],a=n[r-1];e:{t:{let e;n:{r:if(!(t<i)){for(let e=r+2;;){if(i===undefined){if(t<a)break r;r=n.length;this._cachedIndex=r;return this.afterEnd_(r-1,t,a)}if(r===e)break;a=i;i=n[++r];if(t<i){break t}}e=n.length;break n}if(!(t>=a)){const s=n[1];if(t<s){r=2;a=s}for(let e=r-2;;){if(a===undefined){this._cachedIndex=0;return this.beforeStart_(0,t,i)}if(r===e)break;i=a;a=n[--r-1];if(t>=a){break t}}e=r;r=0;break n}break e}while(r<e){const o=r+e>>>1;if(t<n[o]){e=o}else{r=o+1}}i=n[r];a=n[r-1];if(a===undefined){this._cachedIndex=0;return this.beforeStart_(0,t,i)}if(i===undefined){r=n.length;this._cachedIndex=r;return this.afterEnd_(r-1,a,t)}}this._cachedIndex=r;this.intervalChanged_(r,a,i)}return this.interpolate_(r,a,t,i)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){const t=this.resultBuffer,n=this.sampleValues,r=this.valueSize,i=e*r;for(let e=0;e!==r;++e){t[e]=n[i+e]}return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}});Object.assign(Interpolant.prototype,{beforeStart_:Interpolant.prototype.copySampleValue_,afterEnd_:Interpolant.prototype.copySampleValue_});function CubicInterpolant(e,t,n,r){Interpolant.call(this,e,t,n,r);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0}CubicInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:CubicInterpolant,DefaultSettings_:{endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding},intervalChanged_:function(e,t,n){const r=this.parameterPositions;let i=e-2,a=e+1,s=r[i],o=r[a];if(s===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:i=e;s=2*t-n;break;case WrapAroundEnding:i=r.length-2;s=t+r[i]-r[i+1];break;default:i=e;s=n}}if(o===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:a=e;o=2*n-t;break;case WrapAroundEnding:a=1;o=n+r[1]-r[0];break;default:a=e-1;o=t}}const c=(n-t)*.5,l=this.valueSize;this._weightPrev=c/(t-s);this._weightNext=c/(o-n);this._offsetPrev=i*l;this._offsetNext=a*l},interpolate_:function(e,t,n,r){const i=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=e*s,c=o-s,l=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,d=this._weightNext,f=(n-t)/(r-t),p=f*f,m=p*f;const g=-h*m+2*h*p-h*f;const _=(1+h)*m+(-1.5-2*h)*p+(-.5+h)*f+1;const y=(-1-d)*m+(1.5+d)*p+.5*f;const v=d*m-d*p;for(let e=0;e!==s;++e){i[e]=g*a[l+e]+_*a[c+e]+y*a[o+e]+v*a[u+e]}return i}});function LinearInterpolant(e,t,n,r){Interpolant.call(this,e,t,n,r)}LinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:LinearInterpolant,interpolate_:function(e,t,n,r){const i=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=e*s,c=o-s,l=(n-t)/(r-t),u=1-l;for(let e=0;e!==s;++e){i[e]=a[c+e]*u+a[o+e]*l}return i}});function DiscreteInterpolant(e,t,n,r){Interpolant.call(this,e,t,n,r)}DiscreteInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:DiscreteInterpolant,interpolate_:function(e){return this.copySampleValue_(e-1)}});class KeyframeTrack{constructor(e,t,n,r){if(e===undefined)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===undefined||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e;this.times=AnimationUtils.convertArray(t,this.TimeBufferType);this.values=AnimationUtils.convertArray(n,this.ValueBufferType);this.setInterpolation(r||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON){n=t.toJSON(e)}else{n={name:e.name,times:AnimationUtils.convertArray(e.times,Array),values:AnimationUtils.convertArray(e.values,Array)};const r=e.getInterpolation();if(r!==e.DefaultInterpolation){n.interpolation=r}}n.type=e.ValueTypeName;return n}InterpolantFactoryMethodDiscrete(e){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new LinearInterpolant(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new CubicInterpolant(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case InterpolateDiscrete:t=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:t=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:t=this.InterpolantFactoryMethodSmooth;break}if(t===undefined){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===undefined){if(e!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation)}else{throw new Error(n)}}console.warn("THREE.KeyframeTrack:",n);return this}this.createInterpolant=t;return this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth}}getValueSize(){return this.values.length/this.times.length}shift(n){if(n!==0){const r=this.times;for(let e=0,t=r.length;e!==t;++e){r[e]+=n}}return this}scale(n){if(n!==1){const r=this.times;for(let e=0,t=r.length;e!==t;++e){r[e]*=n}}return this}trim(e,t){const n=this.times,r=n.length;let i=0,a=r-1;while(i!==r&&n[i]<e){++i}while(a!==-1&&n[a]>t){--a}++a;if(i!==0||a!==r){if(i>=a){a=Math.max(a,1);i=a-1}const s=this.getValueSize();this.times=AnimationUtils.arraySlice(n,i,a);this.values=AnimationUtils.arraySlice(this.values,i*s,a*s)}return this}validate(){let n=true;const e=this.getValueSize();if(e-Math.floor(e)!==0){console.error("THREE.KeyframeTrack: Invalid value size in track.",this);n=false}const t=this.times,r=this.values,i=t.length;if(i===0){console.error("THREE.KeyframeTrack: Track is empty.",this);n=false}let a=null;for(let e=0;e!==i;e++){const s=t[e];if(typeof s==="number"&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,s);n=false;break}if(a!==null&&a>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,s,a);n=false;break}a=s}if(r!==undefined){if(AnimationUtils.isTypedArray(r)){for(let e=0,t=r.length;e!==t;++e){const o=r[e];if(isNaN(o)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,o);n=false;break}}}}return n}optimize(){const n=AnimationUtils.arraySlice(this.times),r=AnimationUtils.arraySlice(this.values),i=this.getValueSize(),a=this.getInterpolation()===InterpolateSmooth,s=n.length-1;let o=1;for(let e=1;e<s;++e){let t=false;const c=n[e];const l=n[e+1];if(c!==l&&(e!==1||c!==n[0])){if(!a){const u=e*i,h=u-i,d=u+i;for(let e=0;e!==i;++e){const f=r[u+e];if(f!==r[h+e]||f!==r[d+e]){t=true;break}}}else{t=true}}if(t){if(e!==o){n[o]=n[e];const p=e*i,m=o*i;for(let e=0;e!==i;++e){r[m+e]=r[p+e]}}++o}}if(s>0){n[o]=n[s];for(let e=s*i,t=o*i,n=0;n!==i;++n){r[t+n]=r[e+n]}++o}if(o!==n.length){this.times=AnimationUtils.arraySlice(n,0,o);this.values=AnimationUtils.arraySlice(r,0,o*i)}else{this.times=n;this.values=r}return this}clone(){const e=AnimationUtils.arraySlice(this.times,0);const t=AnimationUtils.arraySlice(this.values,0);const n=this.constructor;const r=new n(this.name,e,t);r.createInterpolant=this.createInterpolant;return r}}KeyframeTrack.prototype.TimeBufferType=Float32Array;KeyframeTrack.prototype.ValueBufferType=Float32Array;KeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;class BooleanKeyframeTrack extends KeyframeTrack{}BooleanKeyframeTrack.prototype.ValueTypeName="bool";BooleanKeyframeTrack.prototype.ValueBufferType=Array;BooleanKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;class ColorKeyframeTrack extends KeyframeTrack{}ColorKeyframeTrack.prototype.ValueTypeName="color";class NumberKeyframeTrack extends KeyframeTrack{}NumberKeyframeTrack.prototype.ValueTypeName="number";function QuaternionLinearInterpolant(e,t,n,r){Interpolant.call(this,e,t,n,r)}QuaternionLinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:QuaternionLinearInterpolant,interpolate_:function(e,t,n,r){const i=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=(n-t)/(r-t);let c=e*s;for(let e=c+s;c!==e;c+=4){Quaternion.slerpFlat(i,0,a,c-s,a,c,o)}return i}});class QuaternionKeyframeTrack extends KeyframeTrack{InterpolantFactoryMethodLinear(e){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),e)}}QuaternionKeyframeTrack.prototype.ValueTypeName="quaternion";QuaternionKeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;class StringKeyframeTrack extends KeyframeTrack{}StringKeyframeTrack.prototype.ValueTypeName="string";StringKeyframeTrack.prototype.ValueBufferType=Array;StringKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;class VectorKeyframeTrack extends KeyframeTrack{}VectorKeyframeTrack.prototype.ValueTypeName="vector";class AnimationClip{constructor(e,t=-1,n,r=NormalAnimationBlendMode){this.name=e;this.tracks=n;this.duration=t;this.blendMode=r;this.uuid=MathUtils.generateUUID();if(this.duration<0){this.resetDuration()}}static parse(e){const n=[],r=e.tracks,i=1/(e.fps||1);for(let e=0,t=r.length;e!==t;++e){n.push(parseKeyframeTrack(r[e]).scale(i))}const t=new this(e.name,e.duration,n,e.blendMode);t.uuid=e.uuid;return t}static toJSON(e){const n=[],r=e.tracks;const t={name:e.name,duration:e.duration,tracks:n,uuid:e.uuid,blendMode:e.blendMode};for(let e=0,t=r.length;e!==t;++e){n.push(KeyframeTrack.toJSON(r[e]))}return t}static CreateFromMorphTargetSequence(e,r,i,a){const s=r.length;const o=[];for(let n=0;n<s;n++){let e=[];let t=[];e.push((n+s-1)%s,n,(n+1)%s);t.push(0,1,0);const c=AnimationUtils.getKeyframeOrder(e);e=AnimationUtils.sortedArray(e,1,c);t=AnimationUtils.sortedArray(t,1,c);if(!a&&e[0]===0){e.push(s);t.push(t[0])}o.push(new NumberKeyframeTrack(".morphTargetInfluences["+r[n].name+"]",e,t).scale(1/i))}return new this(e,-1,o)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const r=e;n=r.geometry&&r.geometry.animations||r.animations}for(let e=0;e<n.length;e++){if(n[e].name===t){return n[e]}}return null}static CreateClipsFromMorphTargetSequences(n,e,t){const r={};const i=/^([\w-]*?)([\d]+)$/;for(let e=0,t=n.length;e<t;e++){const s=n[e];const o=s.name.match(i);if(o&&o.length>1){const c=o[1];let e=r[c];if(!e){r[c]=e=[]}e.push(s)}}const a=[];for(const c in r){a.push(this.CreateFromMorphTargetSequence(c,r[c],e,t))}return a}static parseAnimation(e,t){if(!e){console.error("THREE.AnimationClip: No animation in JSONLoader data.");return null}const n=function(e,t,n,r,i){if(n.length!==0){const a=[];const s=[];AnimationUtils.flattenJSON(n,a,s,r);if(a.length!==0){i.push(new e(t,a,s))}}};const r=[];const i=e.name||"default";const a=e.fps||30;const s=e.blendMode;let o=e.length||-1;const c=e.hierarchy||[];for(let e=0;e<c.length;e++){const u=c[e].keys;if(!u||u.length===0)continue;if(u[0].morphTargets){const h={};let t;for(t=0;t<u.length;t++){if(u[t].morphTargets){for(let e=0;e<u[t].morphTargets.length;e++){h[u[t].morphTargets[e]]=-1}}}for(const d in h){const f=[];const p=[];for(let e=0;e!==u[t].morphTargets.length;++e){const m=u[t];f.push(m.time);p.push(m.morphTarget===d?1:0)}r.push(new NumberKeyframeTrack(".morphTargetInfluence["+d+"]",f,p))}o=h.length*(a||1)}else{const g=".bones["+t[e].name+"]";n(VectorKeyframeTrack,g+".position",u,"pos",r);n(QuaternionKeyframeTrack,g+".quaternion",u,"rot",r);n(VectorKeyframeTrack,g+".scale",u,"scl",r)}}if(r.length===0){return null}const l=new this(i,o,r,s);return l}resetDuration(){const n=this.tracks;let r=0;for(let e=0,t=n.length;e!==t;++e){const i=this.tracks[e];r=Math.max(r,i.times[i.times.length-1])}this.duration=r;return this}trim(){for(let e=0;e<this.tracks.length;e++){this.tracks[e].trim(0,this.duration)}return this}validate(){let t=true;for(let e=0;e<this.tracks.length;e++){t=t&&this.tracks[e].validate()}return t}optimize(){for(let e=0;e<this.tracks.length;e++){this.tracks[e].optimize()}return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++){t.push(this.tracks[e].clone())}return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function getTrackTypeForValueTypeName(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return VectorKeyframeTrack;case"color":return ColorKeyframeTrack;case"quaternion":return QuaternionKeyframeTrack;case"bool":case"boolean":return BooleanKeyframeTrack;case"string":return StringKeyframeTrack}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}function parseKeyframeTrack(e){if(e.type===undefined){throw new Error("THREE.KeyframeTrack: track type undefined, can not parse")}const t=getTrackTypeForValueTypeName(e.type);if(e.times===undefined){const n=[],r=[];AnimationUtils.flattenJSON(e.keys,n,r,"value");e.times=n;e.values=r}if(t.parse!==undefined){return t.parse(e)}else{return new t(e.name,e.times,e.values,e.interpolation)}}const Cache={enabled:false,files:{},add:function(e,t){if(this.enabled===false)return;this.files[e]=t},get:function(e){if(this.enabled===false)return;return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};function LoadingManager(e,t,n){const r=this;let i=false;let a=0;let s=0;let o=undefined;const c=[];this.onStart=undefined;this.onLoad=e;this.onProgress=t;this.onError=n;this.itemStart=function(e){s++;if(i===false){if(r.onStart!==undefined){r.onStart(e,a,s)}}i=true};this.itemEnd=function(e){a++;if(r.onProgress!==undefined){r.onProgress(e,a,s)}if(a===s){i=false;if(r.onLoad!==undefined){r.onLoad()}}};this.itemError=function(e){if(r.onError!==undefined){r.onError(e)}};this.resolveURL=function(e){if(o){return o(e)}return e};this.setURLModifier=function(e){o=e;return this};this.addHandler=function(e,t){c.push(e,t);return this};this.removeHandler=function(e){const t=c.indexOf(e);if(t!==-1){c.splice(t,2)}return this};this.getHandler=function(n){for(let e=0,t=c.length;e<t;e+=2){const r=c[e];const i=c[e+1];if(r.global)r.lastIndex=0;if(r.test(n)){return i}}return null}}const DefaultLoadingManager=new LoadingManager;function Loader(e){this.manager=e!==undefined?e:DefaultLoadingManager;this.crossOrigin="anonymous";this.withCredentials=false;this.path="";this.resourcePath="";this.requestHeader={}}Object.assign(Loader.prototype,{load:function(){},loadAsync:function(n,r){const i=this;return new Promise(function(e,t){i.load(n,e,r,t)})},parse:function(){},setCrossOrigin:function(e){this.crossOrigin=e;return this},setWithCredentials:function(e){this.withCredentials=e;return this},setPath:function(e){this.path=e;return this},setResourcePath:function(e){this.resourcePath=e;return this},setRequestHeader:function(e){this.requestHeader=e;return this}});const loading={};function FileLoader(e){Loader.call(this,e)}FileLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:FileLoader,load:function(s,n,e,r){if(s===undefined)s="";if(this.path!==undefined)s=this.path+s;s=this.manager.resolveURL(s);const o=this;const t=Cache.get(s);if(t!==undefined){o.manager.itemStart(s);setTimeout(function(){if(n)n(t);o.manager.itemEnd(s)},0);return t}if(loading[s]!==undefined){loading[s].push({onLoad:n,onProgress:e,onError:r});return}const i=/^data:(.*?)(;base64)?,(.*)$/;const a=s.match(i);let c;if(a){const l=a[1];const u=!!a[2];let t=a[3];t=decodeURIComponent(t);if(u)t=atob(t);try{let e;const h=(this.responseType||"").toLowerCase();switch(h){case"arraybuffer":case"blob":const d=new Uint8Array(t.length);for(let e=0;e<t.length;e++){d[e]=t.charCodeAt(e)}if(h==="blob"){e=new Blob([d.buffer],{type:l})}else{e=d.buffer}break;case"document":const f=new DOMParser;e=f.parseFromString(t,l);break;case"json":e=JSON.parse(t);break;default:e=t;break}setTimeout(function(){if(n)n(e);o.manager.itemEnd(s)},0)}catch(e){setTimeout(function(){if(r)r(e);o.manager.itemError(s);o.manager.itemEnd(s)},0)}}else{loading[s]=[];loading[s].push({onLoad:n,onProgress:e,onError:r});c=new XMLHttpRequest;c.open("GET",s,true);c.addEventListener("load",function(n){const r=this.response;const i=loading[s];delete loading[s];if(this.status===200||this.status===0){if(this.status===0)console.warn("THREE.FileLoader: HTTP Status 0 received.");Cache.add(s,r);for(let e=0,t=i.length;e<t;e++){const a=i[e];if(a.onLoad)a.onLoad(r)}o.manager.itemEnd(s)}else{for(let e=0,t=i.length;e<t;e++){const a=i[e];if(a.onError)a.onError(n)}o.manager.itemError(s);o.manager.itemEnd(s)}},false);c.addEventListener("progress",function(n){const r=loading[s];for(let e=0,t=r.length;e<t;e++){const i=r[e];if(i.onProgress)i.onProgress(n)}},false);c.addEventListener("error",function(n){const r=loading[s];delete loading[s];for(let e=0,t=r.length;e<t;e++){const i=r[e];if(i.onError)i.onError(n)}o.manager.itemError(s);o.manager.itemEnd(s)},false);c.addEventListener("abort",function(n){const r=loading[s];delete loading[s];for(let e=0,t=r.length;e<t;e++){const i=r[e];if(i.onError)i.onError(n)}o.manager.itemError(s);o.manager.itemEnd(s)},false);if(this.responseType!==undefined)c.responseType=this.responseType;if(this.withCredentials!==undefined)c.withCredentials=this.withCredentials;if(c.overrideMimeType)c.overrideMimeType(this.mimeType!==undefined?this.mimeType:"text/plain");for(const p in this.requestHeader){c.setRequestHeader(p,this.requestHeader[p])}c.send(null)}o.manager.itemStart(s);return c},setResponseType:function(e){this.responseType=e;return this},setMimeType:function(e){this.mimeType=e;return this}});class AnimationLoader extends Loader{constructor(e){super(e)}load(t,n,e,r){const i=this;const a=new FileLoader(this.manager);a.setPath(this.path);a.setRequestHeader(this.requestHeader);a.setWithCredentials(this.withCredentials);a.load(t,function(e){try{n(i.parse(JSON.parse(e)))}catch(e){if(r){r(e)}else{console.error(e)}i.manager.itemError(t)}},e,r)}parse(t){const n=[];for(let e=0;e<t.length;e++){const r=AnimationClip.parse(t[e]);n.push(r)}return n}}function CompressedTextureLoader(e){Loader.call(this,e)}CompressedTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:CompressedTextureLoader,load:function(r,i,e,t){const a=this;const s=[];const o=new CompressedTexture;const c=new FileLoader(this.manager);c.setPath(this.path);c.setResponseType("arraybuffer");c.setRequestHeader(this.requestHeader);c.setWithCredentials(a.withCredentials);let l=0;function n(n){c.load(r[n],function(e){const t=a.parse(e,true);s[n]={width:t.width,height:t.height,format:t.format,mipmaps:t.mipmaps};l+=1;if(l===6){if(t.mipmapCount===1)o.minFilter=LinearFilter;o.image=s;o.format=t.format;o.needsUpdate=true;if(i)i(o)}},e,t)}if(Array.isArray(r)){for(let e=0,t=r.length;e<t;++e){n(e)}}else{c.load(r,function(e){const n=a.parse(e,true);if(n.isCubemap){const r=n.mipmaps.length/n.mipmapCount;for(let t=0;t<r;t++){s[t]={mipmaps:[]};for(let e=0;e<n.mipmapCount;e++){s[t].mipmaps.push(n.mipmaps[t*n.mipmapCount+e]);s[t].format=n.format;s[t].width=n.width;s[t].height=n.height}}o.image=s}else{o.image.width=n.width;o.image.height=n.height;o.mipmaps=n.mipmaps}if(n.mipmapCount===1){o.minFilter=LinearFilter}o.format=n.format;o.needsUpdate=true;if(i)i(o)},e,t)}return o}});class ImageLoader extends Loader{constructor(e){super(e)}load(t,e,n,r){if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const i=this;const a=Cache.get(t);if(a!==undefined){i.manager.itemStart(t);setTimeout(function(){if(e)e(a);i.manager.itemEnd(t)},0);return a}const s=document.createElementNS("http://www.w3.org/1999/xhtml","img");function o(){s.removeEventListener("load",o,false);s.removeEventListener("error",c,false);Cache.add(t,this);if(e)e(this);i.manager.itemEnd(t)}function c(e){s.removeEventListener("load",o,false);s.removeEventListener("error",c,false);if(r)r(e);i.manager.itemError(t);i.manager.itemEnd(t)}s.addEventListener("load",o,false);s.addEventListener("error",c,false);if(t.substr(0,5)!=="data:"){if(this.crossOrigin!==undefined)s.crossOrigin=this.crossOrigin}i.manager.itemStart(t);s.src=t;return s}}class CubeTextureLoader extends Loader{constructor(e){super(e)}load(n,r,e,i){const a=new CubeTexture;const s=new ImageLoader(this.manager);s.setCrossOrigin(this.crossOrigin);s.setPath(this.path);let o=0;function t(t){s.load(n[t],function(e){a.images[t]=e;o++;if(o===6){a.needsUpdate=true;if(r)r(a)}},undefined,i)}for(let e=0;e<n.length;++e){t(e)}return a}}function DataTextureLoader(e){Loader.call(this,e)}DataTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:DataTextureLoader,load:function(e,n,t,r){const i=this;const a=new DataTexture;const s=new FileLoader(this.manager);s.setResponseType("arraybuffer");s.setRequestHeader(this.requestHeader);s.setPath(this.path);s.setWithCredentials(i.withCredentials);s.load(e,function(e){const t=i.parse(e);if(!t)return;if(t.image!==undefined){a.image=t.image}else if(t.data!==undefined){a.image.width=t.width;a.image.height=t.height;a.image.data=t.data}a.wrapS=t.wrapS!==undefined?t.wrapS:ClampToEdgeWrapping;a.wrapT=t.wrapT!==undefined?t.wrapT:ClampToEdgeWrapping;a.magFilter=t.magFilter!==undefined?t.magFilter:LinearFilter;a.minFilter=t.minFilter!==undefined?t.minFilter:LinearFilter;a.anisotropy=t.anisotropy!==undefined?t.anisotropy:1;if(t.encoding!==undefined){a.encoding=t.encoding}if(t.flipY!==undefined){a.flipY=t.flipY}if(t.format!==undefined){a.format=t.format}if(t.type!==undefined){a.type=t.type}if(t.mipmaps!==undefined){a.mipmaps=t.mipmaps;a.minFilter=LinearMipmapLinearFilter}if(t.mipmapCount===1){a.minFilter=LinearFilter}a.needsUpdate=true;if(n)n(a,t)},t,r);return a}});function TextureLoader(e){Loader.call(this,e)}TextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:TextureLoader,load:function(n,r,e,t){const i=new Texture;const a=new ImageLoader(this.manager);a.setCrossOrigin(this.crossOrigin);a.setPath(this.path);a.load(n,function(e){i.image=e;const t=n.search(/\.jpe?g($|\?)/i)>0||n.search(/^data\:image\/jpeg/)===0;i.format=t?RGBFormat:RGBAFormat;i.needsUpdate=true;if(r!==undefined){r(i)}},e,t);return i}});function Curve(){this.type="Curve";this.arcLengthDivisions=200}Object.assign(Curve.prototype,{getPoint:function(){console.warn("THREE.Curve: .getPoint() not implemented.");return null},getPointAt:function(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)},getPoints:function(t=5){const n=[];for(let e=0;e<=t;e++){n.push(this.getPoint(e/t))}return n},getSpacedPoints:function(t=5){const n=[];for(let e=0;e<=t;e++){n.push(this.getPointAt(e/t))}return n},getLength:function(){const e=this.getLengths();return e[e.length-1]},getLengths:function(t){if(t===undefined)t=this.arcLengthDivisions;if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate){return this.cacheArcLengths}this.needsUpdate=false;const n=[];let r,i=this.getPoint(0);let a=0;n.push(0);for(let e=1;e<=t;e++){r=this.getPoint(e/t);a+=r.distanceTo(i);n.push(a);i=r}this.cacheArcLengths=n;return n},updateArcLengths:function(){this.needsUpdate=true;this.getLengths()},getUtoTmapping:function(e,t){const n=this.getLengths();let r=0;const i=n.length;let a;if(t){a=t}else{a=e*n[i-1]}let s=0,o=i-1,c;while(s<=o){r=Math.floor(s+(o-s)/2);c=n[r]-a;if(c<0){s=r+1}else if(c>0){o=r-1}else{o=r;break}}r=o;if(n[r]===a){return r/(i-1)}const l=n[r];const u=n[r+1];const h=u-l;const d=(a-l)/h;const f=(r+d)/(i-1);return f},getTangent:function(e,t){const n=1e-4;let r=e-n;let i=e+n;if(r<0)r=0;if(i>1)i=1;const a=this.getPoint(r);const s=this.getPoint(i);const o=t||(a.isVector2?new Vector2:new Vector3);o.copy(s).sub(a).normalize();return o},getTangentAt:function(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)},computeFrenetFrames:function(n,e){const t=new Vector3;const r=[];const i=[];const a=[];const s=new Vector3;const o=new Matrix4;for(let e=0;e<=n;e++){const d=e/n;r[e]=this.getTangentAt(d,new Vector3);r[e].normalize()}i[0]=new Vector3;a[0]=new Vector3;let c=Number.MAX_VALUE;const l=Math.abs(r[0].x);const u=Math.abs(r[0].y);const h=Math.abs(r[0].z);if(l<=c){c=l;t.set(1,0,0)}if(u<=c){c=u;t.set(0,1,0)}if(h<=c){t.set(0,0,1)}s.crossVectors(r[0],t).normalize();i[0].crossVectors(r[0],s);a[0].crossVectors(r[0],i[0]);for(let e=1;e<=n;e++){i[e]=i[e-1].clone();a[e]=a[e-1].clone();s.crossVectors(r[e-1],r[e]);if(s.length()>Number.EPSILON){s.normalize();const f=Math.acos(MathUtils.clamp(r[e-1].dot(r[e]),-1,1));i[e].applyMatrix4(o.makeRotationAxis(s,f))}a[e].crossVectors(r[e],i[e])}if(e===true){let t=Math.acos(MathUtils.clamp(i[0].dot(i[n]),-1,1));t/=n;if(r[0].dot(s.crossVectors(i[0],i[n]))>0){t=-t}for(let e=1;e<=n;e++){i[e].applyMatrix4(o.makeRotationAxis(r[e],t*e));a[e].crossVectors(r[e],i[e])}}return{tangents:r,normals:i,binormals:a}},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.arcLengthDivisions=e.arcLengthDivisions;return this},toJSON:function(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};e.arcLengthDivisions=this.arcLengthDivisions;e.type=this.type;return e},fromJSON:function(e){this.arcLengthDivisions=e.arcLengthDivisions;return this}});class EllipseCurve extends Curve{constructor(e=0,t=0,n=1,r=1,i=0,a=Math.PI*2,s=false,o=0){super();this.type="EllipseCurve";this.aX=e;this.aY=t;this.xRadius=n;this.yRadius=r;this.aStartAngle=i;this.aEndAngle=a;this.aClockwise=s;this.aRotation=o}getPoint(e,t){const n=t||new Vector2;const r=Math.PI*2;let i=this.aEndAngle-this.aStartAngle;const a=Math.abs(i)<Number.EPSILON;while(i<0)i+=r;while(i>r)i-=r;if(i<Number.EPSILON){if(a){i=0}else{i=r}}if(this.aClockwise===true&&!a){if(i===r){i=-r}else{i=i-r}}const s=this.aStartAngle+e*i;let o=this.aX+this.xRadius*Math.cos(s);let c=this.aY+this.yRadius*Math.sin(s);if(this.aRotation!==0){const l=Math.cos(this.aRotation);const u=Math.sin(this.aRotation);const h=o-this.aX;const d=c-this.aY;o=h*l-d*u+this.aX;c=h*u+d*l+this.aY}return n.set(o,c)}copy(e){super.copy(e);this.aX=e.aX;this.aY=e.aY;this.xRadius=e.xRadius;this.yRadius=e.yRadius;this.aStartAngle=e.aStartAngle;this.aEndAngle=e.aEndAngle;this.aClockwise=e.aClockwise;this.aRotation=e.aRotation;return this}toJSON(){const e=super.toJSON();e.aX=this.aX;e.aY=this.aY;e.xRadius=this.xRadius;e.yRadius=this.yRadius;e.aStartAngle=this.aStartAngle;e.aEndAngle=this.aEndAngle;e.aClockwise=this.aClockwise;e.aRotation=this.aRotation;return e}fromJSON(e){super.fromJSON(e);this.aX=e.aX;this.aY=e.aY;this.xRadius=e.xRadius;this.yRadius=e.yRadius;this.aStartAngle=e.aStartAngle;this.aEndAngle=e.aEndAngle;this.aClockwise=e.aClockwise;this.aRotation=e.aRotation;return this}}EllipseCurve.prototype.isEllipseCurve=true;class ArcCurve extends EllipseCurve{constructor(e,t,n,r,i,a){super(e,t,n,n,r,i,a);this.type="ArcCurve"}}ArcCurve.prototype.isArcCurve=true;function CubicPoly(){let i=0,a=0,s=0,o=0;function l(e,t,n,r){i=e;a=n;s=-3*e+3*t-2*n-r;o=2*e-2*t+n+r}return{initCatmullRom:function(e,t,n,r,i){l(t,n,i*(n-e),i*(r-t))},initNonuniformCatmullRom:function(e,t,n,r,i,a,s){let o=(t-e)/i-(n-e)/(i+a)+(n-t)/a;let c=(n-t)/a-(r-t)/(a+s)+(r-n)/s;o*=a;c*=a;l(t,n,o,c)},calc:function(e){const t=e*e;const n=t*e;return i+a*e+s*t+o*n}}}const tmp=new Vector3;const px=new CubicPoly,py=new CubicPoly,pz=new CubicPoly;class CatmullRomCurve3 extends Curve{constructor(e=[],t=false,n="centripetal",r=.5){super();this.type="CatmullRomCurve3";this.points=e;this.closed=t;this.curveType=n;this.tension=r}getPoint(e,t=new Vector3){const n=t;const r=this.points;const i=r.length;const a=(i-(this.closed?0:1))*e;let s=Math.floor(a);let o=a-s;if(this.closed){s+=s>0?0:(Math.floor(Math.abs(s)/i)+1)*i}else if(o===0&&s===i-1){s=i-2;o=1}let c,l;if(this.closed||s>0){c=r[(s-1)%i]}else{tmp.subVectors(r[0],r[1]).add(r[0]);c=tmp}const u=r[s%i];const h=r[(s+1)%i];if(this.closed||s+2<i){l=r[(s+2)%i]}else{tmp.subVectors(r[i-1],r[i-2]).add(r[i-1]);l=tmp}if(this.curveType==="centripetal"||this.curveType==="chordal"){const d=this.curveType==="chordal"?.5:.25;let e=Math.pow(c.distanceToSquared(u),d);let t=Math.pow(u.distanceToSquared(h),d);let n=Math.pow(h.distanceToSquared(l),d);if(t<1e-4)t=1;if(e<1e-4)e=t;if(n<1e-4)n=t;px.initNonuniformCatmullRom(c.x,u.x,h.x,l.x,e,t,n);py.initNonuniformCatmullRom(c.y,u.y,h.y,l.y,e,t,n);pz.initNonuniformCatmullRom(c.z,u.z,h.z,l.z,e,t,n)}else if(this.curveType==="catmullrom"){px.initCatmullRom(c.x,u.x,h.x,l.x,this.tension);py.initCatmullRom(c.y,u.y,h.y,l.y,this.tension);pz.initCatmullRom(c.z,u.z,h.z,l.z,this.tension)}n.set(px.calc(o),py.calc(o),pz.calc(o));return n}copy(n){super.copy(n);this.points=[];for(let e=0,t=n.points.length;e<t;e++){const r=n.points[e];this.points.push(r.clone())}this.closed=n.closed;this.curveType=n.curveType;this.tension=n.tension;return this}toJSON(){const n=super.toJSON();n.points=[];for(let e=0,t=this.points.length;e<t;e++){const r=this.points[e];n.points.push(r.toArray())}n.closed=this.closed;n.curveType=this.curveType;n.tension=this.tension;return n}fromJSON(n){super.fromJSON(n);this.points=[];for(let e=0,t=n.points.length;e<t;e++){const r=n.points[e];this.points.push((new Vector3).fromArray(r))}this.closed=n.closed;this.curveType=n.curveType;this.tension=n.tension;return this}}CatmullRomCurve3.prototype.isCatmullRomCurve3=true;function CatmullRom(e,t,n,r,i){const a=(r-t)*.5;const s=(i-n)*.5;const o=e*e;const c=e*o;return(2*n-2*r+a+s)*c+(-3*n+3*r-2*a-s)*o+a*e+n}function QuadraticBezierP0(e,t){const n=1-e;return n*n*t}function QuadraticBezierP1(e,t){return 2*(1-e)*e*t}function QuadraticBezierP2(e,t){return e*e*t}function QuadraticBezier(e,t,n,r){return QuadraticBezierP0(e,t)+QuadraticBezierP1(e,n)+QuadraticBezierP2(e,r)}function CubicBezierP0(e,t){const n=1-e;return n*n*n*t}function CubicBezierP1(e,t){const n=1-e;return 3*n*n*e*t}function CubicBezierP2(e,t){return 3*(1-e)*e*e*t}function CubicBezierP3(e,t){return e*e*e*t}function CubicBezier(e,t,n,r,i){return CubicBezierP0(e,t)+CubicBezierP1(e,n)+CubicBezierP2(e,r)+CubicBezierP3(e,i)}class CubicBezierCurve extends Curve{constructor(e=new Vector2,t=new Vector2,n=new Vector2,r=new Vector2){super();this.type="CubicBezierCurve";this.v0=e;this.v1=t;this.v2=n;this.v3=r}getPoint(e,t=new Vector2){const n=t;const r=this.v0,i=this.v1,a=this.v2,s=this.v3;n.set(CubicBezier(e,r.x,i.x,a.x,s.x),CubicBezier(e,r.y,i.y,a.y,s.y));return n}copy(e){super.copy(e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);this.v3.copy(e.v3);return this}toJSON(){const e=super.toJSON();e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();e.v3=this.v3.toArray();return e}fromJSON(e){super.fromJSON(e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);this.v3.fromArray(e.v3);return this}}CubicBezierCurve.prototype.isCubicBezierCurve=true;class CubicBezierCurve3 extends Curve{constructor(e=new Vector3,t=new Vector3,n=new Vector3,r=new Vector3){super();this.type="CubicBezierCurve3";this.v0=e;this.v1=t;this.v2=n;this.v3=r}getPoint(e,t=new Vector3){const n=t;const r=this.v0,i=this.v1,a=this.v2,s=this.v3;n.set(CubicBezier(e,r.x,i.x,a.x,s.x),CubicBezier(e,r.y,i.y,a.y,s.y),CubicBezier(e,r.z,i.z,a.z,s.z));return n}copy(e){super.copy(e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);this.v3.copy(e.v3);return this}toJSON(){const e=super.toJSON();e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();e.v3=this.v3.toArray();return e}fromJSON(e){super.fromJSON(e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);this.v3.fromArray(e.v3);return this}}CubicBezierCurve3.prototype.isCubicBezierCurve3=true;class LineCurve extends Curve{constructor(e=new Vector2,t=new Vector2){super();this.type="LineCurve";this.v1=e;this.v2=t}getPoint(e,t=new Vector2){const n=t;if(e===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(e).add(this.v1)}return n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t){const n=t||new Vector2;n.copy(this.v2).sub(this.v1).normalize();return n}copy(e){super.copy(e);this.v1.copy(e.v1);this.v2.copy(e.v2);return this}toJSON(){const e=super.toJSON();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e}fromJSON(e){super.fromJSON(e);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this}}LineCurve.prototype.isLineCurve=true;class LineCurve3 extends Curve{constructor(e=new Vector3,t=new Vector3){super();this.type="LineCurve3";this.isLineCurve3=true;this.v1=e;this.v2=t}getPoint(e,t=new Vector3){const n=t;if(e===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(e).add(this.v1)}return n}getPointAt(e,t){return this.getPoint(e,t)}copy(e){super.copy(e);this.v1.copy(e.v1);this.v2.copy(e.v2);return this}toJSON(){const e=super.toJSON();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e}fromJSON(e){super.fromJSON(e);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this}}class QuadraticBezierCurve extends Curve{constructor(e=new Vector2,t=new Vector2,n=new Vector2){super();this.type="QuadraticBezierCurve";this.v0=e;this.v1=t;this.v2=n}getPoint(e,t=new Vector2){const n=t;const r=this.v0,i=this.v1,a=this.v2;n.set(QuadraticBezier(e,r.x,i.x,a.x),QuadraticBezier(e,r.y,i.y,a.y));return n}copy(e){super.copy(e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);return this}toJSON(){const e=super.toJSON();e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e}fromJSON(e){super.fromJSON(e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this}}QuadraticBezierCurve.prototype.isQuadraticBezierCurve=true;class QuadraticBezierCurve3 extends Curve{constructor(e=new Vector3,t=new Vector3,n=new Vector3){super();this.type="QuadraticBezierCurve3";this.v0=e;this.v1=t;this.v2=n}getPoint(e,t=new Vector3){const n=t;const r=this.v0,i=this.v1,a=this.v2;n.set(QuadraticBezier(e,r.x,i.x,a.x),QuadraticBezier(e,r.y,i.y,a.y),QuadraticBezier(e,r.z,i.z,a.z));return n}copy(e){super.copy(e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);return this}toJSON(){const e=super.toJSON();e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e}fromJSON(e){super.fromJSON(e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this}}QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3=true;class SplineCurve extends Curve{constructor(e=[]){super();this.type="SplineCurve";this.points=e}getPoint(e,t=new Vector2){const n=t;const r=this.points;const i=(r.length-1)*e;const a=Math.floor(i);const s=i-a;const o=r[a===0?a:a-1];const c=r[a];const l=r[a>r.length-2?r.length-1:a+1];const u=r[a>r.length-3?r.length-1:a+2];n.set(CatmullRom(s,o.x,c.x,l.x,u.x),CatmullRom(s,o.y,c.y,l.y,u.y));return n}copy(n){super.copy(n);this.points=[];for(let e=0,t=n.points.length;e<t;e++){const r=n.points[e];this.points.push(r.clone())}return this}toJSON(){const n=super.toJSON();n.points=[];for(let e=0,t=this.points.length;e<t;e++){const r=this.points[e];n.points.push(r.toArray())}return n}fromJSON(n){super.fromJSON(n);this.points=[];for(let e=0,t=n.points.length;e<t;e++){const r=n.points[e];this.points.push((new Vector2).fromArray(r))}return this}}SplineCurve.prototype.isSplineCurve=true;var Curves=Object.freeze({__proto__:null,ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});class CurvePath extends Curve{constructor(){super();this.type="CurvePath";this.curves=[];this.autoClose=false}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0);const t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){this.curves.push(new LineCurve(t,e))}}getPoint(e){const t=e*this.getLength();const n=this.getCurveLengths();let r=0;while(r<n.length){if(n[r]>=t){const i=n[r]-t;const a=this.curves[r];const s=a.getLength();const o=s===0?0:1-i/s;return a.getPointAt(o)}r++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths}const n=[];let r=0;for(let e=0,t=this.curves.length;e<t;e++){r+=this.curves[e].getLength();n.push(r)}this.cacheLengths=n;return n}getSpacedPoints(t=40){const n=[];for(let e=0;e<=t;e++){n.push(this.getPoint(e/t))}if(this.autoClose){n.push(n[0])}return n}getPoints(n=12){const r=[];let i;for(let e=0,t=this.curves;e<t.length;e++){const a=t[e];const s=a&&a.isEllipseCurve?n*2:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?n*a.points.length:n;const o=a.getPoints(s);for(let e=0;e<o.length;e++){const c=o[e];if(i&&i.equals(c))continue;r.push(c);i=c}}if(this.autoClose&&r.length>1&&!r[r.length-1].equals(r[0])){r.push(r[0])}return r}copy(n){super.copy(n);this.curves=[];for(let e=0,t=n.curves.length;e<t;e++){const r=n.curves[e];this.curves.push(r.clone())}this.autoClose=n.autoClose;return this}toJSON(){const n=super.toJSON();n.autoClose=this.autoClose;n.curves=[];for(let e=0,t=this.curves.length;e<t;e++){const r=this.curves[e];n.curves.push(r.toJSON())}return n}fromJSON(n){super.fromJSON(n);this.autoClose=n.autoClose;this.curves=[];for(let e=0,t=n.curves.length;e<t;e++){const r=n.curves[e];this.curves.push((new Curves[r.type]).fromJSON(r))}return this}}class Path extends CurvePath{constructor(e){super();this.type="Path";this.currentPoint=new Vector2;if(e){this.setFromPoints(e)}}setFromPoints(n){this.moveTo(n[0].x,n[0].y);for(let e=1,t=n.length;e<t;e++){this.lineTo(n[e].x,n[e].y)}return this}moveTo(e,t){this.currentPoint.set(e,t);return this}lineTo(e,t){const n=new LineCurve(this.currentPoint.clone(),new Vector2(e,t));this.curves.push(n);this.currentPoint.set(e,t);return this}quadraticCurveTo(e,t,n,r){const i=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(e,t),new Vector2(n,r));this.curves.push(i);this.currentPoint.set(n,r);return this}bezierCurveTo(e,t,n,r,i,a){const s=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(e,t),new Vector2(n,r),new Vector2(i,a));this.curves.push(s);this.currentPoint.set(i,a);return this}splineThru(e){const t=[this.currentPoint.clone()].concat(e);const n=new SplineCurve(t);this.curves.push(n);this.currentPoint.copy(e[e.length-1]);return this}arc(e,t,n,r,i,a){const s=this.currentPoint.x;const o=this.currentPoint.y;this.absarc(e+s,t+o,n,r,i,a);return this}absarc(e,t,n,r,i,a){this.absellipse(e,t,n,n,r,i,a);return this}ellipse(e,t,n,r,i,a,s,o){const c=this.currentPoint.x;const l=this.currentPoint.y;this.absellipse(e+c,t+l,n,r,i,a,s,o);return this}absellipse(e,t,n,r,i,a,s,o){const c=new EllipseCurve(e,t,n,r,i,a,s,o);if(this.curves.length>0){const u=c.getPoint(0);if(!u.equals(this.currentPoint)){this.lineTo(u.x,u.y)}}this.curves.push(c);const l=c.getPoint(1);this.currentPoint.copy(l);return this}copy(e){super.copy(e);this.currentPoint.copy(e.currentPoint);return this}toJSON(){const e=super.toJSON();e.currentPoint=this.currentPoint.toArray();return e}fromJSON(e){super.fromJSON(e);this.currentPoint.fromArray(e.currentPoint);return this}}class Shape extends Path{constructor(e){super(e);this.uuid=MathUtils.generateUUID();this.type="Shape";this.holes=[]}getPointsHoles(n){const r=[];for(let e=0,t=this.holes.length;e<t;e++){r[e]=this.holes[e].getPoints(n)}return r}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(n){super.copy(n);this.holes=[];for(let e=0,t=n.holes.length;e<t;e++){const r=n.holes[e];this.holes.push(r.clone())}return this}toJSON(){const n=super.toJSON();n.uuid=this.uuid;n.holes=[];for(let e=0,t=this.holes.length;e<t;e++){const r=this.holes[e];n.holes.push(r.toJSON())}return n}fromJSON(n){super.fromJSON(n);this.uuid=n.uuid;this.holes=[];for(let e=0,t=n.holes.length;e<t;e++){const r=n.holes[e];this.holes.push((new Path).fromJSON(r))}return this}}class Light extends Object3D{constructor(e,t=1){super();this.type="Light";this.color=new Color(e);this.intensity=t}copy(e){super.copy(e);this.color.copy(e.color);this.intensity=e.intensity;return this}toJSON(e){const t=super.toJSON(e);t.object.color=this.color.getHex();t.object.intensity=this.intensity;if(this.groundColor!==undefined)t.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)t.object.distance=this.distance;if(this.angle!==undefined)t.object.angle=this.angle;if(this.decay!==undefined)t.object.decay=this.decay;if(this.penumbra!==undefined)t.object.penumbra=this.penumbra;if(this.shadow!==undefined)t.object.shadow=this.shadow.toJSON();return t}}Light.prototype.isLight=true;class HemisphereLight extends Light{constructor(e,t,n){super(e,n);this.type="HemisphereLight";this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.groundColor=new Color(t)}copy(e){Light.prototype.copy.call(this,e);this.groundColor.copy(e.groundColor);return this}}HemisphereLight.prototype.isHemisphereLight=true;const _projScreenMatrix=new Matrix4;const _lightPositionWorld=new Vector3;const _lookTarget=new Vector3;class LightShadow{constructor(e){this.camera=e;this.bias=0;this.normalBias=0;this.radius=1;this.mapSize=new Vector2(512,512);this.map=null;this.mapPass=null;this.matrix=new Matrix4;this.autoUpdate=true;this.needsUpdate=false;this._frustum=new Frustum;this._frameExtents=new Vector2(1,1);this._viewportCount=1;this._viewports=[new Vector4(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera;const n=this.matrix;_lightPositionWorld.setFromMatrixPosition(e.matrixWorld);t.position.copy(_lightPositionWorld);_lookTarget.setFromMatrixPosition(e.target.matrixWorld);t.lookAt(_lookTarget);t.updateMatrixWorld();_projScreenMatrix.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix);n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);n.multiply(t.projectionMatrix);n.multiply(t.matrixWorldInverse)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}copy(e){this.camera=e.camera.clone();this.bias=e.bias;this.radius=e.radius;this.mapSize.copy(e.mapSize);return this}clone(){return(new this.constructor).copy(this)}toJSON(){const e={};if(this.bias!==0)e.bias=this.bias;if(this.normalBias!==0)e.normalBias=this.normalBias;if(this.radius!==1)e.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)e.mapSize=this.mapSize.toArray();e.camera=this.camera.toJSON(false).object;delete e.camera.matrix;return e}}class SpotLightShadow extends LightShadow{constructor(){super(new PerspectiveCamera(50,1,.5,500));this.focus=1}updateMatrices(e){const t=this.camera;const n=MathUtils.RAD2DEG*2*e.angle*this.focus;const r=this.mapSize.width/this.mapSize.height;const i=e.distance||t.far;if(n!==t.fov||r!==t.aspect||i!==t.far){t.fov=n;t.aspect=r;t.far=i;t.updateProjectionMatrix()}super.updateMatrices(e)}}SpotLightShadow.prototype.isSpotLightShadow=true;class SpotLight extends Light{constructor(e,t,n=0,r=Math.PI/3,i=0,a=1){super(e,t);this.type="SpotLight";this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D;this.distance=n;this.angle=r;this.penumbra=i;this.decay=a;this.shadow=new SpotLightShadow}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}copy(e){super.copy(e);this.distance=e.distance;this.angle=e.angle;this.penumbra=e.penumbra;this.decay=e.decay;this.target=e.target.clone();this.shadow=e.shadow.clone();return this}}SpotLight.prototype.isSpotLight=true;const _projScreenMatrix$1=new Matrix4;const _lightPositionWorld$1=new Vector3;const _lookTarget$1=new Vector3;class PointLightShadow extends LightShadow{constructor(){super(new PerspectiveCamera(90,1,.5,500));this._frameExtents=new Vector2(4,2);this._viewportCount=6;this._viewports=[new Vector4(2,1,1,1),new Vector4(0,1,1,1),new Vector4(3,1,1,1),new Vector4(1,1,1,1),new Vector4(3,0,1,1),new Vector4(1,0,1,1)];this._cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)];this._cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera;const r=this.matrix;_lightPositionWorld$1.setFromMatrixPosition(e.matrixWorld);n.position.copy(_lightPositionWorld$1);_lookTarget$1.copy(n.position);_lookTarget$1.add(this._cubeDirections[t]);n.up.copy(this._cubeUps[t]);n.lookAt(_lookTarget$1);n.updateMatrixWorld();r.makeTranslation(-_lightPositionWorld$1.x,-_lightPositionWorld$1.y,-_lightPositionWorld$1.z);_projScreenMatrix$1.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix$1)}}PointLightShadow.prototype.isPointLightShadow=true;class PointLight extends Light{constructor(e,t,n=0,r=1){super(e,t);this.type="PointLight";this.distance=n;this.decay=r;this.shadow=new PointLightShadow}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}copy(e){super.copy(e);this.distance=e.distance;this.decay=e.decay;this.shadow=e.shadow.clone();return this}}PointLight.prototype.isPointLight=true;class OrthographicCamera extends Camera{constructor(e=-1,t=1,n=1,r=-1,i=.1,a=2e3){super();this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=e;this.right=t;this.top=n;this.bottom=r;this.near=i;this.far=a;this.updateProjectionMatrix()}copy(e,t){super.copy(e,t);this.left=e.left;this.right=e.right;this.top=e.top;this.bottom=e.bottom;this.near=e.near;this.far=e.far;this.zoom=e.zoom;this.view=e.view===null?null:Object.assign({},e.view);return this}setViewOffset(e,t,n,r,i,a){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=r;this.view.width=i;this.view.height=a;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom);const t=(this.top-this.bottom)/(2*this.zoom);const n=(this.right+this.left)/2;const r=(this.top+this.bottom)/2;let i=n-e;let a=n+e;let s=r+t;let o=r-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom;const l=(this.top-this.bottom)/this.view.fullHeight/this.zoom;i+=c*this.view.offsetX;a=i+c*this.view.width;s-=l*this.view.offsetY;o=s-l*this.view.height}this.projectionMatrix.makeOrthographic(i,a,s,o,this.near,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=Object3D.prototype.toJSON.call(this,e);t.object.zoom=this.zoom;t.object.left=this.left;t.object.right=this.right;t.object.top=this.top;t.object.bottom=this.bottom;t.object.near=this.near;t.object.far=this.far;if(this.view!==null)t.object.view=Object.assign({},this.view);return t}}OrthographicCamera.prototype.isOrthographicCamera=true;class DirectionalLightShadow extends LightShadow{constructor(){super(new OrthographicCamera(-5,5,5,-5,.5,500))}}DirectionalLightShadow.prototype.isDirectionalLightShadow=true;class DirectionalLight extends Light{constructor(e,t){super(e,t);this.type="DirectionalLight";this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D;this.shadow=new DirectionalLightShadow}copy(e){super.copy(e);this.target=e.target.clone();this.shadow=e.shadow.clone();return this}}DirectionalLight.prototype.isDirectionalLight=true;class AmbientLight extends Light{constructor(e,t){super(e,t);this.type="AmbientLight"}}AmbientLight.prototype.isAmbientLight=true;class RectAreaLight extends Light{constructor(e,t,n=10,r=10){super(e,t);this.type="RectAreaLight";this.width=n;this.height=r}copy(e){super.copy(e);this.width=e.width;this.height=e.height;return this}toJSON(e){const t=super.toJSON(e);t.object.width=this.width;t.object.height=this.height;return t}}RectAreaLight.prototype.isRectAreaLight=true;class SphericalHarmonics3{constructor(){this.coefficients=[];for(let e=0;e<9;e++){this.coefficients.push(new Vector3)}}set(t){for(let e=0;e<9;e++){this.coefficients[e].copy(t[e])}return this}zero(){for(let e=0;e<9;e++){this.coefficients[e].set(0,0,0)}return this}getAt(e,t){const n=e.x,r=e.y,i=e.z;const a=this.coefficients;t.copy(a[0]).multiplyScalar(.282095);t.addScaledVector(a[1],.488603*r);t.addScaledVector(a[2],.488603*i);t.addScaledVector(a[3],.488603*n);t.addScaledVector(a[4],1.092548*(n*r));t.addScaledVector(a[5],1.092548*(r*i));t.addScaledVector(a[6],.315392*(3*i*i-1));t.addScaledVector(a[7],1.092548*(n*i));t.addScaledVector(a[8],.546274*(n*n-r*r));return t}getIrradianceAt(e,t){const n=e.x,r=e.y,i=e.z;const a=this.coefficients;t.copy(a[0]).multiplyScalar(.886227);t.addScaledVector(a[1],2*.511664*r);t.addScaledVector(a[2],2*.511664*i);t.addScaledVector(a[3],2*.511664*n);t.addScaledVector(a[4],2*.429043*n*r);t.addScaledVector(a[5],2*.429043*r*i);t.addScaledVector(a[6],.743125*i*i-.247708);t.addScaledVector(a[7],2*.429043*n*i);t.addScaledVector(a[8],.429043*(n*n-r*r));return t}add(t){for(let e=0;e<9;e++){this.coefficients[e].add(t.coefficients[e])}return this}addScaledSH(t,n){for(let e=0;e<9;e++){this.coefficients[e].addScaledVector(t.coefficients[e],n)}return this}scale(t){for(let e=0;e<9;e++){this.coefficients[e].multiplyScalar(t)}return this}lerp(t,n){for(let e=0;e<9;e++){this.coefficients[e].lerp(t.coefficients[e],n)}return this}equals(t){for(let e=0;e<9;e++){if(!this.coefficients[e].equals(t.coefficients[e])){return false}}return true}copy(e){return this.set(e.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,n=0){const r=this.coefficients;for(let e=0;e<9;e++){r[e].fromArray(t,n+e*3)}return this}toArray(t=[],n=0){const r=this.coefficients;for(let e=0;e<9;e++){r[e].toArray(t,n+e*3)}return t}static getBasisAt(e,t){const n=e.x,r=e.y,i=e.z;t[0]=.282095;t[1]=.488603*r;t[2]=.488603*i;t[3]=.488603*n;t[4]=1.092548*n*r;t[5]=1.092548*r*i;t[6]=.315392*(3*i*i-1);t[7]=1.092548*n*i;t[8]=.546274*(n*n-r*r)}}SphericalHarmonics3.prototype.isSphericalHarmonics3=true;class LightProbe extends Light{constructor(e=new SphericalHarmonics3,t=1){super(undefined,t);this.sh=e}copy(e){super.copy(e);this.sh.copy(e.sh);return this}fromJSON(e){this.intensity=e.intensity;this.sh.fromArray(e.sh);return this}toJSON(e){const t=super.toJSON(e);t.object.sh=this.sh.toArray();return t}}LightProbe.prototype.isLightProbe=true;class MaterialLoader extends Loader{constructor(e){super(e);this.textures={}}load(t,n,e,r){const i=this;const a=new FileLoader(i.manager);a.setPath(i.path);a.setRequestHeader(i.requestHeader);a.setWithCredentials(i.withCredentials);a.load(t,function(e){try{n(i.parse(JSON.parse(e)))}catch(e){if(r){r(e)}else{console.error(e)}i.manager.itemError(t)}},e,r)}parse(t){const n=this.textures;function e(e){if(n[e]===undefined){console.warn("THREE.MaterialLoader: Undefined texture",e)}return n[e]}const r=new Materials[t.type];if(t.uuid!==undefined)r.uuid=t.uuid;if(t.name!==undefined)r.name=t.name;if(t.color!==undefined&&r.color!==undefined)r.color.setHex(t.color);if(t.roughness!==undefined)r.roughness=t.roughness;if(t.metalness!==undefined)r.metalness=t.metalness;if(t.sheen!==undefined)r.sheen=(new Color).setHex(t.sheen);if(t.emissive!==undefined&&r.emissive!==undefined)r.emissive.setHex(t.emissive);if(t.specular!==undefined&&r.specular!==undefined)r.specular.setHex(t.specular);if(t.shininess!==undefined)r.shininess=t.shininess;if(t.clearcoat!==undefined)r.clearcoat=t.clearcoat;if(t.clearcoatRoughness!==undefined)r.clearcoatRoughness=t.clearcoatRoughness;if(t.fog!==undefined)r.fog=t.fog;if(t.flatShading!==undefined)r.flatShading=t.flatShading;if(t.blending!==undefined)r.blending=t.blending;if(t.combine!==undefined)r.combine=t.combine;if(t.side!==undefined)r.side=t.side;if(t.opacity!==undefined)r.opacity=t.opacity;if(t.transparent!==undefined)r.transparent=t.transparent;if(t.alphaTest!==undefined)r.alphaTest=t.alphaTest;if(t.depthTest!==undefined)r.depthTest=t.depthTest;if(t.depthWrite!==undefined)r.depthWrite=t.depthWrite;if(t.colorWrite!==undefined)r.colorWrite=t.colorWrite;if(t.stencilWrite!==undefined)r.stencilWrite=t.stencilWrite;if(t.stencilWriteMask!==undefined)r.stencilWriteMask=t.stencilWriteMask;if(t.stencilFunc!==undefined)r.stencilFunc=t.stencilFunc;if(t.stencilRef!==undefined)r.stencilRef=t.stencilRef;if(t.stencilFuncMask!==undefined)r.stencilFuncMask=t.stencilFuncMask;if(t.stencilFail!==undefined)r.stencilFail=t.stencilFail;if(t.stencilZFail!==undefined)r.stencilZFail=t.stencilZFail;if(t.stencilZPass!==undefined)r.stencilZPass=t.stencilZPass;if(t.wireframe!==undefined)r.wireframe=t.wireframe;if(t.wireframeLinewidth!==undefined)r.wireframeLinewidth=t.wireframeLinewidth;if(t.wireframeLinecap!==undefined)r.wireframeLinecap=t.wireframeLinecap;if(t.wireframeLinejoin!==undefined)r.wireframeLinejoin=t.wireframeLinejoin;if(t.rotation!==undefined)r.rotation=t.rotation;if(t.linewidth!==1)r.linewidth=t.linewidth;if(t.dashSize!==undefined)r.dashSize=t.dashSize;if(t.gapSize!==undefined)r.gapSize=t.gapSize;if(t.scale!==undefined)r.scale=t.scale;if(t.polygonOffset!==undefined)r.polygonOffset=t.polygonOffset;if(t.polygonOffsetFactor!==undefined)r.polygonOffsetFactor=t.polygonOffsetFactor;if(t.polygonOffsetUnits!==undefined)r.polygonOffsetUnits=t.polygonOffsetUnits;if(t.skinning!==undefined)r.skinning=t.skinning;if(t.morphTargets!==undefined)r.morphTargets=t.morphTargets;if(t.morphNormals!==undefined)r.morphNormals=t.morphNormals;if(t.dithering!==undefined)r.dithering=t.dithering;if(t.vertexTangents!==undefined)r.vertexTangents=t.vertexTangents;if(t.visible!==undefined)r.visible=t.visible;if(t.toneMapped!==undefined)r.toneMapped=t.toneMapped;if(t.userData!==undefined)r.userData=t.userData;if(t.vertexColors!==undefined){if(typeof t.vertexColors==="number"){r.vertexColors=t.vertexColors>0?true:false}else{r.vertexColors=t.vertexColors}}if(t.uniforms!==undefined){for(const i in t.uniforms){const a=t.uniforms[i];r.uniforms[i]={};switch(a.type){case"t":r.uniforms[i].value=e(a.value);break;case"c":r.uniforms[i].value=(new Color).setHex(a.value);break;case"v2":r.uniforms[i].value=(new Vector2).fromArray(a.value);break;case"v3":r.uniforms[i].value=(new Vector3).fromArray(a.value);break;case"v4":r.uniforms[i].value=(new Vector4).fromArray(a.value);break;case"m3":r.uniforms[i].value=(new Matrix3).fromArray(a.value);break;case"m4":r.uniforms[i].value=(new Matrix4).fromArray(a.value);break;default:r.uniforms[i].value=a.value}}}if(t.defines!==undefined)r.defines=t.defines;if(t.vertexShader!==undefined)r.vertexShader=t.vertexShader;if(t.fragmentShader!==undefined)r.fragmentShader=t.fragmentShader;if(t.extensions!==undefined){for(const s in t.extensions){r.extensions[s]=t.extensions[s]}}if(t.shading!==undefined)r.flatShading=t.shading===1;if(t.size!==undefined)r.size=t.size;if(t.sizeAttenuation!==undefined)r.sizeAttenuation=t.sizeAttenuation;if(t.map!==undefined)r.map=e(t.map);if(t.matcap!==undefined)r.matcap=e(t.matcap);if(t.alphaMap!==undefined)r.alphaMap=e(t.alphaMap);if(t.bumpMap!==undefined)r.bumpMap=e(t.bumpMap);if(t.bumpScale!==undefined)r.bumpScale=t.bumpScale;if(t.normalMap!==undefined)r.normalMap=e(t.normalMap);if(t.normalMapType!==undefined)r.normalMapType=t.normalMapType;if(t.normalScale!==undefined){let e=t.normalScale;if(Array.isArray(e)===false){e=[e,e]}r.normalScale=(new Vector2).fromArray(e)}if(t.displacementMap!==undefined)r.displacementMap=e(t.displacementMap);if(t.displacementScale!==undefined)r.displacementScale=t.displacementScale;if(t.displacementBias!==undefined)r.displacementBias=t.displacementBias;if(t.roughnessMap!==undefined)r.roughnessMap=e(t.roughnessMap);if(t.metalnessMap!==undefined)r.metalnessMap=e(t.metalnessMap);if(t.emissiveMap!==undefined)r.emissiveMap=e(t.emissiveMap);if(t.emissiveIntensity!==undefined)r.emissiveIntensity=t.emissiveIntensity;if(t.specularMap!==undefined)r.specularMap=e(t.specularMap);if(t.envMap!==undefined)r.envMap=e(t.envMap);if(t.envMapIntensity!==undefined)r.envMapIntensity=t.envMapIntensity;if(t.reflectivity!==undefined)r.reflectivity=t.reflectivity;if(t.refractionRatio!==undefined)r.refractionRatio=t.refractionRatio;if(t.lightMap!==undefined)r.lightMap=e(t.lightMap);if(t.lightMapIntensity!==undefined)r.lightMapIntensity=t.lightMapIntensity;if(t.aoMap!==undefined)r.aoMap=e(t.aoMap);if(t.aoMapIntensity!==undefined)r.aoMapIntensity=t.aoMapIntensity;if(t.gradientMap!==undefined)r.gradientMap=e(t.gradientMap);if(t.clearcoatMap!==undefined)r.clearcoatMap=e(t.clearcoatMap);if(t.clearcoatRoughnessMap!==undefined)r.clearcoatRoughnessMap=e(t.clearcoatRoughnessMap);if(t.clearcoatNormalMap!==undefined)r.clearcoatNormalMap=e(t.clearcoatNormalMap);if(t.clearcoatNormalScale!==undefined)r.clearcoatNormalScale=(new Vector2).fromArray(t.clearcoatNormalScale);if(t.transmission!==undefined)r.transmission=t.transmission;if(t.transmissionMap!==undefined)r.transmissionMap=e(t.transmissionMap);return r}setTextures(e){this.textures=e;return this}}const LoaderUtils={decodeText:function(n){if(typeof TextDecoder!=="undefined"){return(new TextDecoder).decode(n)}let r="";for(let e=0,t=n.length;e<t;e++){r+=String.fromCharCode(n[e])}try{return decodeURIComponent(escape(r))}catch(e){return r}},extractUrlBase:function(e){const t=e.lastIndexOf("/");if(t===-1)return"./";return e.substr(0,t+1)}};function InstancedBufferGeometry(){BufferGeometry.call(this);this.type="InstancedBufferGeometry";this.instanceCount=Infinity}InstancedBufferGeometry.prototype=Object.assign(Object.create(BufferGeometry.prototype),{constructor:InstancedBufferGeometry,isInstancedBufferGeometry:true,copy:function(e){BufferGeometry.prototype.copy.call(this,e);this.instanceCount=e.instanceCount;return this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){const e=BufferGeometry.prototype.toJSON.call(this);e.instanceCount=this.instanceCount;e.isInstancedBufferGeometry=true;return e}});function InstancedBufferAttribute(e,t,n,r){if(typeof n==="number"){r=n;n=false;console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")}BufferAttribute.call(this,e,t,n);this.meshPerAttribute=r||1}InstancedBufferAttribute.prototype=Object.assign(Object.create(BufferAttribute.prototype),{constructor:InstancedBufferAttribute,isInstancedBufferAttribute:true,copy:function(e){BufferAttribute.prototype.copy.call(this,e);this.meshPerAttribute=e.meshPerAttribute;return this},toJSON:function(){const e=BufferAttribute.prototype.toJSON.call(this);e.meshPerAttribute=this.meshPerAttribute;e.isInstancedBufferAttribute=true;return e}});class BufferGeometryLoader extends Loader{constructor(e){super(e)}load(t,n,e,r){const i=this;const a=new FileLoader(i.manager);a.setPath(i.path);a.setRequestHeader(i.requestHeader);a.setWithCredentials(i.withCredentials);a.load(t,function(e){try{n(i.parse(JSON.parse(e)))}catch(e){if(r){r(e)}else{console.error(e)}i.manager.itemError(t)}},e,r)}parse(n){const o={};const a={};function r(e,t){if(o[t]!==undefined)return o[t];const n=e.interleavedBuffers;const r=n[t];const i=c(e,r.buffer);const a=getTypedArray(r.type,i);const s=new InterleavedBuffer(a,r.stride);s.uuid=r.uuid;o[t]=s;return s}function c(e,t){if(a[t]!==undefined)return a[t];const n=e.arrayBuffers;const r=n[t];const i=new Uint32Array(r).buffer;a[t]=i;return i}const i=n.isInstancedBufferGeometry?new InstancedBufferGeometry:new BufferGeometry;const e=n.data.index;if(e!==undefined){const d=getTypedArray(e.type,e.array);i.setIndex(new BufferAttribute(d,1))}const t=n.data.attributes;for(const f in t){const p=t[f];let e;if(p.isInterleavedBufferAttribute){const m=r(n.data,p.data);e=new InterleavedBufferAttribute(m,p.itemSize,p.offset,p.normalized)}else{const d=getTypedArray(p.type,p.array);const g=p.isInstancedBufferAttribute?InstancedBufferAttribute:BufferAttribute;e=new g(d,p.itemSize,p.normalized)}if(p.name!==undefined)e.name=p.name;i.setAttribute(f,e)}const s=n.data.morphAttributes;if(s){for(const f in s){const _=s[f];const y=[];for(let t=0,e=_.length;t<e;t++){const p=_[t];let e;if(p.isInterleavedBufferAttribute){const m=r(n.data,p.data);e=new InterleavedBufferAttribute(m,p.itemSize,p.offset,p.normalized)}else{const d=getTypedArray(p.type,p.array);e=new BufferAttribute(d,p.itemSize,p.normalized)}if(p.name!==undefined)e.name=p.name;y.push(e)}i.morphAttributes[f]=y}}const l=n.data.morphTargetsRelative;if(l){i.morphTargetsRelative=true}const u=n.data.groups||n.data.drawcalls||n.data.offsets;if(u!==undefined){for(let e=0,t=u.length;e!==t;++e){const v=u[e];i.addGroup(v.start,v.count,v.materialIndex)}}const h=n.data.boundingSphere;if(h!==undefined){const x=new Vector3;if(h.center!==undefined){x.fromArray(h.center)}i.boundingSphere=new Sphere(x,h.radius)}if(n.name)i.name=n.name;if(n.userData)i.userData=n.userData;return i}}class ObjectLoader extends Loader{constructor(e){super(e)}load(r,i,e,a){const s=this;const t=this.path===""?LoaderUtils.extractUrlBase(r):this.path;this.resourcePath=this.resourcePath||t;const n=new FileLoader(this.manager);n.setPath(this.path);n.setRequestHeader(this.requestHeader);n.setWithCredentials(this.withCredentials);n.load(r,function(e){let t=null;try{t=JSON.parse(e)}catch(e){if(a!==undefined)a(e);console.error("THREE:ObjectLoader: Can't parse "+r+".",e.message);return}const n=t.metadata;if(n===undefined||n.type===undefined||n.type.toLowerCase()==="geometry"){console.error("THREE.ObjectLoader: Can't load "+r);return}s.parse(t,i)},e,a)}parse(e,t){const n=this.parseAnimations(e.animations);const r=this.parseShapes(e.shapes);const i=this.parseGeometries(e.geometries,r);const a=this.parseImages(e.images,function(){if(t!==undefined)t(c)});const s=this.parseTextures(e.textures,a);const o=this.parseMaterials(e.materials,s);const c=this.parseObject(e.object,i,o,n);const l=this.parseSkeletons(e.skeletons,c);this.bindSkeletons(c,l);if(t!==undefined){let e=false;for(const u in a){if(a[u]instanceof HTMLImageElement){e=true;break}}if(e===false)t(c)}return c}parseShapes(n){const r={};if(n!==undefined){for(let e=0,t=n.length;e<t;e++){const i=(new Shape).fromJSON(n[e]);r[i.uuid]=i}}return r}parseSkeletons(n,e){const r={};const i={};e.traverse(function(e){if(e.isBone)i[e.uuid]=e});if(n!==undefined){for(let e=0,t=n.length;e<t;e++){const a=(new Skeleton).fromJSON(n[e],i);r[a.uuid]=a}}return r}parseGeometries(n,r){const i={};let a;if(n!==undefined){const s=new BufferGeometryLoader;for(let t=0,e=n.length;t<e;t++){let e;const o=n[t];switch(o.type){case"PlaneGeometry":case"PlaneBufferGeometry":e=new Geometries[o.type](o.width,o.height,o.widthSegments,o.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":e=new Geometries[o.type](o.width,o.height,o.depth,o.widthSegments,o.heightSegments,o.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":e=new Geometries[o.type](o.radius,o.segments,o.thetaStart,o.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":e=new Geometries[o.type](o.radiusTop,o.radiusBottom,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":e=new Geometries[o.type](o.radius,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":e=new Geometries[o.type](o.radius,o.widthSegments,o.heightSegments,o.phiStart,o.phiLength,o.thetaStart,o.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":e=new Geometries[o.type](o.radius,o.detail);break;case"RingGeometry":case"RingBufferGeometry":e=new Geometries[o.type](o.innerRadius,o.outerRadius,o.thetaSegments,o.phiSegments,o.thetaStart,o.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":e=new Geometries[o.type](o.radius,o.tube,o.radialSegments,o.tubularSegments,o.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":e=new Geometries[o.type](o.radius,o.tube,o.tubularSegments,o.radialSegments,o.p,o.q);break;case"TubeGeometry":case"TubeBufferGeometry":e=new Geometries[o.type]((new Curves[o.path.type]).fromJSON(o.path),o.tubularSegments,o.radius,o.radialSegments,o.closed);break;case"LatheGeometry":case"LatheBufferGeometry":e=new Geometries[o.type](o.points,o.segments,o.phiStart,o.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":e=new Geometries[o.type](o.vertices,o.indices,o.radius,o.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":a=[];for(let e=0,t=o.shapes.length;e<t;e++){const l=r[o.shapes[e]];a.push(l)}e=new Geometries[o.type](a,o.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":a=[];for(let e=0,t=o.shapes.length;e<t;e++){const l=r[o.shapes[e]];a.push(l)}const c=o.options.extrudePath;if(c!==undefined){o.options.extrudePath=(new Curves[c.type]).fromJSON(c)}e=new Geometries[o.type](a,o.options);break;case"BufferGeometry":case"InstancedBufferGeometry":e=s.parse(o);break;case"Geometry":console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+o.type+'"');continue}e.uuid=o.uuid;if(o.name!==undefined)e.name=o.name;if(e.isBufferGeometry===true&&o.userData!==undefined)e.userData=o.userData;i[o.uuid]=e}}return i}parseMaterials(n,e){const r={};const i={};if(n!==undefined){const a=new MaterialLoader;a.setTextures(e);for(let e=0,t=n.length;e<t;e++){const s=n[e];if(s.type==="MultiMaterial"){const o=[];for(let e=0;e<s.materials.length;e++){const c=s.materials[e];if(r[c.uuid]===undefined){r[c.uuid]=a.parse(c)}o.push(r[c.uuid])}i[s.uuid]=o}else{if(r[s.uuid]===undefined){r[s.uuid]=a.parse(s)}i[s.uuid]=r[s.uuid]}}}return i}parseAnimations(t){const n={};if(t!==undefined){for(let e=0;e<t.length;e++){const r=t[e];const i=AnimationClip.parse(r);n[i.uuid]=i}}return n}parseImages(n,e){const r=this;const i={};let t;function a(e){r.manager.itemStart(e);return t.load(e,function(){r.manager.itemEnd(e)},undefined,function(){r.manager.itemError(e);r.manager.itemEnd(e)})}function s(e){if(typeof e==="string"){const t=e;const n=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(t)?t:r.resourcePath+t;return a(n)}else{if(e.data){return{data:getTypedArray(e.type,e.data),width:e.width,height:e.height}}else{return null}}}if(n!==undefined&&n.length>0){const o=new LoadingManager(e);t=new ImageLoader(o);t.setCrossOrigin(this.crossOrigin);for(let e=0,t=n.length;e<t;e++){const c=n[e];const l=c.url;if(Array.isArray(l)){i[c.uuid]=[];for(let e=0,t=l.length;e<t;e++){const u=l[e];const h=s(u);if(h!==null){if(h instanceof HTMLImageElement){i[c.uuid].push(h)}else{i[c.uuid].push(new DataTexture(h.data,h.width,h.height))}}}}else{const h=s(c.url);if(h!==null){i[c.uuid]=h}}}}return i}parseTextures(n,r){function i(e,t){if(typeof e==="number")return e;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e);return t[e]}const a={};if(n!==undefined){for(let t=0,e=n.length;t<e;t++){const s=n[t];if(s.image===undefined){console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid)}if(r[s.image]===undefined){console.warn("THREE.ObjectLoader: Undefined image",s.image)}let e;const o=r[s.image];if(Array.isArray(o)){e=new CubeTexture(o);if(o.length===6)e.needsUpdate=true}else{if(o&&o.data){e=new DataTexture(o.data,o.width,o.height)}else{e=new Texture(o)}if(o)e.needsUpdate=true}e.uuid=s.uuid;if(s.name!==undefined)e.name=s.name;if(s.mapping!==undefined)e.mapping=i(s.mapping,TEXTURE_MAPPING);if(s.offset!==undefined)e.offset.fromArray(s.offset);if(s.repeat!==undefined)e.repeat.fromArray(s.repeat);if(s.center!==undefined)e.center.fromArray(s.center);if(s.rotation!==undefined)e.rotation=s.rotation;if(s.wrap!==undefined){e.wrapS=i(s.wrap[0],TEXTURE_WRAPPING);e.wrapT=i(s.wrap[1],TEXTURE_WRAPPING)}if(s.format!==undefined)e.format=s.format;if(s.type!==undefined)e.type=s.type;if(s.encoding!==undefined)e.encoding=s.encoding;if(s.minFilter!==undefined)e.minFilter=i(s.minFilter,TEXTURE_FILTER);if(s.magFilter!==undefined)e.magFilter=i(s.magFilter,TEXTURE_FILTER);if(s.anisotropy!==undefined)e.anisotropy=s.anisotropy;if(s.flipY!==undefined)e.flipY=s.flipY;if(s.premultiplyAlpha!==undefined)e.premultiplyAlpha=s.premultiplyAlpha;if(s.unpackAlignment!==undefined)e.unpackAlignment=s.unpackAlignment;a[s.uuid]=e}}return a}parseObject(e,t,a,n){let r;function i(e){if(t[e]===undefined){console.warn("THREE.ObjectLoader: Undefined geometry",e)}return t[e]}function s(n){if(n===undefined)return undefined;if(Array.isArray(n)){const r=[];for(let e=0,t=n.length;e<t;e++){const i=n[e];if(a[i]===undefined){console.warn("THREE.ObjectLoader: Undefined material",i)}r.push(a[i])}return r}if(a[n]===undefined){console.warn("THREE.ObjectLoader: Undefined material",n)}return a[n]}let o,c;switch(e.type){case"Scene":r=new Scene;if(e.background!==undefined){if(Number.isInteger(e.background)){r.background=new Color(e.background)}}if(e.fog!==undefined){if(e.fog.type==="Fog"){r.fog=new Fog(e.fog.color,e.fog.near,e.fog.far)}else if(e.fog.type==="FogExp2"){r.fog=new FogExp2(e.fog.color,e.fog.density)}}break;case"PerspectiveCamera":r=new PerspectiveCamera(e.fov,e.aspect,e.near,e.far);if(e.focus!==undefined)r.focus=e.focus;if(e.zoom!==undefined)r.zoom=e.zoom;if(e.filmGauge!==undefined)r.filmGauge=e.filmGauge;if(e.filmOffset!==undefined)r.filmOffset=e.filmOffset;if(e.view!==undefined)r.view=Object.assign({},e.view);break;case"OrthographicCamera":r=new OrthographicCamera(e.left,e.right,e.top,e.bottom,e.near,e.far);if(e.zoom!==undefined)r.zoom=e.zoom;if(e.view!==undefined)r.view=Object.assign({},e.view);break;case"AmbientLight":r=new AmbientLight(e.color,e.intensity);break;case"DirectionalLight":r=new DirectionalLight(e.color,e.intensity);break;case"PointLight":r=new PointLight(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":r=new RectAreaLight(e.color,e.intensity,e.width,e.height);break;case"SpotLight":r=new SpotLight(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":r=new HemisphereLight(e.color,e.groundColor,e.intensity);break;case"LightProbe":r=(new LightProbe).fromJSON(e);break;case"SkinnedMesh":o=i(e.geometry);c=s(e.material);r=new SkinnedMesh(o,c);if(e.bindMode!==undefined)r.bindMode=e.bindMode;if(e.bindMatrix!==undefined)r.bindMatrix.fromArray(e.bindMatrix);if(e.skeleton!==undefined)r.skeleton=e.skeleton;break;case"Mesh":o=i(e.geometry);c=s(e.material);r=new Mesh(o,c);break;case"InstancedMesh":o=i(e.geometry);c=s(e.material);const l=e.count;const u=e.instanceMatrix;r=new InstancedMesh(o,c,l);r.instanceMatrix=new BufferAttribute(new Float32Array(u.array),16);break;case"LOD":r=new LOD;break;case"Line":r=new Line(i(e.geometry),s(e.material));break;case"LineLoop":r=new LineLoop(i(e.geometry),s(e.material));break;case"LineSegments":r=new LineSegments(i(e.geometry),s(e.material));break;case"PointCloud":case"Points":r=new Points(i(e.geometry),s(e.material));break;case"Sprite":r=new Sprite(s(e.material));break;case"Group":r=new Group;break;case"Bone":r=new Bone;break;default:r=new Object3D}r.uuid=e.uuid;if(e.name!==undefined)r.name=e.name;if(e.matrix!==undefined){r.matrix.fromArray(e.matrix);if(e.matrixAutoUpdate!==undefined)r.matrixAutoUpdate=e.matrixAutoUpdate;if(r.matrixAutoUpdate)r.matrix.decompose(r.position,r.quaternion,r.scale)}else{if(e.position!==undefined)r.position.fromArray(e.position);if(e.rotation!==undefined)r.rotation.fromArray(e.rotation);if(e.quaternion!==undefined)r.quaternion.fromArray(e.quaternion);if(e.scale!==undefined)r.scale.fromArray(e.scale)}if(e.castShadow!==undefined)r.castShadow=e.castShadow;if(e.receiveShadow!==undefined)r.receiveShadow=e.receiveShadow;if(e.shadow){if(e.shadow.bias!==undefined)r.shadow.bias=e.shadow.bias;if(e.shadow.normalBias!==undefined)r.shadow.normalBias=e.shadow.normalBias;if(e.shadow.radius!==undefined)r.shadow.radius=e.shadow.radius;if(e.shadow.mapSize!==undefined)r.shadow.mapSize.fromArray(e.shadow.mapSize);if(e.shadow.camera!==undefined)r.shadow.camera=this.parseObject(e.shadow.camera)}if(e.visible!==undefined)r.visible=e.visible;if(e.frustumCulled!==undefined)r.frustumCulled=e.frustumCulled;if(e.renderOrder!==undefined)r.renderOrder=e.renderOrder;if(e.userData!==undefined)r.userData=e.userData;if(e.layers!==undefined)r.layers.mask=e.layers;if(e.children!==undefined){const h=e.children;for(let e=0;e<h.length;e++){r.add(this.parseObject(h[e],t,a,n))}}if(e.animations!==undefined){const d=e.animations;for(let e=0;e<d.length;e++){const f=d[e];r.animations.push(n[f])}}if(e.type==="LOD"){if(e.autoUpdate!==undefined)r.autoUpdate=e.autoUpdate;const p=e.levels;for(let e=0;e<p.length;e++){const m=p[e];const g=r.getObjectByProperty("uuid",m.object);if(g!==undefined){r.addLevel(g,m.distance)}}}return r}bindSkeletons(e,n){if(Object.keys(n).length===0)return;e.traverse(function(e){if(e.isSkinnedMesh===true&&e.skeleton!==undefined){const t=n[e.skeleton];if(t===undefined){console.warn("THREE.ObjectLoader: No skeleton found with UUID:",e.skeleton)}else{e.bind(t,e.bindMatrix)}}})}setTexturePath(e){console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");return this.setResourcePath(e)}}const TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping};const TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping};const TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipmapNearestFilter:NearestMipmapNearestFilter,NearestMipmapLinearFilter:NearestMipmapLinearFilter,LinearFilter:LinearFilter,LinearMipmapNearestFilter:LinearMipmapNearestFilter,LinearMipmapLinearFilter:LinearMipmapLinearFilter};function ImageBitmapLoader(e){if(typeof createImageBitmap==="undefined"){console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.")}if(typeof fetch==="undefined"){console.warn("THREE.ImageBitmapLoader: fetch() not supported.")}Loader.call(this,e);this.options={premultiplyAlpha:"none"}}ImageBitmapLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:ImageBitmapLoader,isImageBitmapLoader:true,setOptions:function e(t){this.options=t;return this},load:function(t,n,e,r){if(t===undefined)t="";if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const i=this;const a=Cache.get(t);if(a!==undefined){i.manager.itemStart(t);setTimeout(function(){if(n)n(a);i.manager.itemEnd(t)},0);return a}const s={};s.credentials=this.crossOrigin==="anonymous"?"same-origin":"include";s.headers=this.requestHeader;fetch(t,s).then(function(e){return e.blob()}).then(function(e){return createImageBitmap(e,Object.assign(i.options,{colorSpaceConversion:"none"}))}).then(function(e){Cache.add(t,e);if(n)n(e);i.manager.itemEnd(t)}).catch(function(e){if(r)r(e);i.manager.itemError(t);i.manager.itemEnd(t)});i.manager.itemStart(t)}});class ShapePath{constructor(){this.type="ShapePath";this.color=new Color;this.subPaths=[];this.currentPath=null}moveTo(e,t){this.currentPath=new Path;this.subPaths.push(this.currentPath);this.currentPath.moveTo(e,t);return this}lineTo(e,t){this.currentPath.lineTo(e,t);return this}quadraticCurveTo(e,t,n,r){this.currentPath.quadraticCurveTo(e,t,n,r);return this}bezierCurveTo(e,t,n,r,i,a){this.currentPath.bezierCurveTo(e,t,n,r,i,a);return this}splineThru(e){this.currentPath.splineThru(e);return this}toShapes(n,e){function t(r){const i=[];for(let n=0,e=r.length;n<e;n++){const e=r[n];const t=new Shape;t.curves=e.curves;i.push(t)}return i}function a(s,o){const e=o.length;let c=false;for(let i=e-1,a=0;a<e;i=a++){let e=o[i];let t=o[a];let n=t.x-e.x;let r=t.y-e.y;if(Math.abs(r)>Number.EPSILON){if(r<0){e=o[a];n=-n;t=o[i];r=-r}if(s.y<e.y||s.y>t.y)continue;if(s.y===e.y){if(s.x===e.x)return true}else{const l=r*(s.x-e.x)-n*(s.y-e.y);if(l===0)return true;if(l<0)continue;c=!c}}else{if(s.y!==e.y)continue;if(t.x<=s.x&&s.x<=e.x||e.x<=s.x&&s.x<=t.x)return true}}return c}const r=ShapeUtils.isClockWise;const i=this.subPaths;if(i.length===0)return[];if(e===true)return t(i);let s,o,c;const l=[];if(i.length===1){o=i[0];c=new Shape;c.curves=o.curves;l.push(c);return l}let u=!r(i[0].getPoints());u=n?!u:u;const h=[];const d=[];let f=[];let p=0;let m;d[p]=undefined;f[p]=[];for(let e=0,t=i.length;e<t;e++){o=i[e];m=o.getPoints();s=r(m);s=n?!s:s;if(s){if(!u&&d[p])p++;d[p]={s:new Shape,p:m};d[p].s.curves=o.curves;if(u)p++;f[p]=[]}else{f[p].push({h:o,p:m[0]})}}if(!d[0])return t(i);if(d.length>1){let i=false;const _=[];for(let e=0,t=d.length;e<t;e++){h[e]=[]}for(let r=0,e=d.length;r<e;r++){const y=f[r];for(let n=0;n<y.length;n++){const v=y[n];let t=true;for(let e=0;e<d.length;e++){if(a(v.p,d[e].p)){if(r!==e)_.push({froms:r,tos:e,hole:n});if(t){t=false;h[e].push(v)}else{i=true}}}if(t){h[r].push(v)}}}if(_.length>0){if(!i)f=h}}let g;for(let e=0,t=d.length;e<t;e++){c=d[e].s;l.push(c);g=f[e];for(let e=0,t=g.length;e<t;e++){c.holes.push(g[e].h)}}return l}}class Font{constructor(e){this.type="Font";this.data=e}generateShapes(e,t=100){const n=[];const r=createPaths(e,t,this.data);for(let e=0,t=r.length;e<t;e++){Array.prototype.push.apply(n,r[e].toShapes())}return n}}function createPaths(e,t,n){const r=Array.from(e);const i=t/n.resolution;const a=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*i;const s=[];let o=0,c=0;for(let e=0;e<r.length;e++){const l=r[e];if(l==="\n"){o=0;c-=a}else{const u=createPath(l,i,o,c,n);o+=u.offsetX;s.push(u.path)}}return s}function createPath(e,n,r,i,t){const a=t.glyphs[e]||t.glyphs["?"];if(!a){console.error('THREE.Font: character "'+e+'" does not exists in font family '+t.familyName+".");return}const s=new ShapePath;let o,c,l,u,h,d,f,p;if(a.o){const m=a._cachedOutline||(a._cachedOutline=a.o.split(" "));for(let e=0,t=m.length;e<t;){const g=m[e++];switch(g){case"m":o=m[e++]*n+r;c=m[e++]*n+i;s.moveTo(o,c);break;case"l":o=m[e++]*n+r;c=m[e++]*n+i;s.lineTo(o,c);break;case"q":l=m[e++]*n+r;u=m[e++]*n+i;h=m[e++]*n+r;d=m[e++]*n+i;s.quadraticCurveTo(h,d,l,u);break;case"b":l=m[e++]*n+r;u=m[e++]*n+i;h=m[e++]*n+r;d=m[e++]*n+i;f=m[e++]*n+r;p=m[e++]*n+i;s.bezierCurveTo(h,d,f,p,l,u);break}}}return{offsetX:a.ha*n,path:s}}Font.prototype.isFont=true;class FontLoader extends Loader{constructor(e){super(e)}load(e,r,t,n){const i=this;const a=new FileLoader(this.manager);a.setPath(this.path);a.setRequestHeader(this.requestHeader);a.setWithCredentials(i.withCredentials);a.load(e,function(t){let n;try{n=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.");n=JSON.parse(t.substring(65,t.length-2))}const e=i.parse(n);if(r)r(e)},t,n)}parse(e){return new Font(e)}}let _context;const AudioContext={getContext:function(){if(_context===undefined){_context=new(window.AudioContext||window.webkitAudioContext)}return _context},setContext:function(e){_context=e}};class AudioLoader extends Loader{constructor(e){super(e)}load(r,i,e,a){const s=this;const t=new FileLoader(this.manager);t.setResponseType("arraybuffer");t.setPath(this.path);t.setRequestHeader(this.requestHeader);t.setWithCredentials(this.withCredentials);t.load(r,function(e){try{const t=e.slice(0);const n=AudioContext.getContext();n.decodeAudioData(t,function(e){i(e)})}catch(e){if(a){a(e)}else{console.error(e)}s.manager.itemError(r)}},e,a)}}class HemisphereLightProbe extends LightProbe{constructor(e,t,n=1){super(undefined,n);const r=(new Color).set(e);const i=(new Color).set(t);const a=new Vector3(r.r,r.g,r.b);const s=new Vector3(i.r,i.g,i.b);const o=Math.sqrt(Math.PI);const c=o*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(s).multiplyScalar(o);this.sh.coefficients[1].copy(a).sub(s).multiplyScalar(c)}}HemisphereLightProbe.prototype.isHemisphereLightProbe=true;class AmbientLightProbe extends LightProbe{constructor(e,t=1){super(undefined,t);const n=(new Color).set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}AmbientLightProbe.prototype.isAmbientLightProbe=true;const _eyeRight=new Matrix4;const _eyeLeft=new Matrix4;class StereoCamera{constructor(){this.type="StereoCamera";this.aspect=1;this.eyeSep=.064;this.cameraL=new PerspectiveCamera;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;this.cameraR=new PerspectiveCamera;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(n){const r=this._cache;const e=r.focus!==n.focus||r.fov!==n.fov||r.aspect!==n.aspect*this.aspect||r.near!==n.near||r.far!==n.far||r.zoom!==n.zoom||r.eyeSep!==this.eyeSep;if(e){r.focus=n.focus;r.fov=n.fov;r.aspect=n.aspect*this.aspect;r.near=n.near;r.far=n.far;r.zoom=n.zoom;r.eyeSep=this.eyeSep;const i=n.projectionMatrix.clone();const a=r.eyeSep/2;const s=a*r.near/r.focus;const o=r.near*Math.tan(MathUtils.DEG2RAD*r.fov*.5)/r.zoom;let e,t;_eyeLeft.elements[12]=-a;_eyeRight.elements[12]=a;e=-o*r.aspect+s;t=o*r.aspect+s;i.elements[0]=2*r.near/(t-e);i.elements[8]=(t+e)/(t-e);this.cameraL.projectionMatrix.copy(i);e=-o*r.aspect-s;t=o*r.aspect-s;i.elements[0]=2*r.near/(t-e);i.elements[8]=(t+e)/(t-e);this.cameraR.projectionMatrix.copy(i)}this.cameraL.matrixWorld.copy(n.matrixWorld).multiply(_eyeLeft);this.cameraR.matrixWorld.copy(n.matrixWorld).multiply(_eyeRight)}}class Clock{constructor(e){this.autoStart=e!==undefined?e:true;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false}start(){this.startTime=now();this.oldTime=this.startTime;this.elapsedTime=0;this.running=true}stop(){this.getElapsedTime();this.running=false;this.autoStart=false}getElapsedTime(){this.getDelta();return this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running){this.start();return 0}if(this.running){const t=now();e=(t-this.oldTime)/1e3;this.oldTime=t;this.elapsedTime+=e}return e}}function now(){return(typeof performance==="undefined"?Date:performance).now()}const _position$2=new Vector3;const _quaternion$3=new Quaternion;const _scale$1=new Vector3;const _orientation=new Vector3;class AudioListener extends Object3D{constructor(){super();this.type="AudioListener";this.context=AudioContext.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null;this.timeDelta=0;this._clock=new Clock}getInput(){return this.gain}removeFilter(){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);this.gain.connect(this.context.destination);this.filter=null}return this}getFilter(){return this.filter}setFilter(e){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination)}else{this.gain.disconnect(this.context.destination)}this.filter=e;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01);return this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener;const n=this.up;this.timeDelta=this._clock.getDelta();this.matrixWorld.decompose(_position$2,_quaternion$3,_scale$1);_orientation.set(0,0,-1).applyQuaternion(_quaternion$3);if(t.positionX){const r=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(_position$2.x,r);t.positionY.linearRampToValueAtTime(_position$2.y,r);t.positionZ.linearRampToValueAtTime(_position$2.z,r);t.forwardX.linearRampToValueAtTime(_orientation.x,r);t.forwardY.linearRampToValueAtTime(_orientation.y,r);t.forwardZ.linearRampToValueAtTime(_orientation.z,r);t.upX.linearRampToValueAtTime(n.x,r);t.upY.linearRampToValueAtTime(n.y,r);t.upZ.linearRampToValueAtTime(n.z,r)}else{t.setPosition(_position$2.x,_position$2.y,_position$2.z);t.setOrientation(_orientation.x,_orientation.y,_orientation.z,n.x,n.y,n.z)}}}class Audio extends Object3D{constructor(e){super();this.type="Audio";this.listener=e;this.context=e.context;this.gain=this.context.createGain();this.gain.connect(e.getInput());this.autoplay=false;this.buffer=null;this.detune=0;this.loop=false;this.loopStart=0;this.loopEnd=0;this.offset=0;this.duration=undefined;this.playbackRate=1;this.isPlaying=false;this.hasPlaybackControl=true;this.source=null;this.sourceType="empty";this._startedAt=0;this._progress=0;this._connected=false;this.filters=[]}getOutput(){return this.gain}setNodeSource(e){this.hasPlaybackControl=false;this.sourceType="audioNode";this.source=e;this.connect();return this}setMediaElementSource(e){this.hasPlaybackControl=false;this.sourceType="mediaNode";this.source=this.context.createMediaElementSource(e);this.connect();return this}setMediaStreamSource(e){this.hasPlaybackControl=false;this.sourceType="mediaStreamNode";this.source=this.context.createMediaStreamSource(e);this.connect();return this}setBuffer(e){this.buffer=e;this.sourceType="buffer";if(this.autoplay)this.play();return this}play(e=0){if(this.isPlaying===true){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();t.buffer=this.buffer;t.loop=this.loop;t.loopStart=this.loopStart;t.loopEnd=this.loopEnd;t.onended=this.onEnded.bind(this);t.start(this._startedAt,this._progress+this.offset,this.duration);this.isPlaying=true;this.source=t;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect()}pause(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}if(this.isPlaying===true){this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate;if(this.loop===true){this._progress=this._progress%(this.duration||this.buffer.duration)}this.source.stop();this.source.onended=null;this.isPlaying=false}return this}stop(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._progress=0;this.source.stop();this.source.onended=null;this.isPlaying=false;return this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++){this.filters[e-1].connect(this.filters[e])}this.filters[this.filters.length-1].connect(this.getOutput())}else{this.source.connect(this.getOutput())}this._connected=true;return this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++){this.filters[e-1].disconnect(this.filters[e])}this.filters[this.filters.length-1].disconnect(this.getOutput())}else{this.source.disconnect(this.getOutput())}this._connected=false;return this}getFilters(){return this.filters}setFilters(e){if(!e)e=[];if(this._connected===true){this.disconnect();this.filters=e.slice();this.connect()}else{this.filters=e.slice()}return this}setDetune(e){this.detune=e;if(this.source.detune===undefined)return;if(this.isPlaying===true){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01)}return this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.playbackRate=e;if(this.isPlaying===true){this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01)}return this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=false}getLoop(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return false}return this.loop}setLoop(e){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.loop=e;if(this.isPlaying===true){this.source.loop=this.loop}return this}setLoopStart(e){this.loopStart=e;return this}setLoopEnd(e){this.loopEnd=e;return this}getVolume(){return this.gain.gain.value}setVolume(e){this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01);return this}}const _position$3=new Vector3;const _quaternion$4=new Quaternion;const _scale$2=new Vector3;const _orientation$1=new Vector3;class PositionalAudio extends Audio{constructor(e){super(e);this.panner=this.context.createPanner();this.panner.panningModel="HRTF";this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){this.panner.refDistance=e;return this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){this.panner.rolloffFactor=e;return this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){this.panner.distanceModel=e;return this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){this.panner.maxDistance=e;return this}setDirectionalCone(e,t,n){this.panner.coneInnerAngle=e;this.panner.coneOuterAngle=t;this.panner.coneOuterGain=n;return this}updateMatrixWorld(e){super.updateMatrixWorld(e);if(this.hasPlaybackControl===true&&this.isPlaying===false)return;this.matrixWorld.decompose(_position$3,_quaternion$4,_scale$2);_orientation$1.set(0,0,1).applyQuaternion(_quaternion$4);const t=this.panner;if(t.positionX){const n=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(_position$3.x,n);t.positionY.linearRampToValueAtTime(_position$3.y,n);t.positionZ.linearRampToValueAtTime(_position$3.z,n);t.orientationX.linearRampToValueAtTime(_orientation$1.x,n);t.orientationY.linearRampToValueAtTime(_orientation$1.y,n);t.orientationZ.linearRampToValueAtTime(_orientation$1.z,n)}else{t.setPosition(_position$3.x,_position$3.y,_position$3.z);t.setOrientation(_orientation$1.x,_orientation$1.y,_orientation$1.z)}}}class AudioAnalyser{constructor(e,t=2048){this.analyser=e.context.createAnalyser();this.analyser.fftSize=t;this.data=new Uint8Array(this.analyser.frequencyBinCount);e.getOutput().connect(this.analyser)}getFrequencyData(){this.analyser.getByteFrequencyData(this.data);return this.data}getAverageFrequency(){let t=0;const n=this.getFrequencyData();for(let e=0;e<n.length;e++){t+=n[e]}return t/n.length}}class PropertyMixer{constructor(e,t,n){this.binding=e;this.valueSize=n;let r,i,a;switch(t){case"quaternion":r=this._slerp;i=this._slerpAdditive;a=this._setAdditiveIdentityQuaternion;this.buffer=new Float64Array(n*6);this._workIndex=5;break;case"string":case"bool":r=this._select;i=this._select;a=this._setAdditiveIdentityOther;this.buffer=new Array(n*5);break;default:r=this._lerp;i=this._lerpAdditive;a=this._setAdditiveIdentityNumeric;this.buffer=new Float64Array(n*5)}this._mixBufferRegion=r;this._mixBufferRegionAdditive=i;this._setIdentity=a;this._origIndex=3;this._addIndex=4;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;this.useCount=0;this.referenceCount=0}accumulate(e,t){const n=this.buffer,r=this.valueSize,i=e*r+r;let a=this.cumulativeWeight;if(a===0){for(let e=0;e!==r;++e){n[i+e]=n[e]}a=t}else{a+=t;const s=t/a;this._mixBufferRegion(n,i,0,s,r)}this.cumulativeWeight=a}accumulateAdditive(e){const t=this.buffer,n=this.valueSize,r=n*this._addIndex;if(this.cumulativeWeightAdditive===0){this._setIdentity()}this._mixBufferRegionAdditive(t,r,0,e,n);this.cumulativeWeightAdditive+=e}apply(e){const n=this.valueSize,r=this.buffer,i=e*n+n,t=this.cumulativeWeight,a=this.cumulativeWeightAdditive,s=this.binding;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;if(t<1){const o=n*this._origIndex;this._mixBufferRegion(r,i,o,1-t,n)}if(a>0){this._mixBufferRegionAdditive(r,i,this._addIndex*n,1,n)}for(let e=n,t=n+n;e!==t;++e){if(r[e]!==r[e+n]){s.setValue(r,i);break}}}saveOriginalState(){const e=this.binding;const n=this.buffer,r=this.valueSize,i=r*this._origIndex;e.getValue(n,i);for(let e=r,t=i;e!==t;++e){n[e]=n[i+e%r]}this._setIdentity();this.cumulativeWeight=0;this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize;const n=t+this.valueSize;for(let e=t;e<n;e++){this.buffer[e]=0}}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric();this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize;const n=this._addIndex*this.valueSize;for(let e=0;e<this.valueSize;e++){this.buffer[n+e]=this.buffer[t+e]}}_select(t,n,r,e,i){if(e>=.5){for(let e=0;e!==i;++e){t[n+e]=t[r+e]}}}_slerp(e,t,n,r){Quaternion.slerpFlat(e,t,e,t,e,n,r)}_slerpAdditive(e,t,n,r,i){const a=this._workIndex*i;Quaternion.multiplyQuaternionsFlat(e,a,e,t,e,n);Quaternion.slerpFlat(e,t,e,t,e,a,r)}_lerp(t,n,r,i,a){const s=1-i;for(let e=0;e!==a;++e){const o=n+e;t[o]=t[o]*s+t[r+e]*i}}_lerpAdditive(t,n,r,i,a){for(let e=0;e!==a;++e){const s=n+e;t[s]=t[s]+t[r+e]*i}}}const _RESERVED_CHARS_RE="\\[\\]\\.:\\/";const _reservedRe=new RegExp("["+_RESERVED_CHARS_RE+"]","g");const _wordChar="[^"+_RESERVED_CHARS_RE+"]";const _wordCharOrDot="[^"+_RESERVED_CHARS_RE.replace("\\.","")+"]";const _directoryRe=/((?:WC+[\/:])*)/.source.replace("WC",_wordChar);const _nodeRe=/(WCOD+)?/.source.replace("WCOD",_wordCharOrDot);const _objectRe=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",_wordChar);const _propertyRe=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",_wordChar);const _trackRe=new RegExp(""+"^"+_directoryRe+_nodeRe+_objectRe+_propertyRe+"$");const _supportedObjectNames=["material","materials","bones"];function Composite(e,t,n){const r=n||PropertyBinding.parseTrackName(t);this._targetGroup=e;this._bindings=e.subscribe_(t,r)}Object.assign(Composite.prototype,{getValue:function(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,r=this._bindings[n];if(r!==undefined)r.getValue(e,t)},setValue:function(n,r){const i=this._bindings;for(let e=this._targetGroup.nCachedObjects_,t=i.length;e!==t;++e){i[e].setValue(n,r)}},bind:function(){const n=this._bindings;for(let e=this._targetGroup.nCachedObjects_,t=n.length;e!==t;++e){n[e].bind()}},unbind:function(){const n=this._bindings;for(let e=this._targetGroup.nCachedObjects_,t=n.length;e!==t;++e){n[e].unbind()}}});function PropertyBinding(e,t,n){this.path=t;this.parsedPath=n||PropertyBinding.parseTrackName(t);this.node=PropertyBinding.findNode(e,this.parsedPath.nodeName)||e;this.rootNode=e}Object.assign(PropertyBinding,{Composite:Composite,create:function(e,t,n){if(!(e&&e.isAnimationObjectGroup)){return new PropertyBinding(e,t,n)}else{return new PropertyBinding.Composite(e,t,n)}},sanitizeNodeName:function(e){return e.replace(/\s/g,"_").replace(_reservedRe,"")},parseTrackName:function(e){const t=_trackRe.exec(e);if(!t){throw new Error("PropertyBinding: Cannot parse trackName: "+e)}const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]};const r=n.nodeName&&n.nodeName.lastIndexOf(".");if(r!==undefined&&r!==-1){const i=n.nodeName.substring(r+1);if(_supportedObjectNames.indexOf(i)!==-1){n.nodeName=n.nodeName.substring(0,r);n.objectName=i}}if(n.propertyName===null||n.propertyName.length===0){throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e)}return n},findNode:function(e,i){if(!i||i===""||i==="."||i===-1||i===e.name||i===e.uuid){return e}if(e.skeleton){const t=e.skeleton.getBoneByName(i);if(t!==undefined){return t}}if(e.children){const a=function(t){for(let e=0;e<t.length;e++){const n=t[e];if(n.name===i||n.uuid===i){return n}const r=a(n.children);if(r)return r}return null};const n=a(e.children);if(n){return n}}return null}});Object.assign(PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function e(t,n){t[n]=this.node[this.propertyName]},function e(n,r){const i=this.resolvedProperty;for(let e=0,t=i.length;e!==t;++e){n[r++]=i[e]}},function e(t,n){t[n]=this.resolvedProperty[this.propertyIndex]},function e(t,n){this.resolvedProperty.toArray(t,n)}],SetterByBindingTypeAndVersioning:[[function e(t,n){this.targetObject[this.propertyName]=t[n]},function e(t,n){this.targetObject[this.propertyName]=t[n];this.targetObject.needsUpdate=true},function e(t,n){this.targetObject[this.propertyName]=t[n];this.targetObject.matrixWorldNeedsUpdate=true}],[function e(n,r){const i=this.resolvedProperty;for(let e=0,t=i.length;e!==t;++e){i[e]=n[r++]}},function e(n,r){const i=this.resolvedProperty;for(let e=0,t=i.length;e!==t;++e){i[e]=n[r++]}this.targetObject.needsUpdate=true},function e(n,r){const i=this.resolvedProperty;for(let e=0,t=i.length;e!==t;++e){i[e]=n[r++]}this.targetObject.matrixWorldNeedsUpdate=true}],[function e(t,n){this.resolvedProperty[this.propertyIndex]=t[n]},function e(t,n){this.resolvedProperty[this.propertyIndex]=t[n];this.targetObject.needsUpdate=true},function e(t,n){this.resolvedProperty[this.propertyIndex]=t[n];this.targetObject.matrixWorldNeedsUpdate=true}],[function e(t,n){this.resolvedProperty.fromArray(t,n)},function e(t,n){this.resolvedProperty.fromArray(t,n);this.targetObject.needsUpdate=true},function e(t,n){this.resolvedProperty.fromArray(t,n);this.targetObject.matrixWorldNeedsUpdate=true}]],getValue:function e(t,n){this.bind();this.getValue(t,n)},setValue:function e(t,n){this.bind();this.setValue(t,n)},bind:function(){let n=this.node;const e=this.parsedPath;const r=e.objectName;const t=e.propertyName;let i=e.propertyIndex;if(!n){n=PropertyBinding.findNode(this.rootNode,e.nodeName)||this.rootNode;this.node=n}this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(!n){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(r){let t=e.objectIndex;switch(r){case"materials":if(!n.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!n.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}n=n.material.materials;break;case"bones":if(!n.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}n=n.skeleton.bones;for(let e=0;e<n.length;e++){if(n[e].name===t){t=e;break}}break;default:if(n[r]===undefined){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}n=n[r]}if(t!==undefined){if(n[t]===undefined){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,n);return}n=n[t]}}const a=n[t];if(a===undefined){const c=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+t+" but it wasn't found.",n);return}let s=this.Versioning.None;this.targetObject=n;if(n.needsUpdate!==undefined){s=this.Versioning.NeedsUpdate}else if(n.matrixWorldNeedsUpdate!==undefined){s=this.Versioning.MatrixWorldNeedsUpdate}let o=this.BindingType.Direct;if(i!==undefined){if(t==="morphTargetInfluences"){if(!n.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(n.geometry.isBufferGeometry){if(!n.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}if(n.morphTargetDictionary[i]!==undefined){i=n.morphTargetDictionary[i]}}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}o=this.BindingType.ArrayElement;this.resolvedProperty=a;this.propertyIndex=i}else if(a.fromArray!==undefined&&a.toArray!==undefined){o=this.BindingType.HasFromToArray;this.resolvedProperty=a}else if(Array.isArray(a)){o=this.BindingType.EntireArray;this.resolvedProperty=a}else{this.propertyName=t}this.getValue=this.GetterByBindingType[o];this.setValue=this.SetterByBindingTypeAndVersioning[o][s]},unbind:function(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}});Object.assign(PropertyBinding.prototype,{_getValue_unbound:PropertyBinding.prototype.getValue,_setValue_unbound:PropertyBinding.prototype.setValue});class AnimationObjectGroup{constructor(){this.uuid=MathUtils.generateUUID();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;const n={};this._indicesByUUID=n;for(let e=0,t=arguments.length;e!==t;++e){n[arguments[e].uuid]=e}this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const r=this._objects,i=this._indicesByUUID,a=this._paths,s=this._parsedPaths,o=this._bindings,c=o.length;let l=undefined,u=r.length,h=this.nCachedObjects_;for(let e=0,t=arguments.length;e!==t;++e){const d=arguments[e],f=d.uuid;let n=i[f];if(n===undefined){n=u++;i[f]=n;r.push(d);for(let e=0,t=c;e!==t;++e){o[e].push(new PropertyBinding(d,a[e],s[e]))}}else if(n<h){l=r[n];const p=--h,m=r[p];i[m.uuid]=n;r[n]=m;i[f]=p;r[p]=d;for(let t=0,e=c;t!==e;++t){const g=o[t],_=g[p];let e=g[n];g[n]=_;if(e===undefined){e=new PropertyBinding(d,a[t],s[t])}g[p]=e}}else if(r[n]!==l){console.error("THREE.AnimationObjectGroup: Different objects with the same UUID "+"detected. Clean the caches or recreate your infrastructure when reloading scenes.")}}this.nCachedObjects_=h}remove(){const n=this._objects,r=this._indicesByUUID,i=this._bindings,a=i.length;let s=this.nCachedObjects_;for(let e=0,t=arguments.length;e!==t;++e){const o=arguments[e],c=o.uuid,l=r[c];if(l!==undefined&&l>=s){const u=s++,h=n[u];r[h.uuid]=l;n[l]=h;r[c]=u;n[u]=o;for(let e=0,t=a;e!==t;++e){const d=i[e],f=d[u],p=d[l];d[l]=f;d[u]=p}}}this.nCachedObjects_=s}uncache(){const n=this._objects,r=this._indicesByUUID,i=this._bindings,a=i.length;let s=this.nCachedObjects_,o=n.length;for(let e=0,t=arguments.length;e!==t;++e){const c=arguments[e],l=c.uuid,u=r[l];if(u!==undefined){delete r[l];if(u<s){const h=--s,d=n[h],f=--o,p=n[f];r[d.uuid]=u;n[u]=d;r[p.uuid]=h;n[h]=p;n.pop();for(let e=0,t=a;e!==t;++e){const m=i[e],g=m[h],_=m[f];m[u]=g;m[h]=_;m.pop()}}else{const f=--o,p=n[f];if(f>0){r[p.uuid]=u}n[u]=p;n.pop();for(let e=0,t=a;e!==t;++e){const m=i[e];m[u]=m[f];m.pop()}}}}this.nCachedObjects_=s}subscribe_(n,r){const e=this._bindingsIndicesByPath;let t=e[n];const i=this._bindings;if(t!==undefined)return i[t];const a=this._paths,s=this._parsedPaths,o=this._objects,c=o.length,l=this.nCachedObjects_,u=new Array(c);t=i.length;e[n]=t;a.push(n);s.push(r);i.push(u);for(let e=l,t=o.length;e!==t;++e){const h=o[e];u[e]=new PropertyBinding(h,n,r)}return u}unsubscribe_(e){const t=this._bindingsIndicesByPath,n=t[e];if(n!==undefined){const r=this._paths,i=this._parsedPaths,a=this._bindings,s=a.length-1,o=a[s],c=e[s];t[c]=n;a[n]=o;a.pop();i[n]=i[s];i.pop();r[n]=r[s];r.pop()}}}AnimationObjectGroup.prototype.isAnimationObjectGroup=true;class AnimationAction{constructor(e,t,n=null,r=t.blendMode){this._mixer=e;this._clip=t;this._localRoot=n;this.blendMode=r;const i=t.tracks,a=i.length,s=new Array(a);const o={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(let e=0;e!==a;++e){const c=i[e].createInterpolant(null);s[e]=c;c.settings=o}this._interpolantSettings=o;this._interpolants=s;this._propertyBindings=new Array(a);this._cacheIndex=null;this._byClipCacheIndex=null;this._timeScaleInterpolant=null;this._weightInterpolant=null;this.loop=LoopRepeat;this._loopCount=-1;this._startTime=null;this.time=0;this.timeScale=1;this._effectiveTimeScale=1;this.weight=1;this._effectiveWeight=1;this.repetitions=Infinity;this.paused=false;this.enabled=true;this.clampWhenFinished=false;this.zeroSlopeAtStart=true;this.zeroSlopeAtEnd=true}play(){this._mixer._activateAction(this);return this}stop(){this._mixer._deactivateAction(this);return this.reset()}reset(){this.paused=false;this.enabled=true;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){this._startTime=e;return this}setLoop(e,t){this.loop=e;this.repetitions=t;return this}setEffectiveWeight(e){this.weight=e;this._effectiveWeight=this.enabled?e:0;return this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){e.fadeOut(t);this.fadeIn(t);if(n){const r=this._clip.duration,i=e._clip.duration,a=i/r,s=r/i;e.warp(1,a,t);this.warp(s,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;if(e!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(e)}return this}setEffectiveTimeScale(e){this.timeScale=e;this._effectiveTimeScale=this.paused?0:e;return this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){this.timeScale=this._clip.duration/e;return this.stopWarping()}syncWith(e){this.time=e.time;this.timeScale=e.timeScale;return this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const r=this._mixer,i=r.time,a=this.timeScale;let s=this._timeScaleInterpolant;if(s===null){s=r._lendControlInterpolant();this._timeScaleInterpolant=s}const o=s.parameterPositions,c=s.sampleValues;o[0]=i;o[1]=i+n;c[0]=e/a;c[1]=t/a;return this}stopWarping(){const e=this._timeScaleInterpolant;if(e!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(e)}return this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,r){if(!this.enabled){this._updateWeight(e);return}const i=this._startTime;if(i!==null){const o=(e-i)*n;if(o<0||n===0){return}this._startTime=null;t=n*o}t*=this._updateTimeScale(e);const a=this._updateTime(t);const s=this._updateWeight(e);if(s>0){const c=this._interpolants;const l=this._propertyBindings;switch(this.blendMode){case AdditiveAnimationBlendMode:for(let e=0,t=c.length;e!==t;++e){c[e].evaluate(a);l[e].accumulateAdditive(s)}break;case NormalAnimationBlendMode:default:for(let e=0,t=c.length;e!==t;++e){c[e].evaluate(a);l[e].accumulate(r,s)}}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const r=n.evaluate(e)[0];t*=r;if(e>n.parameterPositions[1]){this.stopFading();if(r===0){this.enabled=false}}}}this._effectiveWeight=t;return t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const r=n.evaluate(e)[0];t*=r;if(e>n.parameterPositions[1]){this.stopWarping();if(t===0){this.paused=true}else{this.timeScale=t}}}}this._effectiveTimeScale=t;return t}_updateTime(e){const t=this._clip.duration;const n=this.loop;let r=this.time+e;let i=this._loopCount;const a=n===LoopPingPong;if(e===0){if(i===-1)return r;return a&&(i&1)===1?t-r:r}if(n===LoopOnce){if(i===-1){this._loopCount=0;this._setEndings(true,true,false)}e:{if(r>=t){r=t}else if(r<0){r=0}else{this.time=r;break e}if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this.time=r;this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(i===-1){if(e>=0){i=0;this._setEndings(true,this.repetitions===0,a)}else{this._setEndings(this.repetitions===0,true,a)}}if(r>=t||r<0){const s=Math.floor(r/t);r-=t*s;i+=Math.abs(s);const o=this.repetitions-i;if(o<=0){if(this.clampWhenFinished)this.paused=true;else this.enabled=false;r=e>0?t:0;this.time=r;this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1})}else{if(o===1){const c=e<0;this._setEndings(c,!c,a)}else{this._setEndings(false,false,a)}this._loopCount=i;this.time=r;this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:s})}}else{this.time=r}if(a&&(i&1)===1){return t-r}}return r}_setEndings(e,t,n){const r=this._interpolantSettings;if(n){r.endingStart=ZeroSlopeEnding;r.endingEnd=ZeroSlopeEnding}else{if(e){r.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding}else{r.endingStart=WrapAroundEnding}if(t){r.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding}else{r.endingEnd=WrapAroundEnding}}}_scheduleFading(e,t,n){const r=this._mixer,i=r.time;let a=this._weightInterpolant;if(a===null){a=r._lendControlInterpolant();this._weightInterpolant=a}const s=a.parameterPositions,o=a.sampleValues;s[0]=i;o[0]=t;s[1]=i+e;o[1]=n;return this}}class AnimationMixer extends EventDispatcher{constructor(e){super();this._root=e;this._initMemoryManager();this._accuIndex=0;this.time=0;this.timeScale=1}_bindAction(e,n){const r=e._localRoot||this._root,i=e._clip.tracks,a=i.length,s=e._propertyBindings,o=e._interpolants,c=r.uuid,t=this._bindingsByRootAndName;let l=t[c];if(l===undefined){l={};t[c]=l}for(let t=0;t!==a;++t){const u=i[t],h=u.name;let e=l[h];if(e!==undefined){s[t]=e}else{e=s[t];if(e!==undefined){if(e._cacheIndex===null){++e.referenceCount;this._addInactiveBinding(e,c,h)}continue}const d=n&&n._propertyBindings[t].binding.parsedPath;e=new PropertyMixer(PropertyBinding.create(r,h,d),u.ValueTypeName,u.getValueSize());++e.referenceCount;this._addInactiveBinding(e,c,h);s[t]=e}o[t].resultBuffer=e.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const t=(e._localRoot||this._root).uuid,r=e._clip.uuid,i=this._actionsByClip[r];this._bindAction(e,i&&i.knownActions[0]);this._addInactiveAction(e,r,t)}const n=e._propertyBindings;for(let e=0,t=n.length;e!==t;++e){const a=n[e];if(a.useCount++===0){this._lendBinding(a);a.saveOriginalState()}}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const n=e._propertyBindings;for(let e=0,t=n.length;e!==t;++e){const r=n[e];if(--r.useCount===0){r.restoreOriginalState();this._takeBackBinding(r)}}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[];this._nActiveActions=0;this._actionsByClip={};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,n){const r=this._actions,i=this._actionsByClip;let a=i[t];if(a===undefined){a={knownActions:[e],actionByRoot:{}};e._byClipCacheIndex=0;i[t]=a}else{const s=a.knownActions;e._byClipCacheIndex=s.length;s.push(e)}e._cacheIndex=r.length;r.push(e);a.actionByRoot[n]=e}_removeInactiveAction(e){const t=this._actions,n=t[t.length-1],r=e._cacheIndex;n._cacheIndex=r;t[r]=n;t.pop();e._cacheIndex=null;const i=e._clip.uuid,a=this._actionsByClip,s=a[i],o=s.knownActions,c=o[o.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l;o[l]=c;o.pop();e._byClipCacheIndex=null;const u=s.actionByRoot,h=(e._localRoot||this._root).uuid;delete u[h];if(o.length===0){delete a[i]}this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const n=e._propertyBindings;for(let e=0,t=n.length;e!==t;++e){const r=n[e];if(--r.referenceCount===0){this._removeInactiveBinding(r)}}}_lendAction(e){const t=this._actions,n=e._cacheIndex,r=this._nActiveActions++,i=t[r];e._cacheIndex=r;t[r]=e;i._cacheIndex=n;t[n]=i}_takeBackAction(e){const t=this._actions,n=e._cacheIndex,r=--this._nActiveActions,i=t[r];e._cacheIndex=r;t[r]=e;i._cacheIndex=n;t[n]=i}_addInactiveBinding(e,t,n){const r=this._bindingsByRootAndName,i=this._bindings;let a=r[t];if(a===undefined){a={};r[t]=a}a[n]=e;e._cacheIndex=i.length;i.push(e)}_removeInactiveBinding(e){const t=this._bindings,n=e.binding,r=n.rootNode.uuid,i=n.path,a=this._bindingsByRootAndName,s=a[r],o=t[t.length-1],c=e._cacheIndex;o._cacheIndex=c;t[c]=o;t.pop();delete s[i];if(Object.keys(s).length===0){delete a[r]}}_lendBinding(e){const t=this._bindings,n=e._cacheIndex,r=this._nActiveBindings++,i=t[r];e._cacheIndex=r;t[r]=e;i._cacheIndex=n;t[n]=i}_takeBackBinding(e){const t=this._bindings,n=e._cacheIndex,r=--this._nActiveBindings,i=t[r];e._cacheIndex=r;t[r]=e;i._cacheIndex=n;t[n]=i}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];if(n===undefined){n=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer);n.__cacheIndex=t;e[t]=n}return n}_takeBackControlInterpolant(e){const t=this._controlInterpolants,n=e.__cacheIndex,r=--this._nActiveControlInterpolants,i=t[r];e.__cacheIndex=r;t[r]=e;i.__cacheIndex=n;t[n]=i}clipAction(e,t,n){const r=t||this._root,i=r.uuid;let a=typeof e==="string"?AnimationClip.findByName(r,e):e;const s=a!==null?a.uuid:e;const o=this._actionsByClip[s];let c=null;if(n===undefined){if(a!==null){n=a.blendMode}else{n=NormalAnimationBlendMode}}if(o!==undefined){const u=o.actionByRoot[i];if(u!==undefined&&u.blendMode===n){return u}c=o.knownActions[0];if(a===null)a=c._clip}if(a===null)return null;const l=new AnimationAction(this,a,t,n);this._bindAction(l,c);this._addInactiveAction(l,s,i);return l}existingAction(e,t){const n=t||this._root,r=n.uuid,i=typeof e==="string"?AnimationClip.findByName(n,e):e,a=i?i.uuid:e,s=this._actionsByClip[a];if(s!==undefined){return s.actionByRoot[r]||null}return null}stopAllAction(){const t=this._actions,n=this._nActiveActions;for(let e=n-1;e>=0;--e){t[e].stop()}return this}update(t){t*=this.timeScale;const n=this._actions,r=this._nActiveActions,i=this.time+=t,a=Math.sign(t),s=this._accuIndex^=1;for(let e=0;e!==r;++e){const l=n[e];l._update(i,t,a,s)}const o=this._bindings,c=this._nActiveBindings;for(let e=0;e!==c;++e){o[e].apply(s)}return this}setTime(e){this.time=0;for(let e=0;e<this._actions.length;e++){this._actions[e].time=0}return this.update(e)}getRoot(){return this._root}uncacheClip(e){const n=this._actions,t=e.uuid,r=this._actionsByClip,i=r[t];if(i!==undefined){const a=i.knownActions;for(let e=0,t=a.length;e!==t;++e){const s=a[e];this._deactivateAction(s);const o=s._cacheIndex,c=n[n.length-1];s._cacheIndex=null;s._byClipCacheIndex=null;c._cacheIndex=o;n[o]=c;n.pop();this._removeInactiveBindingsForAction(s)}delete r[t]}}uncacheRoot(e){const t=e.uuid,n=this._actionsByClip;for(const a in n){const s=n[a].actionByRoot,o=s[t];if(o!==undefined){this._deactivateAction(o);this._removeInactiveAction(o)}}const r=this._bindingsByRootAndName,i=r[t];if(i!==undefined){for(const c in i){const l=i[c];l.restoreOriginalState();this._removeInactiveBinding(l)}}}uncacheAction(e,t){const n=this.existingAction(e,t);if(n!==null){this._deactivateAction(n);this._removeInactiveAction(n)}}}AnimationMixer.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Uniform{constructor(e){if(typeof e==="string"){console.warn("THREE.Uniform: Type parameter is no longer needed.");e=arguments[1]}this.value=e}clone(){return new Uniform(this.value.clone===undefined?this.value:this.value.clone())}}function InstancedInterleavedBuffer(e,t,n){InterleavedBuffer.call(this,e,t);this.meshPerAttribute=n||1}InstancedInterleavedBuffer.prototype=Object.assign(Object.create(InterleavedBuffer.prototype),{constructor:InstancedInterleavedBuffer,isInstancedInterleavedBuffer:true,copy:function(e){InterleavedBuffer.prototype.copy.call(this,e);this.meshPerAttribute=e.meshPerAttribute;return this},clone:function(e){const t=InterleavedBuffer.prototype.clone.call(this,e);t.meshPerAttribute=this.meshPerAttribute;return t},toJSON:function(e){const t=InterleavedBuffer.prototype.toJSON.call(this,e);t.isInstancedInterleavedBuffer=true;t.meshPerAttribute=this.meshPerAttribute;return t}});function GLBufferAttribute(e,t,n,r,i){this.buffer=e;this.type=t;this.itemSize=n;this.elementSize=r;this.count=i;this.version=0}Object.defineProperty(GLBufferAttribute.prototype,"needsUpdate",{set:function(e){if(e===true)this.version++}});Object.assign(GLBufferAttribute.prototype,{isGLBufferAttribute:true,setBuffer:function(e){this.buffer=e;return this},setType:function(e,t){this.type=e;this.elementSize=t;return this},setItemSize:function(e){this.itemSize=e;return this},setCount:function(e){this.count=e;return this}});function Raycaster(e,t,n=0,r=Infinity){this.ray=new Ray(e,t);this.near=n;this.far=r;this.camera=null;this.layers=new Layers;this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function(){console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");return this.Points}}})}function ascSort(e,t){return e.distance-t.distance}function intersectObject(e,n,r,t){if(e.layers.test(n.layers)){e.raycast(n,r)}if(t===true){const i=e.children;for(let e=0,t=i.length;e<t;e++){intersectObject(i[e],n,r,true)}}}Object.assign(Raycaster.prototype,{set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){if(t&&t.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(t.matrixWorld);this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize();this.camera=t}else if(t&&t.isOrthographicCamera){this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t);this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld);this.camera=t}else{console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}},intersectObject:function(e,t=false,n=[]){intersectObject(e,this,n,t);n.sort(ascSort);return n},intersectObjects:function(n,r=false,i=[]){for(let e=0,t=n.length;e<t;e++){intersectObject(n[e],this,i,r)}i.sort(ascSort);return i}});class Spherical{constructor(e=1,t=0,n=0){this.radius=e;this.phi=t;this.theta=n;return this}set(e,t,n){this.radius=e;this.phi=t;this.theta=n;return this}copy(e){this.radius=e.radius;this.phi=e.phi;this.theta=e.theta;return this}makeSafe(){const e=1e-6;this.phi=Math.max(e,Math.min(Math.PI-e,this.phi));return this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){this.radius=Math.sqrt(e*e+t*t+n*n);if(this.radius===0){this.theta=0;this.phi=0}else{this.theta=Math.atan2(e,n);this.phi=Math.acos(MathUtils.clamp(t/this.radius,-1,1))}return this}clone(){return(new this.constructor).copy(this)}}class Cylindrical{constructor(e=1,t=0,n=0){this.radius=e;this.theta=t;this.y=n;return this}set(e,t,n){this.radius=e;this.theta=t;this.y=n;return this}copy(e){this.radius=e.radius;this.theta=e.theta;this.y=e.y;return this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){this.radius=Math.sqrt(e*e+n*n);this.theta=Math.atan2(e,n);this.y=t;return this}clone(){return(new this.constructor).copy(this)}}const _vector$8=new Vector2;class Box2{constructor(e=new Vector2(+Infinity,+Infinity),t=new Vector2(-Infinity,-Infinity)){this.min=e;this.max=t}set(e,t){this.min.copy(e);this.max.copy(t);return this}setFromPoints(n){this.makeEmpty();for(let e=0,t=n.length;e<t;e++){this.expandByPoint(n[e])}return this}setFromCenterAndSize(e,t){const n=_vector$8.copy(t).multiplyScalar(.5);this.min.copy(e).sub(n);this.max.copy(e).add(n);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.min.copy(e.min);this.max.copy(e.max);return this}makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){if(e===undefined){console.warn("THREE.Box2: .getCenter() target is now required");e=new Vector2}return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){if(e===undefined){console.warn("THREE.Box2: .getSize() target is now required");e=new Vector2}return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){this.min.min(e);this.max.max(e);return this}expandByVector(e){this.min.sub(e);this.max.add(e);return this}expandByScalar(e){this.min.addScalar(-e);this.max.addScalar(e);return this}containsPoint(e){return e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y?false:true}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){if(t===undefined){console.warn("THREE.Box2: .getParameter() target is now required");t=new Vector2}return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y?false:true}clampPoint(e,t){if(t===undefined){console.warn("THREE.Box2: .clampPoint() target is now required");t=new Vector2}return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){const t=_vector$8.copy(e).clamp(this.min,this.max);return t.sub(e).length()}intersect(e){this.min.max(e.min);this.max.min(e.max);return this}union(e){this.min.min(e.min);this.max.max(e.max);return this}translate(e){this.min.add(e);this.max.add(e);return this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}Box2.prototype.isBox2=true;const _startP=new Vector3;const _startEnd=new Vector3;class Line3{constructor(e=new Vector3,t=new Vector3){this.start=e;this.end=t}set(e,t){this.start.copy(e);this.end.copy(t);return this}copy(e){this.start.copy(e.start);this.end.copy(e.end);return this}getCenter(e){if(e===undefined){console.warn("THREE.Line3: .getCenter() target is now required");e=new Vector3}return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){if(e===undefined){console.warn("THREE.Line3: .delta() target is now required");e=new Vector3}return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){if(t===undefined){console.warn("THREE.Line3: .at() target is now required");t=new Vector3}return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){_startP.subVectors(e,this.start);_startEnd.subVectors(this.end,this.start);const n=_startEnd.dot(_startEnd);const r=_startEnd.dot(_startP);let i=r/n;if(t){i=MathUtils.clamp(i,0,1)}return i}closestPointToPoint(e,t,n){const r=this.closestPointToPointParameter(e,t);if(n===undefined){console.warn("THREE.Line3: .closestPointToPoint() target is now required");n=new Vector3}return this.delta(n).multiplyScalar(r).add(this.start)}applyMatrix4(e){this.start.applyMatrix4(e);this.end.applyMatrix4(e);return this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}function ImmediateRenderObject(e){Object3D.call(this);this.material=e;this.render=function(){};this.hasPositions=false;this.hasNormals=false;this.hasColors=false;this.hasUvs=false;this.positionArray=null;this.normalArray=null;this.colorArray=null;this.uvArray=null;this.count=0}ImmediateRenderObject.prototype=Object.create(Object3D.prototype);ImmediateRenderObject.prototype.constructor=ImmediateRenderObject;ImmediateRenderObject.prototype.isImmediateRenderObject=true;const _vector$9=new Vector3;class SpotLightHelper extends Object3D{constructor(e,t){super();this.light=e;this.light.updateMatrixWorld();this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.color=t;const n=new BufferGeometry;const r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let e=0,t=1,n=32;e<n;e++,t++){const a=e/n*Math.PI*2;const s=t/n*Math.PI*2;r.push(Math.cos(a),Math.sin(a),1,Math.cos(s),Math.sin(s),1)}n.setAttribute("position",new Float32BufferAttribute(r,3));const i=new LineBasicMaterial({fog:false,toneMapped:false});this.cone=new LineSegments(n,i);this.add(this.cone);this.update()}dispose(){this.cone.geometry.dispose();this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const e=this.light.distance?this.light.distance:1e3;const t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e);_vector$9.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(_vector$9);if(this.color!==undefined){this.cone.material.color.set(this.color)}else{this.cone.material.color.copy(this.light.color)}}}const _vector$a=new Vector3;const _boneMatrix=new Matrix4;const _matrixWorldInv=new Matrix4;class SkeletonHelper extends LineSegments{constructor(e){const t=getBoneList(e);const n=new BufferGeometry;const r=[];const i=[];const a=new Color(0,0,1);const s=new Color(0,1,0);for(let e=0;e<t.length;e++){const c=t[e];if(c.parent&&c.parent.isBone){r.push(0,0,0);r.push(0,0,0);i.push(a.r,a.g,a.b);i.push(s.r,s.g,s.b)}}n.setAttribute("position",new Float32BufferAttribute(r,3));n.setAttribute("color",new Float32BufferAttribute(i,3));const o=new LineBasicMaterial({vertexColors:true,depthTest:false,depthWrite:false,toneMapped:false,transparent:true});super(n,o);this.type="SkeletonHelper";this.isSkeletonHelper=true;this.root=e;this.bones=t;this.matrix=e.matrixWorld;this.matrixAutoUpdate=false}updateMatrixWorld(e){const n=this.bones;const t=this.geometry;const r=t.getAttribute("position");_matrixWorldInv.copy(this.root.matrixWorld).invert();for(let e=0,t=0;e<n.length;e++){const i=n[e];if(i.parent&&i.parent.isBone){_boneMatrix.multiplyMatrices(_matrixWorldInv,i.matrixWorld);_vector$a.setFromMatrixPosition(_boneMatrix);r.setXYZ(t,_vector$a.x,_vector$a.y,_vector$a.z);_boneMatrix.multiplyMatrices(_matrixWorldInv,i.parent.matrixWorld);_vector$a.setFromMatrixPosition(_boneMatrix);r.setXYZ(t+1,_vector$a.x,_vector$a.y,_vector$a.z);t+=2}}t.getAttribute("position").needsUpdate=true;super.updateMatrixWorld(e)}}function getBoneList(t){const n=[];if(t&&t.isBone){n.push(t)}for(let e=0;e<t.children.length;e++){n.push.apply(n,getBoneList(t.children[e]))}return n}class PointLightHelper extends Mesh{constructor(e,t,n){const r=new SphereGeometry(t,4,2);const i=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});super(r,i);this.light=e;this.light.updateMatrixWorld();this.color=n;this.type="PointLightHelper";this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=false;this.update()}dispose(){this.geometry.dispose();this.material.dispose()}update(){if(this.color!==undefined){this.material.color.set(this.color)}else{this.material.color.copy(this.light.color)}}}const _vector$b=new Vector3;const _color1=new Color;const _color2=new Color;class HemisphereLightHelper extends Object3D{constructor(e,t,n){super();this.light=e;this.light.updateMatrixWorld();this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.color=n;const r=new OctahedronGeometry(t);r.rotateY(Math.PI*.5);this.material=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});if(this.color===undefined)this.material.vertexColors=true;const i=r.getAttribute("position");const a=new Float32Array(i.count*3);r.setAttribute("color",new BufferAttribute(a,3));this.add(new Mesh(r,this.material));this.update()}dispose(){this.children[0].geometry.dispose();this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==undefined){this.material.color.set(this.color)}else{const n=e.geometry.getAttribute("color");_color1.copy(this.light.color);_color2.copy(this.light.groundColor);for(let e=0,t=n.count;e<t;e++){const r=e<t/2?_color1:_color2;n.setXYZ(e,r.r,r.g,r.b)}n.needsUpdate=true}e.lookAt(_vector$b.setFromMatrixPosition(this.light.matrixWorld).negate())}}class GridHelper extends LineSegments{constructor(e=10,r=10,i=4473924,a=8947848){i=new Color(i);a=new Color(a);const s=r/2;const o=e/r;const c=e/2;const l=[],u=[];for(let e=0,t=0,n=-c;e<=r;e++,n+=o){l.push(-c,0,n,c,0,n);l.push(n,0,-c,n,0,c);const h=e===s?i:a;h.toArray(u,t);t+=3;h.toArray(u,t);t+=3;h.toArray(u,t);t+=3;h.toArray(u,t);t+=3}const t=new BufferGeometry;t.setAttribute("position",new Float32BufferAttribute(l,3));t.setAttribute("color",new Float32BufferAttribute(u,3));const n=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(t,n);this.type="GridHelper"}}class PolarGridHelper extends LineSegments{constructor(t=10,n=16,r=8,i=64,a=4473924,s=8947848){a=new Color(a);s=new Color(s);const o=[];const c=[];for(let e=0;e<=n;e++){const u=e/n*(Math.PI*2);const h=Math.sin(u)*t;const d=Math.cos(u)*t;o.push(0,0,0);o.push(h,0,d);const f=e&1?a:s;c.push(f.r,f.g,f.b);c.push(f.r,f.g,f.b)}for(let e=0;e<=r;e++){const f=e&1?a:s;const p=t-t/r*e;for(let r=0;r<i;r++){let e=r/i*(Math.PI*2);let t=Math.sin(e)*p;let n=Math.cos(e)*p;o.push(t,0,n);c.push(f.r,f.g,f.b);e=(r+1)/i*(Math.PI*2);t=Math.sin(e)*p;n=Math.cos(e)*p;o.push(t,0,n);c.push(f.r,f.g,f.b)}}const e=new BufferGeometry;e.setAttribute("position",new Float32BufferAttribute(o,3));e.setAttribute("color",new Float32BufferAttribute(c,3));const l=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(e,l);this.type="PolarGridHelper"}}const _v1$6=new Vector3;const _v2$3=new Vector3;const _v3$1=new Vector3;class DirectionalLightHelper extends Object3D{constructor(e,t,n){super();this.light=e;this.light.updateMatrixWorld();this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.color=n;if(t===undefined)t=1;let r=new BufferGeometry;r.setAttribute("position",new Float32BufferAttribute([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const i=new LineBasicMaterial({fog:false,toneMapped:false});this.lightPlane=new Line(r,i);this.add(this.lightPlane);r=new BufferGeometry;r.setAttribute("position",new Float32BufferAttribute([0,0,0,0,0,1],3));this.targetLine=new Line(r,i);this.add(this.targetLine);this.update()}dispose(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()}update(){_v1$6.setFromMatrixPosition(this.light.matrixWorld);_v2$3.setFromMatrixPosition(this.light.target.matrixWorld);_v3$1.subVectors(_v2$3,_v1$6);this.lightPlane.lookAt(_v2$3);if(this.color!==undefined){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color)}else{this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color)}this.targetLine.lookAt(_v2$3);this.targetLine.scale.z=_v3$1.length()}}const _vector$c=new Vector3;const _camera=new Camera;class CameraHelper extends LineSegments{constructor(e){const t=new BufferGeometry;const n=new LineBasicMaterial({color:16777215,vertexColors:true,toneMapped:false});const r=[];const i=[];const a={};const s=new Color(16755200);const o=new Color(16711680);const c=new Color(43775);const l=new Color(16777215);const u=new Color(3355443);h("n1","n2",s);h("n2","n4",s);h("n4","n3",s);h("n3","n1",s);h("f1","f2",s);h("f2","f4",s);h("f4","f3",s);h("f3","f1",s);h("n1","f1",s);h("n2","f2",s);h("n3","f3",s);h("n4","f4",s);h("p","n1",o);h("p","n2",o);h("p","n3",o);h("p","n4",o);h("u1","u2",c);h("u2","u3",c);h("u3","u1",c);h("c","t",l);h("p","c",u);h("cn1","cn2",u);h("cn3","cn4",u);h("cf1","cf2",u);h("cf3","cf4",u);function h(e,t,n){d(e,n);d(t,n)}function d(e,t){r.push(0,0,0);i.push(t.r,t.g,t.b);if(a[e]===undefined){a[e]=[]}a[e].push(r.length/3-1)}t.setAttribute("position",new Float32BufferAttribute(r,3));t.setAttribute("color",new Float32BufferAttribute(i,3));super(t,n);this.type="CameraHelper";this.camera=e;if(this.camera.updateProjectionMatrix)this.camera.updateProjectionMatrix();this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.pointMap=a;this.update()}update(){const e=this.geometry;const t=this.pointMap;const n=1,r=1;_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);setPoint("c",t,e,_camera,0,0,-1);setPoint("t",t,e,_camera,0,0,1);setPoint("n1",t,e,_camera,-n,-r,-1);setPoint("n2",t,e,_camera,n,-r,-1);setPoint("n3",t,e,_camera,-n,r,-1);setPoint("n4",t,e,_camera,n,r,-1);setPoint("f1",t,e,_camera,-n,-r,1);setPoint("f2",t,e,_camera,n,-r,1);setPoint("f3",t,e,_camera,-n,r,1);setPoint("f4",t,e,_camera,n,r,1);setPoint("u1",t,e,_camera,n*.7,r*1.1,-1);setPoint("u2",t,e,_camera,-n*.7,r*1.1,-1);setPoint("u3",t,e,_camera,0,r*2,-1);setPoint("cf1",t,e,_camera,-n,0,1);setPoint("cf2",t,e,_camera,n,0,1);setPoint("cf3",t,e,_camera,0,-r,1);setPoint("cf4",t,e,_camera,0,r,1);setPoint("cn1",t,e,_camera,-n,0,-1);setPoint("cn2",t,e,_camera,n,0,-1);setPoint("cn3",t,e,_camera,0,-r,-1);setPoint("cn4",t,e,_camera,0,r,-1);e.getAttribute("position").needsUpdate=true}}function setPoint(e,t,n,r,i,a,s){_vector$c.set(i,a,s).unproject(r);const o=t[e];if(o!==undefined){const c=n.getAttribute("position");for(let e=0,t=o.length;e<t;e++){c.setXYZ(o[e],_vector$c.x,_vector$c.y,_vector$c.z)}}}const _box$3=new Box3;class BoxHelper extends LineSegments{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const r=new Float32Array(8*3);const i=new BufferGeometry;i.setIndex(new BufferAttribute(n,1));i.setAttribute("position",new BufferAttribute(r,3));super(i,new LineBasicMaterial({color:t,toneMapped:false}));this.object=e;this.type="BoxHelper";this.matrixAutoUpdate=false;this.update()}update(e){if(e!==undefined){console.warn("THREE.BoxHelper: .update() has no longer arguments.")}if(this.object!==undefined){_box$3.setFromObject(this.object)}if(_box$3.isEmpty())return;const t=_box$3.min;const n=_box$3.max;const r=this.geometry.attributes.position;const i=r.array;i[0]=n.x;i[1]=n.y;i[2]=n.z;i[3]=t.x;i[4]=n.y;i[5]=n.z;i[6]=t.x;i[7]=t.y;i[8]=n.z;i[9]=n.x;i[10]=t.y;i[11]=n.z;i[12]=n.x;i[13]=n.y;i[14]=t.z;i[15]=t.x;i[16]=n.y;i[17]=t.z;i[18]=t.x;i[19]=t.y;i[20]=t.z;i[21]=n.x;i[22]=t.y;i[23]=t.z;r.needsUpdate=true;this.geometry.computeBoundingSphere()}setFromObject(e){this.object=e;this.update();return this}copy(e){LineSegments.prototype.copy.call(this,e);this.object=e.object;return this}}class Box3Helper extends LineSegments{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const r=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1];const i=new BufferGeometry;i.setIndex(new BufferAttribute(n,1));i.setAttribute("position",new Float32BufferAttribute(r,3));super(i,new LineBasicMaterial({color:t,toneMapped:false}));this.box=e;this.type="Box3Helper";this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;if(t.isEmpty())return;t.getCenter(this.position);t.getSize(this.scale);this.scale.multiplyScalar(.5);super.updateMatrixWorld(e)}}class PlaneHelper extends Line{constructor(e,t=1,n=16776960){const r=n;const i=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0];const a=new BufferGeometry;a.setAttribute("position",new Float32BufferAttribute(i,3));a.computeBoundingSphere();super(a,new LineBasicMaterial({color:r,toneMapped:false}));this.type="PlaneHelper";this.plane=e;this.size=t;const s=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1];const o=new BufferGeometry;o.setAttribute("position",new Float32BufferAttribute(s,3));o.computeBoundingSphere();this.add(new Mesh(o,new MeshBasicMaterial({color:r,opacity:.2,transparent:true,depthWrite:false,toneMapped:false})))}updateMatrixWorld(e){let t=-this.plane.constant;if(Math.abs(t)<1e-8)t=1e-8;this.scale.set(.5*this.size,.5*this.size,t);this.children[0].material.side=t<0?BackSide:FrontSide;this.lookAt(this.plane.normal);super.updateMatrixWorld(e)}}const _axis=new Vector3;let _lineGeometry,_coneGeometry;class ArrowHelper extends Object3D{constructor(e=new Vector3(0,0,1),t=new Vector3(0,0,0),n=1,r=16776960,i=n*.2,a=i*.2){super();this.type="ArrowHelper";if(_lineGeometry===undefined){_lineGeometry=new BufferGeometry;_lineGeometry.setAttribute("position",new Float32BufferAttribute([0,0,0,0,1,0],3));_coneGeometry=new CylinderGeometry(0,.5,1,5,1);_coneGeometry.translate(0,-.5,0)}this.position.copy(t);this.line=new Line(_lineGeometry,new LineBasicMaterial({color:r,toneMapped:false}));this.line.matrixAutoUpdate=false;this.add(this.line);this.cone=new Mesh(_coneGeometry,new MeshBasicMaterial({color:r,toneMapped:false}));this.cone.matrixAutoUpdate=false;this.add(this.cone);this.setDirection(e);this.setLength(n,i,a)}setDirection(e){if(e.y>.99999){this.quaternion.set(0,0,0,1)}else if(e.y<-.99999){this.quaternion.set(1,0,0,0)}else{_axis.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(_axis,t)}}setLength(e,t=e*.2,n=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1);this.line.updateMatrix();this.cone.scale.set(n,t,n);this.cone.position.y=e;this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e);this.cone.material.color.set(e)}copy(e){super.copy(e,false);this.line.copy(e.line);this.cone.copy(e.cone);return this}}class AxesHelper extends LineSegments{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e];const n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1];const r=new BufferGeometry;r.setAttribute("position",new Float32BufferAttribute(t,3));r.setAttribute("color",new Float32BufferAttribute(n,3));const i=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(r,i);this.type="AxesHelper"}}const _floatView=new Float32Array(1);const _int32View=new Int32Array(_floatView.buffer);const DataUtils={toHalfFloat:function(e){_floatView[0]=e;const t=_int32View[0];let n=t>>16&32768;let r=t>>12&2047;const i=t>>23&255;if(i<103)return n;if(i>142){n|=31744;n|=(i==255?0:1)&&t&8388607;return n}if(i<113){r|=2048;n|=(r>>114-i)+(r>>113-i&1);return n}n|=i-112<<10|r>>1;n+=r&1;return n}};const LOD_MIN=4;const LOD_MAX=8;const SIZE_MAX=Math.pow(2,LOD_MAX);const EXTRA_LOD_SIGMA=[.125,.215,.35,.446,.526,.582];const TOTAL_LODS=LOD_MAX-LOD_MIN+1+EXTRA_LOD_SIGMA.length;const MAX_SAMPLES=20;const ENCODINGS={[LinearEncoding]:0,[sRGBEncoding]:1,[RGBEEncoding]:2,[RGBM7Encoding]:3,[RGBM16Encoding]:4,[RGBDEncoding]:5,[GammaEncoding]:6};const backgroundMaterial=new MeshBasicMaterial({side:BackSide,depthWrite:false,depthTest:false});const backgroundBox=new Mesh(new BoxGeometry,backgroundMaterial);const _flatCamera=new OrthographicCamera;const{_lodPlanes,_sizeLods,_sigmas}=_createPlanes();const _clearColor=new Color;let _oldTarget=null;const PHI=(1+Math.sqrt(5))/2;const INV_PHI=1/PHI;const _axisDirections=[new Vector3(1,1,1),new Vector3(-1,1,1),new Vector3(1,1,-1),new Vector3(-1,1,-1),new Vector3(0,PHI,INV_PHI),new Vector3(0,PHI,-INV_PHI),new Vector3(INV_PHI,0,PHI),new Vector3(-INV_PHI,0,PHI),new Vector3(PHI,INV_PHI,0),new Vector3(-PHI,INV_PHI,0)];function convertLinearToRGBE(e){const t=Math.max(e.r,e.g,e.b);const n=Math.min(Math.max(Math.ceil(Math.log2(t)),-128),127);e.multiplyScalar(Math.pow(2,-n));const r=(n+128)/255;return r}class PMREMGenerator{constructor(e){this._renderer=e;this._pingPongRenderTarget=null;this._blurMaterial=_getBlurShader(MAX_SAMPLES);this._equirectShader=null;this._cubemapShader=null;this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,r=100){_oldTarget=this._renderer.getRenderTarget();const i=this._allocateTargets();this._sceneToCubeUV(e,n,r,i);if(t>0){this._blur(i,0,0,t)}this._applyPMREM(i);this._cleanup(i);return i}fromEquirectangular(e){return this._fromTexture(e)}fromCubemap(e){return this._fromTexture(e)}compileCubemapShader(){if(this._cubemapShader===null){this._cubemapShader=_getCubemapShader();this._compileMaterial(this._cubemapShader)}}compileEquirectangularShader(){if(this._equirectShader===null){this._equirectShader=_getEquirectShader();this._compileMaterial(this._equirectShader)}}dispose(){this._blurMaterial.dispose();if(this._cubemapShader!==null)this._cubemapShader.dispose();if(this._equirectShader!==null)this._equirectShader.dispose();for(let e=0;e<_lodPlanes.length;e++){_lodPlanes[e].dispose()}}_cleanup(e){this._pingPongRenderTarget.dispose();this._renderer.setRenderTarget(_oldTarget);e.scissorTest=false;_setViewport(e,0,0,e.width,e.height)}_fromTexture(e){_oldTarget=this._renderer.getRenderTarget();const t=this._allocateTargets(e);this._textureToCubeUV(e,t);this._applyPMREM(t);this._cleanup(t);return t}_allocateTargets(e){const t={magFilter:NearestFilter,minFilter:NearestFilter,generateMipmaps:false,type:UnsignedByteType,format:RGBEFormat,encoding:_isLDR(e)?e.encoding:RGBEEncoding,depthBuffer:false};const n=_createRenderTarget(t);n.depthBuffer=e?false:true;this._pingPongRenderTarget=_createRenderTarget(t);return n}_compileMaterial(e){const t=new Mesh(_lodPlanes[0],e);this._renderer.compile(t,_flatCamera)}_sceneToCubeUV(t,e,n,r){const i=90;const a=1;const s=new PerspectiveCamera(i,a,e,n);const o=[1,-1,1,1,1,1];const c=[1,1,1,-1,-1,-1];const l=this._renderer;const u=l.autoClear;const h=l.outputEncoding;const d=l.toneMapping;l.getClearColor(_clearColor);l.toneMapping=NoToneMapping;l.outputEncoding=LinearEncoding;l.autoClear=false;let f=false;const p=t.background;if(p){if(p.isColor){backgroundMaterial.color.copy(p).convertSRGBToLinear();t.background=null;const m=convertLinearToRGBE(backgroundMaterial.color);backgroundMaterial.opacity=m;f=true}}else{backgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();const m=convertLinearToRGBE(backgroundMaterial.color);backgroundMaterial.opacity=m;f=true}for(let e=0;e<6;e++){const g=e%3;if(g==0){s.up.set(0,o[e],0);s.lookAt(c[e],0,0)}else if(g==1){s.up.set(0,0,o[e]);s.lookAt(0,c[e],0)}else{s.up.set(0,o[e],0);s.lookAt(0,0,c[e])}_setViewport(r,g*SIZE_MAX,e>2?SIZE_MAX:0,SIZE_MAX,SIZE_MAX);l.setRenderTarget(r);if(f){l.render(backgroundBox,s)}l.render(t,s)}l.toneMapping=d;l.outputEncoding=h;l.autoClear=u}_textureToCubeUV(e,t){const n=this._renderer;if(e.isCubeTexture){if(this._cubemapShader==null){this._cubemapShader=_getCubemapShader()}}else{if(this._equirectShader==null){this._equirectShader=_getEquirectShader()}}const r=e.isCubeTexture?this._cubemapShader:this._equirectShader;const i=new Mesh(_lodPlanes[0],r);const a=r.uniforms;a["envMap"].value=e;if(!e.isCubeTexture){a["texelSize"].value.set(1/e.image.width,1/e.image.height)}a["inputEncoding"].value=ENCODINGS[e.encoding];a["outputEncoding"].value=ENCODINGS[t.texture.encoding];_setViewport(t,0,0,3*SIZE_MAX,2*SIZE_MAX);n.setRenderTarget(t);n.render(i,_flatCamera)}_applyPMREM(t){const e=this._renderer;const n=e.autoClear;e.autoClear=false;for(let e=1;e<TOTAL_LODS;e++){const r=Math.sqrt(_sigmas[e]*_sigmas[e]-_sigmas[e-1]*_sigmas[e-1]);const i=_axisDirections[(e-1)%_axisDirections.length];this._blur(t,e-1,e,r,i)}e.autoClear=n}_blur(e,t,n,r,i){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,r,"latitudinal",i);this._halfBlur(a,e,n,n,r,"longitudinal",i)}_halfBlur(e,t,n,r,i,a,s){const o=this._renderer;const c=this._blurMaterial;if(a!=="latitudinal"&&a!=="longitudinal"){console.error("blur direction must be either latitudinal or longitudinal!")}const l=3;const u=new Mesh(_lodPlanes[r],c);const h=c.uniforms;const d=_sizeLods[n]-1;const f=isFinite(i)?Math.PI/(2*d):2*Math.PI/(2*MAX_SAMPLES-1);const p=i/f;const m=isFinite(i)?1+Math.floor(l*p):MAX_SAMPLES;if(m>MAX_SAMPLES){console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${MAX_SAMPLES}`)}const g=[];let _=0;for(let e=0;e<MAX_SAMPLES;++e){const v=e/p;const b=Math.exp(-v*v/2);g.push(b);if(e==0){_+=b}else if(e<m){_+=2*b}}for(let e=0;e<g.length;e++){g[e]=g[e]/_}h["envMap"].value=e.texture;h["samples"].value=m;h["weights"].value=g;h["latitudinal"].value=a==="latitudinal";if(s){h["poleAxis"].value=s}h["dTheta"].value=f;h["mipInt"].value=LOD_MAX-n;h["inputEncoding"].value=ENCODINGS[e.texture.encoding];h["outputEncoding"].value=ENCODINGS[e.texture.encoding];const y=_sizeLods[r];const v=3*Math.max(0,SIZE_MAX-2*y);const x=(r===0?0:2*SIZE_MAX)+2*y*(r>LOD_MAX-LOD_MIN?r-LOD_MAX+LOD_MIN:0);_setViewport(t,v,x,3*y,2*y);o.setRenderTarget(t);o.render(u,_flatCamera)}}function _isLDR(e){if(e===undefined||e.type!==UnsignedByteType)return false;return e.encoding===LinearEncoding||e.encoding===sRGBEncoding||e.encoding===GammaEncoding}function _createPlanes(){const n=[];const r=[];const i=[];let a=LOD_MAX;for(let t=0;t<TOTAL_LODS;t++){const s=Math.pow(2,a);r.push(s);let e=1/s;if(t>LOD_MAX-LOD_MIN){e=EXTRA_LOD_SIGMA[t-LOD_MAX+LOD_MIN-1]}else if(t==0){e=0}i.push(e);const o=1/(s-1);const c=-o/2;const l=1+o/2;const u=[c,c,l,c,l,l,c,c,l,l,c,l];const h=6;const d=6;const f=3;const p=2;const m=1;const g=new Float32Array(f*d*h);const _=new Float32Array(p*d*h);const y=new Float32Array(m*d*h);for(let e=0;e<h;e++){const x=e%3*2/3-1;const b=e>2?0:-1;const M=[x,b,0,x+2/3,b,0,x+2/3,b+1,0,x,b,0,x+2/3,b+1,0,x,b+1,0];g.set(M,f*d*e);_.set(u,p*d*e);const w=[e,e,e,e,e,e];y.set(w,m*d*e)}const v=new BufferGeometry;v.setAttribute("position",new BufferAttribute(g,f));v.setAttribute("uv",new BufferAttribute(_,p));v.setAttribute("faceIndex",new BufferAttribute(y,m));n.push(v);if(a>LOD_MIN){a--}}return{_lodPlanes:n,_sizeLods:r,_sigmas:i}}function _createRenderTarget(e){const t=new WebGLRenderTarget(3*SIZE_MAX,3*SIZE_MAX,e);t.texture.mapping=CubeUVReflectionMapping;t.texture.name="PMREM.cubeUv";t.scissorTest=true;return t}function _setViewport(e,t,n,r,i){e.viewport.set(t,n,r,i);e.scissor.set(t,n,r,i)}function _getBlurShader(e){const t=new Float32Array(e);const n=new Vector3(0,1,0);const r=new RawShaderMaterial({name:"SphericalGaussianBlur",defines:{n:e},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:t},latitudinal:{value:false},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:n},inputEncoding:{value:ENCODINGS[LinearEncoding]},outputEncoding:{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${_getEncodings()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:NoBlending,depthTest:false,depthWrite:false});return r}function _getEquirectShader(){const e=new Vector2(1,1);const t=new RawShaderMaterial({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:e},inputEncoding:{value:ENCODINGS[LinearEncoding]},outputEncoding:{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${_getEncodings()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:NoBlending,depthTest:false,depthWrite:false});return t}function _getCubemapShader(){const e=new RawShaderMaterial({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:ENCODINGS[LinearEncoding]},outputEncoding:{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${_getEncodings()}

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:NoBlending,depthTest:false,depthWrite:false});return e}function _getCommonVertexShader(){return`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function _getEncodings(){return`

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`}const LineStrip=0;const LinePieces=1;const NoColors=0;const FaceColors=1;const VertexColors=2;function MeshFaceMaterial(e){console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");return e}function MultiMaterial(e=[]){console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");e.isMultiMaterial=true;e.materials=e;e.clone=function(){return e.slice()};return e}function PointCloud(e,t){console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new Points(e,t)}function Particle(e){console.warn("THREE.Particle has been renamed to THREE.Sprite.");return new Sprite(e)}function ParticleSystem(e,t){console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");return new Points(e,t)}function PointCloudMaterial(e){console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new PointsMaterial(e)}function ParticleBasicMaterial(e){console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new PointsMaterial(e)}function ParticleSystemMaterial(e){console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new PointsMaterial(e)}function Vertex(e,t,n){console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");return new Vector3(e,t,n)}function DynamicBufferAttribute(e,t){console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.");return new BufferAttribute(e,t).setUsage(DynamicDrawUsage)}function Int8Attribute(e,t){console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");return new Int8BufferAttribute(e,t)}function Uint8Attribute(e,t){console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");return new Uint8BufferAttribute(e,t)}function Uint8ClampedAttribute(e,t){console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");return new Uint8ClampedBufferAttribute(e,t)}function Int16Attribute(e,t){console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");return new Int16BufferAttribute(e,t)}function Uint16Attribute(e,t){console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");return new Uint16BufferAttribute(e,t)}function Int32Attribute(e,t){console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");return new Int32BufferAttribute(e,t)}function Uint32Attribute(e,t){console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");return new Uint32BufferAttribute(e,t)}function Float32Attribute(e,t){console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");return new Float32BufferAttribute(e,t)}function Float64Attribute(e,t){console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");return new Float64BufferAttribute(e,t)}Curve.create=function(e,t){console.log("THREE.Curve.create() has been deprecated");e.prototype=Object.create(Curve.prototype);e.prototype.constructor=e;e.prototype.getPoint=t;return e};Path.prototype.fromPoints=function(e){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");return this.setFromPoints(e)};function AxisHelper(e){console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");return new AxesHelper(e)}function BoundingBoxHelper(e,t){console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");return new BoxHelper(e,t)}function EdgesHelper(e,t){console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");return new LineSegments(new EdgesGeometry(e.geometry),new LineBasicMaterial({color:t!==undefined?t:16777215}))}GridHelper.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};SkeletonHelper.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};function WireframeHelper(e,t){console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");return new LineSegments(new WireframeGeometry(e.geometry),new LineBasicMaterial({color:t!==undefined?t:16777215}))}Loader.prototype.extractUrlBase=function(e){console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");return LoaderUtils.extractUrlBase(e)};Loader.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};function XHRLoader(e){console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");return new FileLoader(e)}function BinaryTextureLoader(e){console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");return new DataTextureLoader(e)}Box2.prototype.center=function(e){console.warn("THREE.Box2: .center() has been renamed to .getCenter().");return this.getCenter(e)};Box2.prototype.empty=function(){console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");return this.isEmpty()};Box2.prototype.isIntersectionBox=function(e){console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(e)};Box2.prototype.size=function(e){console.warn("THREE.Box2: .size() has been renamed to .getSize().");return this.getSize(e)};Box3.prototype.center=function(e){console.warn("THREE.Box3: .center() has been renamed to .getCenter().");return this.getCenter(e)};Box3.prototype.empty=function(){console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");return this.isEmpty()};Box3.prototype.isIntersectionBox=function(e){console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(e)};Box3.prototype.isIntersectionSphere=function(e){console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(e)};Box3.prototype.size=function(e){console.warn("THREE.Box3: .size() has been renamed to .getSize().");return this.getSize(e)};Sphere.prototype.empty=function(){console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");return this.isEmpty()};Frustum.prototype.setFromMatrix=function(e){console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");return this.setFromProjectionMatrix(e)};Line3.prototype.center=function(e){console.warn("THREE.Line3: .center() has been renamed to .getCenter().");return this.getCenter(e)};MathUtils.random16=function(){console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");return Math.random()};MathUtils.nearestPowerOfTwo=function(e){console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");return MathUtils.floorPowerOfTwo(e)};MathUtils.nextPowerOfTwo=function(e){console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");return MathUtils.ceilPowerOfTwo(e)};Matrix3.prototype.flattenToArrayOffset=function(e,t){console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(e,t)};Matrix3.prototype.multiplyVector3=function(e){console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return e.applyMatrix3(this)};Matrix3.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")};Matrix3.prototype.applyToBufferAttribute=function(e){console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");return e.applyMatrix3(this)};Matrix3.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")};Matrix3.prototype.getInverse=function(e){console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");return this.copy(e).invert()};Matrix4.prototype.extractPosition=function(e){console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");return this.copyPosition(e)};Matrix4.prototype.flattenToArrayOffset=function(e,t){console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(e,t)};Matrix4.prototype.getPosition=function(){console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");return(new Vector3).setFromMatrixColumn(this,3)};Matrix4.prototype.setRotationFromQuaternion=function(e){console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");return this.makeRotationFromQuaternion(e)};Matrix4.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")};Matrix4.prototype.multiplyVector3=function(e){console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");return e.applyMatrix4(this)};Matrix4.prototype.multiplyVector4=function(e){console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return e.applyMatrix4(this)};Matrix4.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")};Matrix4.prototype.rotateAxis=function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");e.transformDirection(this)};Matrix4.prototype.crossVector=function(e){console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return e.applyMatrix4(this)};Matrix4.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")};Matrix4.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")};Matrix4.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")};Matrix4.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")};Matrix4.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")};Matrix4.prototype.applyToBufferAttribute=function(e){console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");return e.applyMatrix4(this)};Matrix4.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")};Matrix4.prototype.makeFrustum=function(e,t,n,r,i,a){console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");return this.makePerspective(e,t,r,n,i,a)};Matrix4.prototype.getInverse=function(e){console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");return this.copy(e).invert()};Plane.prototype.isIntersectionLine=function(e){console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");return this.intersectsLine(e)};Quaternion.prototype.multiplyVector3=function(e){console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return e.applyQuaternion(this)};Quaternion.prototype.inverse=function(){console.warn("THREE.Quaternion: .inverse() has been renamed to invert().");return this.invert()};Ray.prototype.isIntersectionBox=function(e){console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(e)};Ray.prototype.isIntersectionPlane=function(e){console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");return this.intersectsPlane(e)};Ray.prototype.isIntersectionSphere=function(e){console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(e)};Triangle.prototype.area=function(){console.warn("THREE.Triangle: .area() has been renamed to .getArea().");return this.getArea()};Triangle.prototype.barycoordFromPoint=function(e,t){console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return this.getBarycoord(e,t)};Triangle.prototype.midpoint=function(e){console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");return this.getMidpoint(e)};Triangle.prototypenormal=function(e){console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");return this.getNormal(e)};Triangle.prototype.plane=function(e){console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");return this.getPlane(e)};Triangle.barycoordFromPoint=function(e,t,n,r,i){console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return Triangle.getBarycoord(e,t,n,r,i)};Triangle.normal=function(e,t,n,r){console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");return Triangle.getNormal(e,t,n,r)};Shape.prototype.extractAllPoints=function(e){console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");return this.extractPoints(e)};Shape.prototype.extrude=function(e){console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");return new ExtrudeGeometry(this,e)};Shape.prototype.makeGeometry=function(e){console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");return new ShapeGeometry(this,e)};Vector2.prototype.fromAttribute=function(e,t,n){console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(e,t,n)};Vector2.prototype.distanceToManhattan=function(e){console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(e)};Vector2.prototype.lengthManhattan=function(){console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()};Vector3.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")};Vector3.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")};Vector3.prototype.getPositionFromMatrix=function(e){console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(e)};Vector3.prototype.getScaleFromMatrix=function(e){console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(e)};Vector3.prototype.getColumnFromMatrix=function(e,t){console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(t,e)};Vector3.prototype.applyProjection=function(e){console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");return this.applyMatrix4(e)};Vector3.prototype.fromAttribute=function(e,t,n){console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(e,t,n)};Vector3.prototype.distanceToManhattan=function(e){console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(e)};Vector3.prototype.lengthManhattan=function(){console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()};Vector4.prototype.fromAttribute=function(e,t,n){console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(e,t,n)};Vector4.prototype.lengthManhattan=function(){console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()};Object3D.prototype.getChildByName=function(e){console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(e)};Object3D.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")};Object3D.prototype.translate=function(e,t){console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(t,e)};Object3D.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")};Object3D.prototype.applyMatrix=function(e){console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");return this.applyMatrix4(e)};Object.defineProperties(Object3D.prototype,{eulerOrder:{get:function(){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");return this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Mesh.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")};Object.defineProperties(Mesh.prototype,{drawMode:{get:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");return TrianglesDrawMode},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});Object.defineProperties(LOD.prototype,{objects:{get:function(){console.warn("THREE.LOD: .objects has been renamed to .levels.");return this.levels}}});Object.defineProperty(Skeleton.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}});SkinnedMesh.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};Object.defineProperty(Curve.prototype,"__arcLengthDivisions",{get:function(){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");return this.arcLengthDivisions},set:function(e){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");this.arcLengthDivisions=e}});PerspectiveCamera.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. "+"Use .setFocalLength and .filmGauge for a photographic setup.");if(t!==undefined)this.filmGauge=t;this.setFocalLength(e)};Object.defineProperties(Light.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias.");this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");this.shadow.mapSize.height=e}}});Object.defineProperties(BufferAttribute.prototype,{length:{get:function(){console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");return this.array.length}},dynamic:{get:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");return this.usage===DynamicDrawUsage},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");this.setUsage(DynamicDrawUsage)}}});BufferAttribute.prototype.setDynamic=function(e){console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");this.setUsage(e===true?DynamicDrawUsage:StaticDrawUsage);return this};BufferAttribute.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},BufferAttribute.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};BufferGeometry.prototype.addIndex=function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(e)};BufferGeometry.prototype.addAttribute=function(e,t){console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");if(!(t&&t.isBufferAttribute)&&!(t&&t.isInterleavedBufferAttribute)){console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");return this.setAttribute(e,new BufferAttribute(arguments[1],arguments[2]))}if(e==="index"){console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");this.setIndex(t);return this}return this.setAttribute(e,t)};BufferGeometry.prototype.addDrawCall=function(e,t,n){if(n!==undefined){console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.")}console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(e,t)};BufferGeometry.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");this.clearGroups()};BufferGeometry.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")};BufferGeometry.prototype.removeAttribute=function(e){console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");return this.deleteAttribute(e)};BufferGeometry.prototype.applyMatrix=function(e){console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");return this.applyMatrix4(e)};Object.defineProperties(BufferGeometry.prototype,{drawcalls:{get:function(){console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups}},offsets:{get:function(){console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups}}});Object.defineProperties(InstancedBufferGeometry.prototype,{maxInstancedCount:{get:function(){console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");return this.instanceCount},set:function(e){console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");this.instanceCount=e}}});Object.defineProperties(Raycaster.prototype,{linePrecision:{get:function(){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");return this.params.Line.threshold},set:function(e){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");this.params.Line.threshold=e}}});Object.defineProperties(InterleavedBuffer.prototype,{dynamic:{get:function(){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");return this.usage===DynamicDrawUsage},set:function(e){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");this.setUsage(e)}}});InterleavedBuffer.prototype.setDynamic=function(e){console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");this.setUsage(e===true?DynamicDrawUsage:StaticDrawUsage);return this};InterleavedBuffer.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};ExtrudeGeometry.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")};ExtrudeGeometry.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")};ExtrudeGeometry.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")};Scene.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")};Object.defineProperties(Uniform.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");return this}}});Object.defineProperties(Material.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){console.warn("THREE.Material: .wrapRGB has been removed.");return new Color}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=e===FlatShading}},stencilMask:{get:function(){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead.");return this.stencilFuncMask},set:function(e){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead.");this.stencilFuncMask=e}}});Object.defineProperties(MeshPhongMaterial.prototype,{metal:{get:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");return false},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}});Object.defineProperties(MeshPhysicalMaterial.prototype,{transparency:{get:function(){console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");return this.transmission},set:function(e){console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");this.transmission=e}}});Object.defineProperties(ShaderMaterial.prototype,{derivatives:{get:function(){console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");return this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");this.extensions.derivatives=e}}});WebGLRenderer.prototype.clearTarget=function(e,t,n,r){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");this.setRenderTarget(e);this.clear(t,n,r)};WebGLRenderer.prototype.animate=function(e){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");this.setAnimationLoop(e)};WebGLRenderer.prototype.getCurrentRenderTarget=function(){console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");return this.getRenderTarget()};WebGLRenderer.prototype.getMaxAnisotropy=function(){console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");return this.capabilities.getMaxAnisotropy()};WebGLRenderer.prototype.getPrecision=function(){console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");return this.capabilities.precision};WebGLRenderer.prototype.resetGLState=function(){console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");return this.state.reset()};WebGLRenderer.prototype.supportsFloatTextures=function(){console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");return this.extensions.get("OES_texture_float")};WebGLRenderer.prototype.supportsHalfFloatTextures=function(){console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return this.extensions.get("OES_texture_half_float")};WebGLRenderer.prototype.supportsStandardDerivatives=function(){console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");return this.extensions.get("OES_standard_derivatives")};WebGLRenderer.prototype.supportsCompressedTextureS3TC=function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");return this.extensions.get("WEBGL_compressed_texture_s3tc")};WebGLRenderer.prototype.supportsCompressedTexturePVRTC=function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return this.extensions.get("WEBGL_compressed_texture_pvrtc")};WebGLRenderer.prototype.supportsBlendMinMax=function(){console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return this.extensions.get("EXT_blend_minmax")};WebGLRenderer.prototype.supportsVertexTextures=function(){console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");return this.capabilities.vertexTextures};WebGLRenderer.prototype.supportsInstancedArrays=function(){console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");return this.extensions.get("ANGLE_instanced_arrays")};WebGLRenderer.prototype.enableScissorTest=function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");this.setScissorTest(e)};WebGLRenderer.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")};WebGLRenderer.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")};WebGLRenderer.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")};WebGLRenderer.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")};WebGLRenderer.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")};WebGLRenderer.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")};WebGLRenderer.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")};WebGLRenderer.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")};WebGLRenderer.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")};WebGLRenderer.prototype.getActiveMipMapLevel=function(){console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");return this.getActiveMipmapLevel()};Object.defineProperties(WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");return this.getContext()}},vr:{get:function(){console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");return this.xr}},gammaInput:{get:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");return false},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");return false},set:function(e){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");this.outputEncoding=e===true?sRGBEncoding:LinearEncoding}},toneMappingWhitePoint:{get:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");return 1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}});Object.defineProperties(WebGLShadowMap.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});function WebGLRenderTargetCube(e,t,n){console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).");return new WebGLCubeRenderTarget(e,n)}Object.defineProperties(WebGLRenderTarget.prototype,{wrapS:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");this.texture.wrapS=e}},wrapT:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");return this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT=e}},magFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter=e}},minFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter=e}},anisotropy:{get:function(){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");return this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy=e}},offset:{get:function(){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset=e}},repeat:{get:function(){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");this.texture.repeat=e}},format:{get:function(){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");return this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");this.texture.format=e}},type:{get:function(){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type=e}},generateMipmaps:{get:function(){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");return this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");this.texture.generateMipmaps=e}}});Object.defineProperties(Audio.prototype,{load:{value:function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const t=this;const n=new AudioLoader;n.load(e,function(e){t.setBuffer(e)});return this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}});AudioAnalyser.prototype.getData=function(){console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");return this.getFrequencyData()};CubeCamera.prototype.updateCubeMap=function(e,t){console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");return this.update(e,t)};CubeCamera.prototype.clear=function(e,t,n,r){console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear().");return this.renderTarget.clear(e,t,n,r)};ImageUtils.crossOrigin=undefined;ImageUtils.loadTexture=function(e,t,n,r){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const i=new TextureLoader;i.setCrossOrigin(this.crossOrigin);const a=i.load(e,n,undefined,r);if(t)a.mapping=t;return a};ImageUtils.loadTextureCube=function(e,t,n,r){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const i=new CubeTextureLoader;i.setCrossOrigin(this.crossOrigin);const a=i.load(e,n,undefined,r);if(t)a.mapping=t;return a};ImageUtils.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};ImageUtils.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};function CanvasRenderer(){console.error("THREE.CanvasRenderer has been removed")}function JSONLoader(){console.error("THREE.JSONLoader has been removed.")}const SceneUtils={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function LensFlare(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:REVISION}}))}if(typeof window!=="undefined"){if(window.__THREE__){console.warn("WARNING: Multiple instances of Three.js being imported.")}else{window.__THREE__=REVISION}}export{ACESFilmicToneMapping,AddEquation,AddOperation,AdditiveAnimationBlendMode,AdditiveBlending,AlphaFormat,AlwaysDepth,AlwaysStencilFunc,AmbientLight,AmbientLightProbe,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrayCamera,ArrowHelper,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,AxisHelper,BackSide,BasicDepthPacking,BasicShadowMap,BinaryTextureLoader,Bone,BooleanKeyframeTrack,BoundingBoxHelper,Box2,Box3,Box3Helper,BoxGeometry as BoxBufferGeometry,BoxGeometry,BoxHelper,BufferAttribute,BufferGeometry,BufferGeometryLoader,ByteType,Cache,Camera,CameraHelper,CanvasRenderer,CanvasTexture,CatmullRomCurve3,CineonToneMapping,CircleGeometry as CircleBufferGeometry,CircleGeometry,ClampToEdgeWrapping,Clock,Color,ColorKeyframeTrack,CompressedTexture,CompressedTextureLoader,ConeGeometry as ConeBufferGeometry,ConeGeometry,CubeCamera,CubeReflectionMapping,CubeRefractionMapping,CubeTexture,CubeTextureLoader,CubeUVReflectionMapping,CubeUVRefractionMapping,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceBack,CullFaceFront,CullFaceFrontBack,CullFaceNone,Curve,CurvePath,CustomBlending,CustomToneMapping,CylinderGeometry as CylinderBufferGeometry,CylinderGeometry,Cylindrical,DataTexture,DataTexture2DArray,DataTexture3D,DataTextureLoader,DataUtils,DecrementStencilOp,DecrementWrapStencilOp,DefaultLoadingManager,DepthFormat,DepthStencilFormat,DepthTexture,DirectionalLight,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry as DodecahedronBufferGeometry,DodecahedronGeometry,DoubleSide,DstAlphaFactor,DstColorFactor,DynamicBufferAttribute,DynamicCopyUsage,DynamicDrawUsage,DynamicReadUsage,EdgesGeometry,EdgesHelper,EllipseCurve,EqualDepth,EqualStencilFunc,EquirectangularReflectionMapping,EquirectangularRefractionMapping,Euler,EventDispatcher,ExtrudeGeometry as ExtrudeBufferGeometry,ExtrudeGeometry,FaceColors,FileLoader,FlatShading,Float16BufferAttribute,Float32Attribute,Float32BufferAttribute,Float64Attribute,Float64BufferAttribute,FloatType,Fog,FogExp2,Font,FontLoader,FrontSide,Frustum,GLBufferAttribute,GLSL1,GLSL3,GammaEncoding,GreaterDepth,GreaterEqualDepth,GreaterEqualStencilFunc,GreaterStencilFunc,GridHelper,Group,HalfFloatType,HemisphereLight,HemisphereLightHelper,HemisphereLightProbe,IcosahedronGeometry as IcosahedronBufferGeometry,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,ImmediateRenderObject,IncrementStencilOp,IncrementWrapStencilOp,InstancedBufferAttribute,InstancedBufferGeometry,InstancedInterleavedBuffer,InstancedMesh,Int16Attribute,Int16BufferAttribute,Int32Attribute,Int32BufferAttribute,Int8Attribute,Int8BufferAttribute,IntType,InterleavedBuffer,InterleavedBufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,InvertStencilOp,JSONLoader,KeepStencilOp,KeyframeTrack,LOD,LatheGeometry as LatheBufferGeometry,LatheGeometry,Layers,LensFlare,LessDepth,LessEqualDepth,LessEqualStencilFunc,LessStencilFunc,Light,LightProbe,Line,Line3,LineBasicMaterial,LineCurve,LineCurve3,LineDashedMaterial,LineLoop,LinePieces,LineSegments,LineStrip,LinearEncoding,LinearFilter,LinearInterpolant,LinearMipMapLinearFilter,LinearMipMapNearestFilter,LinearMipmapLinearFilter,LinearMipmapNearestFilter,LinearToneMapping,Loader,LoaderUtils,LoadingManager,LogLuvEncoding,LoopOnce,LoopPingPong,LoopRepeat,LuminanceAlphaFormat,LuminanceFormat,MOUSE,Material,MaterialLoader,MathUtils as Math,MathUtils,Matrix3,Matrix4,MaxEquation,Mesh,MeshBasicMaterial,MeshDepthMaterial,MeshDistanceMaterial,MeshFaceMaterial,MeshLambertMaterial,MeshMatcapMaterial,MeshNormalMaterial,MeshPhongMaterial,MeshPhysicalMaterial,MeshStandardMaterial,MeshToonMaterial,MinEquation,MirroredRepeatWrapping,MixOperation,MultiMaterial,MultiplyBlending,MultiplyOperation,NearestFilter,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NearestMipmapLinearFilter,NearestMipmapNearestFilter,NeverDepth,NeverStencilFunc,NoBlending,NoColors,NoToneMapping,NormalAnimationBlendMode,NormalBlending,NotEqualDepth,NotEqualStencilFunc,NumberKeyframeTrack,Object3D,ObjectLoader,ObjectSpaceNormalMap,OctahedronGeometry as OctahedronBufferGeometry,OctahedronGeometry,OneFactor,OneMinusDstAlphaFactor,OneMinusDstColorFactor,OneMinusSrcAlphaFactor,OneMinusSrcColorFactor,OrthographicCamera,PCFShadowMap,PCFSoftShadowMap,PMREMGenerator,ParametricGeometry as ParametricBufferGeometry,ParametricGeometry,Particle,ParticleBasicMaterial,ParticleSystem,ParticleSystemMaterial,Path,PerspectiveCamera,Plane,PlaneGeometry as PlaneBufferGeometry,PlaneGeometry,PlaneHelper,PointCloud,PointCloudMaterial,PointLight,PointLightHelper,Points,PointsMaterial,PolarGridHelper,PolyhedronGeometry as PolyhedronBufferGeometry,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,Quaternion,QuaternionKeyframeTrack,QuaternionLinearInterpolant,REVISION,RGBADepthPacking,RGBAFormat,RGBAIntegerFormat,RGBA_ASTC_10x10_Format,RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format,RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format,RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format,RGBA_BPTC_Format,RGBA_ETC2_EAC_Format,RGBA_PVRTC_2BPPV1_Format,RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,RGBDEncoding,RGBEEncoding,RGBEFormat,RGBFormat,RGBIntegerFormat,RGBM16Encoding,RGBM7Encoding,RGB_ETC1_Format,RGB_ETC2_Format,RGB_PVRTC_2BPPV1_Format,RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format,RGFormat,RGIntegerFormat,RawShaderMaterial,Ray,Raycaster,RectAreaLight,RedFormat,RedIntegerFormat,ReinhardToneMapping,RepeatWrapping,ReplaceStencilOp,ReverseSubtractEquation,RingGeometry as RingBufferGeometry,RingGeometry,SRGB8_ALPHA8_ASTC_10x10_Format,SRGB8_ALPHA8_ASTC_10x5_Format,SRGB8_ALPHA8_ASTC_10x6_Format,SRGB8_ALPHA8_ASTC_10x8_Format,SRGB8_ALPHA8_ASTC_12x10_Format,SRGB8_ALPHA8_ASTC_12x12_Format,SRGB8_ALPHA8_ASTC_4x4_Format,SRGB8_ALPHA8_ASTC_5x4_Format,SRGB8_ALPHA8_ASTC_5x5_Format,SRGB8_ALPHA8_ASTC_6x5_Format,SRGB8_ALPHA8_ASTC_6x6_Format,SRGB8_ALPHA8_ASTC_8x5_Format,SRGB8_ALPHA8_ASTC_8x6_Format,SRGB8_ALPHA8_ASTC_8x8_Format,Scene,SceneUtils,ShaderChunk,ShaderLib,ShaderMaterial,ShadowMaterial,Shape,ShapeGeometry as ShapeBufferGeometry,ShapeGeometry,ShapePath,ShapeUtils,ShortType,Skeleton,SkeletonHelper,SkinnedMesh,SmoothShading,Sphere,SphereGeometry as SphereBufferGeometry,SphereGeometry,Spherical,SphericalHarmonics3,SplineCurve,SpotLight,SpotLightHelper,Sprite,SpriteMaterial,SrcAlphaFactor,SrcAlphaSaturateFactor,SrcColorFactor,StaticCopyUsage,StaticDrawUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,SubtractEquation,SubtractiveBlending,TOUCH,TangentSpaceNormalMap,TetrahedronGeometry as TetrahedronBufferGeometry,TetrahedronGeometry,TextGeometry as TextBufferGeometry,TextGeometry,Texture,TextureLoader,TorusGeometry as TorusBufferGeometry,TorusGeometry,TorusKnotGeometry as TorusKnotBufferGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry as TubeBufferGeometry,TubeGeometry,UVMapping,Uint16Attribute,Uint16BufferAttribute,Uint32Attribute,Uint32BufferAttribute,Uint8Attribute,Uint8BufferAttribute,Uint8ClampedAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsLib,UniformsUtils,UnsignedByteType,UnsignedInt248Type,UnsignedIntType,UnsignedShort4444Type,UnsignedShort5551Type,UnsignedShort565Type,UnsignedShortType,VSMShadowMap,Vector2,Vector3,Vector4,VectorKeyframeTrack,Vertex,VertexColors,VideoTexture,WebGL1Renderer,WebGLCubeRenderTarget,WebGLMultisampleRenderTarget,WebGLRenderTarget,WebGLRenderTargetCube,WebGLRenderer,WebGLUtils,WireframeGeometry,WireframeHelper,WrapAroundEnding,XHRLoader,ZeroCurvatureEnding,ZeroFactor,ZeroSlopeEnding,ZeroStencilOp,sRGBEncoding};